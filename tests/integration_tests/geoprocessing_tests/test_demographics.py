from common.utilities.inversion_of_control import Dependency, dependencies
from common.utilities.signal_math import SignalDecimal
from geoprocessing.business_logic.enums import TradeAreaThreshold
from geoprocessing.geoprocessors.demographics.gp1_10_1_geo_processor import GP1_10_1_GeoProcessor
from geoprocessing.helpers.dependency_helper import register_concrete_dependencies
from tests.integration_tests.geoprocessing_tests.data_access_tests.data_access_misc_queries import *

__author__ = 'erezrubinstein'

import unittest


class TestDemographics(unittest.TestCase):
    def setUp(self):

        # register the log to errors only
        register_concrete_dependencies(False, "ERROR")
        self._data_repository = Dependency("DataRepository").value
        self._config = Dependency("Config").value

        # insert test store and trade area (in NYC)
        self._threshold = TradeAreaThreshold.DistanceMiles10
        self._company_id = insert_test_company()
        self._address_id = insert_test_address(-73.992770, 40.730073, "1", "Astor Place", "New York", "NY", 10003)
        self._store_id = insert_test_store(self._company_id, self._address_id, "20120101", "20121201", "20120102", "20121202")
        self._store = Store().select_by_id(self._store_id)
        self._trade_area = self._data_repository.select_trade_area_force_insert(self._store_id, self._threshold)

    def doCleanups(self):
        # delete test data
        delete_test_trade_area_shape(self._trade_area.trade_area_id)
        delete_test_surface_area(self._trade_area.trade_area_id)
        delete_demographic_num_and_str_values(self._trade_area.trade_area_id)
        delete_test_trade_area(self._store_id)
        delete_test_store(self._store_id)
        delete_test_address(self._address_id)
        delete_test_company(self._company_id)

        # clear dependencies
        dependencies.clear()


    def test_gp1__demographic_and_income_profile(self):
        """
        Run GP1 Demographic and Income Profile.  And verify demographics
        """
        # override config to one template
        self._config.gp1_templates = ["Demographic and Income Profile"]

        # run gp 1
        GP1_10_1_GeoProcessor(self._threshold).process(self._company_id, self._store_id)

        # select demographic_str_values and demographic_num_values
        dem_num_values = sorted(select_demographic_numvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
        dem_str_values = sorted(select_demographic_strvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)

        # verify that we have all str and num values
        self.assertEqual(len(dem_num_values), 209)
        self.assertEqual(len(dem_str_values), 5)

        # verify all str values
        self.assertEqual(dem_str_values[0].data_item_id, 1)
        self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
        self.assertEqual(dem_str_values[1].data_item_id, 2)
        self.assertEqual(dem_str_values[1].value, "10 miles")
        self.assertEqual(dem_str_values[2].data_item_id, 6)
        self.assertEqual(dem_str_values[2].value, "")
        self.assertEqual(dem_str_values[3].data_item_id, 8)
        self.assertEqual(dem_str_values[3].value, "Ring: 10 mile radius")
        self.assertEqual(dem_str_values[4].data_item_id, 11)
        self.assertEqual(dem_str_values[4].value, "")

        # verify all num values
        self.assertEqual(dem_num_values[0].data_item_id, 3)
        self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
        self.assertEqual(dem_num_values[1].data_item_id, 4)
        self.assertEqual(dem_num_values[1].value, self._store_id)
        self.assertEqual(dem_num_values[2].data_item_id, 5)
        self.assertEqual(dem_num_values[2].value, SignalDecimal(1.000000000))
        self.assertEqual(dem_num_values[3].data_item_id, 7)
        self.assertEqual(dem_num_values[3].value, self._store_id)
        self.assertEqual(dem_num_values[4].data_item_id, 9)
        self.assertEqual(dem_num_values[4].value, SignalDecimal(40.730073000))
        self.assertEqual(dem_num_values[5].data_item_id, 10)
        self.assertEqual(dem_num_values[5].value, SignalDecimal(-73.992770000))
        self.assertEqual(dem_num_values[6].data_item_id, 12)
        self.assertEqual(dem_num_values[6].value, SignalDecimal(7191427.000000000))
        self.assertEqual(dem_num_values[7].data_item_id, 13)
        self.assertEqual(dem_num_values[7].value, SignalDecimal(7231497.000000000))
        self.assertEqual(dem_num_values[8].data_item_id, 14)
        self.assertEqual(dem_num_values[8].value, SignalDecimal(7350242.000000000))
        self.assertEqual(dem_num_values[9].data_item_id, 15)
        self.assertEqual(dem_num_values[9].value, SignalDecimal(2783132.000000000))
        self.assertEqual(dem_num_values[10].data_item_id, 16)
        self.assertEqual(dem_num_values[10].value, SignalDecimal(2798907.000000000))
        self.assertEqual(dem_num_values[11].data_item_id, 17)
        self.assertEqual(dem_num_values[11].value, SignalDecimal(2853568.000000000))
        self.assertEqual(dem_num_values[12].data_item_id, 18)
        self.assertEqual(dem_num_values[12].value, SignalDecimal(1603716.000000000))
        self.assertEqual(dem_num_values[13].data_item_id, 19)
        self.assertEqual(dem_num_values[13].value, SignalDecimal(1612849.000000000))
        self.assertEqual(dem_num_values[14].data_item_id, 20)
        self.assertEqual(dem_num_values[14].value, SignalDecimal(1626283.000000000))
        self.assertEqual(dem_num_values[15].data_item_id, 21)
        self.assertEqual(dem_num_values[15].value, SignalDecimal(2.530000000))
        self.assertEqual(dem_num_values[16].data_item_id, 22)
        self.assertEqual(dem_num_values[16].value, SignalDecimal(2.530000000))
        self.assertEqual(dem_num_values[17].data_item_id, 23)
        self.assertEqual(dem_num_values[17].value, SignalDecimal(2.520000000))
        self.assertEqual(dem_num_values[18].data_item_id, 24)
        self.assertEqual(dem_num_values[18].value, SignalDecimal(777354.000000000))
        self.assertEqual(dem_num_values[19].data_item_id, 25)
        self.assertEqual(dem_num_values[19].value, SignalDecimal(772455.000000000))
        self.assertEqual(dem_num_values[20].data_item_id, 26)
        self.assertEqual(dem_num_values[20].value, SignalDecimal(812367.000000000))
        self.assertEqual(dem_num_values[21].data_item_id, 27)
        self.assertEqual(dem_num_values[21].value, SignalDecimal(2005778.000000000))
        self.assertEqual(dem_num_values[22].data_item_id, 28)
        self.assertEqual(dem_num_values[22].value, SignalDecimal(2026452.000000000))
        self.assertEqual(dem_num_values[23].data_item_id, 29)
        self.assertEqual(dem_num_values[23].value, SignalDecimal(2041201.000000000))
        self.assertEqual(dem_num_values[24].data_item_id, 30)
        self.assertEqual(dem_num_values[24].value, SignalDecimal(34.900000000))
        self.assertEqual(dem_num_values[25].data_item_id, 31)
        self.assertEqual(dem_num_values[25].value, SignalDecimal(34.900000000))
        self.assertEqual(dem_num_values[26].data_item_id, 32)
        self.assertEqual(dem_num_values[26].value, SignalDecimal(35.200000000))
        self.assertEqual(dem_num_values[27].data_item_id, 33)
        self.assertEqual(dem_num_values[27].value, SignalDecimal(0.326000000))
        self.assertEqual(dem_num_values[28].data_item_id, 34)
        self.assertEqual(dem_num_values[28].value, SignalDecimal(0.200000000))
        self.assertEqual(dem_num_values[29].data_item_id, 35)
        self.assertEqual(dem_num_values[29].value, SignalDecimal(0.670000000))
        self.assertEqual(dem_num_values[30].data_item_id, 36)
        self.assertEqual(dem_num_values[30].value, SignalDecimal(0.388000000))
        self.assertEqual(dem_num_values[31].data_item_id, 37)
        self.assertEqual(dem_num_values[31].value, SignalDecimal(0.280000000))
        self.assertEqual(dem_num_values[32].data_item_id, 38)
        self.assertEqual(dem_num_values[32].value, SignalDecimal(0.710000000))
        self.assertEqual(dem_num_values[33].data_item_id, 39)
        self.assertEqual(dem_num_values[33].value, SignalDecimal(0.166000000))
        self.assertEqual(dem_num_values[34].data_item_id, 40)
        self.assertEqual(dem_num_values[34].value, SignalDecimal(0.070000000))
        self.assertEqual(dem_num_values[35].data_item_id, 41)
        self.assertEqual(dem_num_values[35].value, SignalDecimal(0.570000000))
        self.assertEqual(dem_num_values[36].data_item_id, 42)
        self.assertEqual(dem_num_values[36].value, SignalDecimal(1.013000000))
        self.assertEqual(dem_num_values[37].data_item_id, 43)
        self.assertEqual(dem_num_values[37].value, SignalDecimal(0.650000000))
        self.assertEqual(dem_num_values[38].data_item_id, 44)
        self.assertEqual(dem_num_values[38].value, SignalDecimal(0.910000000))
        self.assertEqual(dem_num_values[39].data_item_id, 45)
        self.assertEqual(dem_num_values[39].value, SignalDecimal(3.857000000))
        self.assertEqual(dem_num_values[40].data_item_id, 46)
        self.assertEqual(dem_num_values[40].value, SignalDecimal(3.540000000))
        self.assertEqual(dem_num_values[41].data_item_id, 47)
        self.assertEqual(dem_num_values[41].value, SignalDecimal(2.750000000))
        self.assertEqual(dem_num_values[42].data_item_id, 48)
        self.assertEqual(dem_num_values[42].value, SignalDecimal(546976.000000000))
        self.assertEqual(dem_num_values[43].data_item_id, 49)
        self.assertEqual(dem_num_values[43].value, SignalDecimal(19.543000000))
        self.assertEqual(dem_num_values[44].data_item_id, 50)
        self.assertEqual(dem_num_values[44].value, SignalDecimal(538006.000000000))
        self.assertEqual(dem_num_values[45].data_item_id, 51)
        self.assertEqual(dem_num_values[45].value, SignalDecimal(18.854000000))
        self.assertEqual(dem_num_values[46].data_item_id, 52)
        self.assertEqual(dem_num_values[46].value, SignalDecimal(316067.000000000))
        self.assertEqual(dem_num_values[47].data_item_id, 53)
        self.assertEqual(dem_num_values[47].value, SignalDecimal(11.293000000))
        self.assertEqual(dem_num_values[48].data_item_id, 54)
        self.assertEqual(dem_num_values[48].value, SignalDecimal(257132.000000000))
        self.assertEqual(dem_num_values[49].data_item_id, 55)
        self.assertEqual(dem_num_values[49].value, SignalDecimal(9.011000000))
        self.assertEqual(dem_num_values[50].data_item_id, 56)
        self.assertEqual(dem_num_values[50].value, SignalDecimal(279223.000000000))
        self.assertEqual(dem_num_values[51].data_item_id, 57)
        self.assertEqual(dem_num_values[51].value, SignalDecimal(9.976000000))
        self.assertEqual(dem_num_values[52].data_item_id, 58)
        self.assertEqual(dem_num_values[52].value, SignalDecimal(228433.000000000))
        self.assertEqual(dem_num_values[53].data_item_id, 59)
        self.assertEqual(dem_num_values[53].value, SignalDecimal(8.005000000))
        self.assertEqual(dem_num_values[54].data_item_id, 60)
        self.assertEqual(dem_num_values[54].value, SignalDecimal(352219.000000000))
        self.assertEqual(dem_num_values[55].data_item_id, 61)
        self.assertEqual(dem_num_values[55].value, SignalDecimal(12.584000000))
        self.assertEqual(dem_num_values[56].data_item_id, 62)
        self.assertEqual(dem_num_values[56].value, SignalDecimal(303082.000000000))
        self.assertEqual(dem_num_values[57].data_item_id, 63)
        self.assertEqual(dem_num_values[57].value, SignalDecimal(10.621000000))
        self.assertEqual(dem_num_values[58].data_item_id, 64)
        self.assertEqual(dem_num_values[58].value, SignalDecimal(431496.000000000))
        self.assertEqual(dem_num_values[59].data_item_id, 65)
        self.assertEqual(dem_num_values[59].value, SignalDecimal(15.417000000))
        self.assertEqual(dem_num_values[60].data_item_id, 66)
        self.assertEqual(dem_num_values[60].value, SignalDecimal(424977.000000000))
        self.assertEqual(dem_num_values[61].data_item_id, 67)
        self.assertEqual(dem_num_values[61].value, SignalDecimal(14.893000000))
        self.assertEqual(dem_num_values[62].data_item_id, 68)
        self.assertEqual(dem_num_values[62].value, SignalDecimal(279747.000000000))
        self.assertEqual(dem_num_values[63].data_item_id, 69)
        self.assertEqual(dem_num_values[63].value, SignalDecimal(9.995000000))
        self.assertEqual(dem_num_values[64].data_item_id, 70)
        self.assertEqual(dem_num_values[64].value, SignalDecimal(380270.000000000))
        self.assertEqual(dem_num_values[65].data_item_id, 71)
        self.assertEqual(dem_num_values[65].value, SignalDecimal(13.326000000))
        self.assertEqual(dem_num_values[66].data_item_id, 72)
        self.assertEqual(dem_num_values[66].value, SignalDecimal(297439.000000000))
        self.assertEqual(dem_num_values[67].data_item_id, 73)
        self.assertEqual(dem_num_values[67].value, SignalDecimal(10.627000000))
        self.assertEqual(dem_num_values[68].data_item_id, 74)
        self.assertEqual(dem_num_values[68].value, SignalDecimal(372156.000000000))
        self.assertEqual(dem_num_values[69].data_item_id, 75)
        self.assertEqual(dem_num_values[69].value, SignalDecimal(13.042000000))
        self.assertEqual(dem_num_values[70].data_item_id, 76)
        self.assertEqual(dem_num_values[70].value, SignalDecimal(121503.000000000))
        self.assertEqual(dem_num_values[71].data_item_id, 77)
        self.assertEqual(dem_num_values[71].value, SignalDecimal(4.341000000))
        self.assertEqual(dem_num_values[72].data_item_id, 78)
        self.assertEqual(dem_num_values[72].value, SignalDecimal(153719.000000000))
        self.assertEqual(dem_num_values[73].data_item_id, 79)
        self.assertEqual(dem_num_values[73].value, SignalDecimal(5.387000000))
        self.assertEqual(dem_num_values[74].data_item_id, 80)
        self.assertEqual(dem_num_values[74].value, SignalDecimal(174180.000000000))
        self.assertEqual(dem_num_values[75].data_item_id, 81)
        self.assertEqual(dem_num_values[75].value, SignalDecimal(6.223000000))
        self.assertEqual(dem_num_values[76].data_item_id, 82)
        self.assertEqual(dem_num_values[76].value, SignalDecimal(195738.000000000))
        self.assertEqual(dem_num_values[77].data_item_id, 83)
        self.assertEqual(dem_num_values[77].value, SignalDecimal(6.860000000))
        self.assertEqual(dem_num_values[78].data_item_id, 84)
        self.assertEqual(dem_num_values[78].value, SignalDecimal(45018.000000000))
        self.assertEqual(dem_num_values[79].data_item_id, 85)
        self.assertEqual(dem_num_values[79].value, SignalDecimal(54397.000000000))
        self.assertEqual(dem_num_values[80].data_item_id, 86)
        self.assertEqual(dem_num_values[80].value, SignalDecimal(70309.000000000))
        self.assertEqual(dem_num_values[81].data_item_id, 87)
        self.assertEqual(dem_num_values[81].value, SignalDecimal(82793.000000000))
        self.assertEqual(dem_num_values[82].data_item_id, 88)
        self.assertEqual(dem_num_values[82].value, SignalDecimal(27899.000000000))
        self.assertEqual(dem_num_values[83].data_item_id, 89)
        self.assertEqual(dem_num_values[83].value, SignalDecimal(32840.000000000))
        self.assertEqual(dem_num_values[84].data_item_id, 90)
        self.assertEqual(dem_num_values[84].value, SignalDecimal(461394.000000000))
        self.assertEqual(dem_num_values[85].data_item_id, 91)
        self.assertEqual(dem_num_values[85].value, SignalDecimal(6.416000000))
        self.assertEqual(dem_num_values[86].data_item_id, 92)
        self.assertEqual(dem_num_values[86].value, SignalDecimal(457245.000000000))
        self.assertEqual(dem_num_values[87].data_item_id, 93)
        self.assertEqual(dem_num_values[87].value, SignalDecimal(6.323000000))
        self.assertEqual(dem_num_values[88].data_item_id, 94)
        self.assertEqual(dem_num_values[88].value, SignalDecimal(467942.000000000))
        self.assertEqual(dem_num_values[89].data_item_id, 95)
        self.assertEqual(dem_num_values[89].value, SignalDecimal(6.366000000))
        self.assertEqual(dem_num_values[90].data_item_id, 96)
        self.assertEqual(dem_num_values[90].value, SignalDecimal(405970.000000000))
        self.assertEqual(dem_num_values[91].data_item_id, 97)
        self.assertEqual(dem_num_values[91].value, SignalDecimal(5.645000000))
        self.assertEqual(dem_num_values[92].data_item_id, 98)
        self.assertEqual(dem_num_values[92].value, SignalDecimal(406724.000000000))
        self.assertEqual(dem_num_values[93].data_item_id, 99)
        self.assertEqual(dem_num_values[93].value, SignalDecimal(5.624000000))
        self.assertEqual(dem_num_values[94].data_item_id, 100)
        self.assertEqual(dem_num_values[94].value, SignalDecimal(409298.000000000))
        self.assertEqual(dem_num_values[95].data_item_id, 101)
        self.assertEqual(dem_num_values[95].value, SignalDecimal(5.568000000))
        self.assertEqual(dem_num_values[96].data_item_id, 102)
        self.assertEqual(dem_num_values[96].value, SignalDecimal(395723.000000000))
        self.assertEqual(dem_num_values[97].data_item_id, 103)
        self.assertEqual(dem_num_values[97].value, SignalDecimal(5.503000000))
        self.assertEqual(dem_num_values[98].data_item_id, 104)
        self.assertEqual(dem_num_values[98].value, SignalDecimal(397117.000000000))
        self.assertEqual(dem_num_values[99].data_item_id, 105)
        self.assertEqual(dem_num_values[99].value, SignalDecimal(5.491000000))
        self.assertEqual(dem_num_values[100].data_item_id, 106)
        self.assertEqual(dem_num_values[100].value, SignalDecimal(403918.000000000))
        self.assertEqual(dem_num_values[101].data_item_id, 107)
        self.assertEqual(dem_num_values[101].value, SignalDecimal(5.495000000))
        self.assertEqual(dem_num_values[102].data_item_id, 108)
        self.assertEqual(dem_num_values[102].value, SignalDecimal(453250.000000000))
        self.assertEqual(dem_num_values[103].data_item_id, 109)
        self.assertEqual(dem_num_values[103].value, SignalDecimal(6.303000000))
        self.assertEqual(dem_num_values[104].data_item_id, 110)
        self.assertEqual(dem_num_values[104].value, SignalDecimal(452986.000000000))
        self.assertEqual(dem_num_values[105].data_item_id, 111)
        self.assertEqual(dem_num_values[105].value, SignalDecimal(6.264000000))
        self.assertEqual(dem_num_values[106].data_item_id, 112)
        self.assertEqual(dem_num_values[106].value, SignalDecimal(429305.000000000))
        self.assertEqual(dem_num_values[107].data_item_id, 113)
        self.assertEqual(dem_num_values[107].value, SignalDecimal(5.841000000))
        self.assertEqual(dem_num_values[108].data_item_id, 114)
        self.assertEqual(dem_num_values[108].value, SignalDecimal(576294.000000000))
        self.assertEqual(dem_num_values[109].data_item_id, 115)
        self.assertEqual(dem_num_values[109].value, SignalDecimal(8.014000000))
        self.assertEqual(dem_num_values[110].data_item_id, 116)
        self.assertEqual(dem_num_values[110].value, SignalDecimal(581261.000000000))
        self.assertEqual(dem_num_values[111].data_item_id, 117)
        self.assertEqual(dem_num_values[111].value, SignalDecimal(8.038000000))
        self.assertEqual(dem_num_values[112].data_item_id, 118)
        self.assertEqual(dem_num_values[112].value, SignalDecimal(567923.000000000))
        self.assertEqual(dem_num_values[113].data_item_id, 119)
        self.assertEqual(dem_num_values[113].value, SignalDecimal(7.727000000))
        self.assertEqual(dem_num_values[114].data_item_id, 120)
        self.assertEqual(dem_num_values[114].value, SignalDecimal(1317460.000000000))
        self.assertEqual(dem_num_values[115].data_item_id, 121)
        self.assertEqual(dem_num_values[115].value, SignalDecimal(18.320000000))
        self.assertEqual(dem_num_values[116].data_item_id, 122)
        self.assertEqual(dem_num_values[116].value, SignalDecimal(1328977.000000000))
        self.assertEqual(dem_num_values[117].data_item_id, 123)
        self.assertEqual(dem_num_values[117].value, SignalDecimal(18.378000000))
        self.assertEqual(dem_num_values[118].data_item_id, 124)
        self.assertEqual(dem_num_values[118].value, SignalDecimal(1372794.000000000))
        self.assertEqual(dem_num_values[119].data_item_id, 125)
        self.assertEqual(dem_num_values[119].value, SignalDecimal(18.677000000))
        self.assertEqual(dem_num_values[120].data_item_id, 126)
        self.assertEqual(dem_num_values[120].value, SignalDecimal(1041539.000000000))
        self.assertEqual(dem_num_values[121].data_item_id, 127)
        self.assertEqual(dem_num_values[121].value, SignalDecimal(14.483000000))
        self.assertEqual(dem_num_values[122].data_item_id, 128)
        self.assertEqual(dem_num_values[122].value, SignalDecimal(1040892.000000000))
        self.assertEqual(dem_num_values[123].data_item_id, 129)
        self.assertEqual(dem_num_values[123].value, SignalDecimal(14.394000000))
        self.assertEqual(dem_num_values[124].data_item_id, 130)
        self.assertEqual(dem_num_values[124].value, SignalDecimal(1015698.000000000))
        self.assertEqual(dem_num_values[125].data_item_id, 131)
        self.assertEqual(dem_num_values[125].value, SignalDecimal(13.819000000))
        self.assertEqual(dem_num_values[126].data_item_id, 132)
        self.assertEqual(dem_num_values[126].value, SignalDecimal(953345.000000000))
        self.assertEqual(dem_num_values[127].data_item_id, 133)
        self.assertEqual(dem_num_values[127].value, SignalDecimal(13.257000000))
        self.assertEqual(dem_num_values[128].data_item_id, 134)
        self.assertEqual(dem_num_values[128].value, SignalDecimal(950890.000000000))
        self.assertEqual(dem_num_values[129].data_item_id, 135)
        self.assertEqual(dem_num_values[129].value, SignalDecimal(13.149000000))
        self.assertEqual(dem_num_values[130].data_item_id, 136)
        self.assertEqual(dem_num_values[130].value, SignalDecimal(880441.000000000))
        self.assertEqual(dem_num_values[131].data_item_id, 137)
        self.assertEqual(dem_num_values[131].value, SignalDecimal(11.978000000))
        self.assertEqual(dem_num_values[132].data_item_id, 138)
        self.assertEqual(dem_num_values[132].value, SignalDecimal(756439.000000000))
        self.assertEqual(dem_num_values[133].data_item_id, 139)
        self.assertEqual(dem_num_values[133].value, SignalDecimal(10.519000000))
        self.assertEqual(dem_num_values[134].data_item_id, 140)
        self.assertEqual(dem_num_values[134].value, SignalDecimal(769798.000000000))
        self.assertEqual(dem_num_values[135].data_item_id, 141)
        self.assertEqual(dem_num_values[135].value, SignalDecimal(10.645000000))
        self.assertEqual(dem_num_values[136].data_item_id, 142)
        self.assertEqual(dem_num_values[136].value, SignalDecimal(832108.000000000))
        self.assertEqual(dem_num_values[137].data_item_id, 143)
        self.assertEqual(dem_num_values[137].value, SignalDecimal(11.321000000))
        self.assertEqual(dem_num_values[138].data_item_id, 144)
        self.assertEqual(dem_num_values[138].value, SignalDecimal(448803.000000000))
        self.assertEqual(dem_num_values[139].data_item_id, 145)
        self.assertEqual(dem_num_values[139].value, SignalDecimal(6.241000000))
        self.assertEqual(dem_num_values[140].data_item_id, 146)
        self.assertEqual(dem_num_values[140].value, SignalDecimal(462517.000000000))
        self.assertEqual(dem_num_values[141].data_item_id, 147)
        self.assertEqual(dem_num_values[141].value, SignalDecimal(6.396000000))
        self.assertEqual(dem_num_values[142].data_item_id, 148)
        self.assertEqual(dem_num_values[142].value, SignalDecimal(567890.000000000))
        self.assertEqual(dem_num_values[143].data_item_id, 149)
        self.assertEqual(dem_num_values[143].value, SignalDecimal(7.726000000))
        self.assertEqual(dem_num_values[144].data_item_id, 150)
        self.assertEqual(dem_num_values[144].value, SignalDecimal(267645.000000000))
        self.assertEqual(dem_num_values[145].data_item_id, 151)
        self.assertEqual(dem_num_values[145].value, SignalDecimal(3.722000000))
        self.assertEqual(dem_num_values[146].data_item_id, 152)
        self.assertEqual(dem_num_values[146].value, SignalDecimal(268863.000000000))
        self.assertEqual(dem_num_values[147].data_item_id, 153)
        self.assertEqual(dem_num_values[147].value, SignalDecimal(3.718000000))
        self.assertEqual(dem_num_values[148].data_item_id, 154)
        self.assertEqual(dem_num_values[148].value, SignalDecimal(278076.000000000))
        self.assertEqual(dem_num_values[149].data_item_id, 155)
        self.assertEqual(dem_num_values[149].value, SignalDecimal(3.783000000))
        self.assertEqual(dem_num_values[150].data_item_id, 156)
        self.assertEqual(dem_num_values[150].value, SignalDecimal(113565.000000000))
        self.assertEqual(dem_num_values[151].data_item_id, 157)
        self.assertEqual(dem_num_values[151].value, SignalDecimal(1.579000000))
        self.assertEqual(dem_num_values[152].data_item_id, 158)
        self.assertEqual(dem_num_values[152].value, SignalDecimal(114226.000000000))
        self.assertEqual(dem_num_values[153].data_item_id, 159)
        self.assertEqual(dem_num_values[153].value, SignalDecimal(1.580000000))
        self.assertEqual(dem_num_values[154].data_item_id, 160)
        self.assertEqual(dem_num_values[154].value, SignalDecimal(124848.000000000))
        self.assertEqual(dem_num_values[155].data_item_id, 161)
        self.assertEqual(dem_num_values[155].value, SignalDecimal(1.699000000))
        self.assertEqual(dem_num_values[156].data_item_id, 162)
        self.assertEqual(dem_num_values[156].value, SignalDecimal(3310412.000000000))
        self.assertEqual(dem_num_values[157].data_item_id, 163)
        self.assertEqual(dem_num_values[157].value, SignalDecimal(46.033000000))
        self.assertEqual(dem_num_values[158].data_item_id, 164)
        self.assertEqual(dem_num_values[158].value, SignalDecimal(3329236.000000000))
        self.assertEqual(dem_num_values[159].data_item_id, 165)
        self.assertEqual(dem_num_values[159].value, SignalDecimal(46.038000000))
        self.assertEqual(dem_num_values[160].data_item_id, 166)
        self.assertEqual(dem_num_values[160].value, SignalDecimal(3370641.000000000))
        self.assertEqual(dem_num_values[161].data_item_id, 167)
        self.assertEqual(dem_num_values[161].value, SignalDecimal(45.858000000))
        self.assertEqual(dem_num_values[162].data_item_id, 168)
        self.assertEqual(dem_num_values[162].value, SignalDecimal(1597352.000000000))
        self.assertEqual(dem_num_values[163].data_item_id, 169)
        self.assertEqual(dem_num_values[163].value, SignalDecimal(22.212000000))
        self.assertEqual(dem_num_values[164].data_item_id, 170)
        self.assertEqual(dem_num_values[164].value, SignalDecimal(1604530.000000000))
        self.assertEqual(dem_num_values[165].data_item_id, 171)
        self.assertEqual(dem_num_values[165].value, SignalDecimal(22.188000000))
        self.assertEqual(dem_num_values[166].data_item_id, 172)
        self.assertEqual(dem_num_values[166].value, SignalDecimal(1603367.000000000))
        self.assertEqual(dem_num_values[167].data_item_id, 173)
        self.assertEqual(dem_num_values[167].value, SignalDecimal(21.814000000))
        self.assertEqual(dem_num_values[168].data_item_id, 174)
        self.assertEqual(dem_num_values[168].value, SignalDecimal(49550.000000000))
        self.assertEqual(dem_num_values[169].data_item_id, 175)
        self.assertEqual(dem_num_values[169].value, SignalDecimal(0.689000000))
        self.assertEqual(dem_num_values[170].data_item_id, 176)
        self.assertEqual(dem_num_values[170].value, SignalDecimal(49778.000000000))
        self.assertEqual(dem_num_values[171].data_item_id, 177)
        self.assertEqual(dem_num_values[171].value, SignalDecimal(0.688000000))
        self.assertEqual(dem_num_values[172].data_item_id, 178)
        self.assertEqual(dem_num_values[172].value, SignalDecimal(55405.000000000))
        self.assertEqual(dem_num_values[173].data_item_id, 179)
        self.assertEqual(dem_num_values[173].value, SignalDecimal(0.754000000))
        self.assertEqual(dem_num_values[174].data_item_id, 180)
        self.assertEqual(dem_num_values[174].value, SignalDecimal(967976.000000000))
        self.assertEqual(dem_num_values[175].data_item_id, 181)
        self.assertEqual(dem_num_values[175].value, SignalDecimal(13.460000000))
        self.assertEqual(dem_num_values[176].data_item_id, 182)
        self.assertEqual(dem_num_values[176].value, SignalDecimal(971466.000000000))
        self.assertEqual(dem_num_values[177].data_item_id, 183)
        self.assertEqual(dem_num_values[177].value, SignalDecimal(13.434000000))
        self.assertEqual(dem_num_values[178].data_item_id, 184)
        self.assertEqual(dem_num_values[178].value, SignalDecimal(1043459.000000000))
        self.assertEqual(dem_num_values[179].data_item_id, 185)
        self.assertEqual(dem_num_values[179].value, SignalDecimal(14.196000000))
        self.assertEqual(dem_num_values[180].data_item_id, 186)
        self.assertEqual(dem_num_values[180].value, SignalDecimal(4432.000000000))
        self.assertEqual(dem_num_values[181].data_item_id, 187)
        self.assertEqual(dem_num_values[181].value, SignalDecimal(0.062000000))
        self.assertEqual(dem_num_values[182].data_item_id, 188)
        self.assertEqual(dem_num_values[182].value, SignalDecimal(4423.000000000))
        self.assertEqual(dem_num_values[183].data_item_id, 189)
        self.assertEqual(dem_num_values[183].value, SignalDecimal(0.061000000))
        self.assertEqual(dem_num_values[184].data_item_id, 190)
        self.assertEqual(dem_num_values[184].value, SignalDecimal(4410.000000000))
        self.assertEqual(dem_num_values[185].data_item_id, 191)
        self.assertEqual(dem_num_values[185].value, SignalDecimal(0.060000000))
        self.assertEqual(dem_num_values[186].data_item_id, 192)
        self.assertEqual(dem_num_values[186].value, SignalDecimal(969067.000000000))
        self.assertEqual(dem_num_values[187].data_item_id, 193)
        self.assertEqual(dem_num_values[187].value, SignalDecimal(13.475000000))
        self.assertEqual(dem_num_values[188].data_item_id, 194)
        self.assertEqual(dem_num_values[188].value, SignalDecimal(977575.000000000))
        self.assertEqual(dem_num_values[189].data_item_id, 195)
        self.assertEqual(dem_num_values[189].value, SignalDecimal(13.518000000))
        self.assertEqual(dem_num_values[190].data_item_id, 196)
        self.assertEqual(dem_num_values[190].value, SignalDecimal(986108.000000000))
        self.assertEqual(dem_num_values[191].data_item_id, 197)
        self.assertEqual(dem_num_values[191].value, SignalDecimal(13.416000000))
        self.assertEqual(dem_num_values[192].data_item_id, 198)
        self.assertEqual(dem_num_values[192].value, SignalDecimal(292637.000000000))
        self.assertEqual(dem_num_values[193].data_item_id, 199)
        self.assertEqual(dem_num_values[193].value, SignalDecimal(4.069000000))
        self.assertEqual(dem_num_values[194].data_item_id, 200)
        self.assertEqual(dem_num_values[194].value, SignalDecimal(294488.000000000))
        self.assertEqual(dem_num_values[195].data_item_id, 201)
        self.assertEqual(dem_num_values[195].value, SignalDecimal(4.072000000))
        self.assertEqual(dem_num_values[196].data_item_id, 202)
        self.assertEqual(dem_num_values[196].value, SignalDecimal(286852.000000000))
        self.assertEqual(dem_num_values[197].data_item_id, 203)
        self.assertEqual(dem_num_values[197].value, SignalDecimal(3.903000000))
        self.assertEqual(dem_num_values[198].data_item_id, 204)
        self.assertEqual(dem_num_values[198].value, SignalDecimal(2217523.000000000))
        self.assertEqual(dem_num_values[199].data_item_id, 205)
        self.assertEqual(dem_num_values[199].value, SignalDecimal(30.836000000))
        self.assertEqual(dem_num_values[200].data_item_id, 206)
        self.assertEqual(dem_num_values[200].value, SignalDecimal(2237727.000000000))
        self.assertEqual(dem_num_values[201].data_item_id, 207)
        self.assertEqual(dem_num_values[201].value, SignalDecimal(30.944000000))
        self.assertEqual(dem_num_values[202].data_item_id, 208)
        self.assertEqual(dem_num_values[202].value, SignalDecimal(2316304.000000000))
        self.assertEqual(dem_num_values[203].data_item_id, 209)
        self.assertEqual(dem_num_values[203].value, SignalDecimal(31.513000000))
        self.assertEqual(dem_num_values[204].data_item_id, 210)
        self.assertEqual(dem_num_values[204].value, SignalDecimal(0.200000000))
        self.assertEqual(dem_num_values[205].data_item_id, 211)
        self.assertEqual(dem_num_values[205].value, SignalDecimal(0.280000000))
        self.assertEqual(dem_num_values[206].data_item_id, 212)
        self.assertEqual(dem_num_values[206].value, SignalDecimal(0.070000000))
        self.assertEqual(dem_num_values[207].data_item_id, 213)
        self.assertEqual(dem_num_values[207].value, SignalDecimal(0.650000000))
        self.assertEqual(dem_num_values[208].data_item_id, 214)
        self.assertEqual(dem_num_values[208].value, SignalDecimal(3.540000000))



    def test_gp1__age_by_sex_report(self):
        """
        Run GP1 Nexus Age by Sex Report.  And verify demographics
        """
        # override config to one template
        self._config.gp1_templates = ["Nexus Age by Sex Report"]

        # run gp 1
        GP1_10_1_GeoProcessor(self._threshold).process(self._company_id, self._store_id)

        # select demographic_str_values and demographic_num_values
        dem_num_values = sorted(select_demographic_numvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
        dem_str_values = sorted(select_demographic_strvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)

        # verify that we have all str and num values
        self.assertEqual(len(dem_num_values), 48)
        self.assertEqual(len(dem_str_values), 5)

        # verify all str values
        self.assertEqual(dem_str_values[0].data_item_id, 1)
        self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
        self.assertEqual(dem_str_values[1].data_item_id, 2)
        self.assertEqual(dem_str_values[1].value, "10 miles")
        self.assertEqual(dem_str_values[2].data_item_id, 6)
        self.assertEqual(dem_str_values[2].value, "")
        self.assertEqual(dem_str_values[3].data_item_id, 8)
        self.assertEqual(dem_str_values[3].value, "Ring: 10 mile radius")
        self.assertEqual(dem_str_values[4].data_item_id, 11)
        self.assertEqual(dem_str_values[4].value, "")

        # verify all num values
        self.assertEqual(dem_num_values[0].data_item_id, 3)
        self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
        self.assertEqual(dem_num_values[1].data_item_id, 4)
        self.assertEqual(dem_num_values[1].value, self._store_id)
        self.assertEqual(dem_num_values[2].data_item_id, 5)
        self.assertEqual(dem_num_values[2].value, SignalDecimal(1.000000000))
        self.assertEqual(dem_num_values[3].data_item_id, 7)
        self.assertEqual(dem_num_values[3].value, self._store_id)
        self.assertEqual(dem_num_values[4].data_item_id, 9)
        self.assertEqual(dem_num_values[4].value, SignalDecimal(40.730073000))
        self.assertEqual(dem_num_values[5].data_item_id, 10)
        self.assertEqual(dem_num_values[5].value, SignalDecimal(-73.992770000))
        self.assertEqual(dem_num_values[6].data_item_id, 215)
        self.assertEqual(dem_num_values[6].value, SignalDecimal(235819.000000000))
        self.assertEqual(dem_num_values[7].data_item_id, 216)
        self.assertEqual(dem_num_values[7].value, SignalDecimal(207193.000000000))
        self.assertEqual(dem_num_values[8].data_item_id, 217)
        self.assertEqual(dem_num_values[8].value, SignalDecimal(201681.000000000))
        self.assertEqual(dem_num_values[9].data_item_id, 218)
        self.assertEqual(dem_num_values[9].value, SignalDecimal(230551.000000000))
        self.assertEqual(dem_num_values[10].data_item_id, 219)
        self.assertEqual(dem_num_values[10].value, SignalDecimal(282308.000000000))
        self.assertEqual(dem_num_values[11].data_item_id, 220)
        self.assertEqual(dem_num_values[11].value, SignalDecimal(333148.000000000))
        self.assertEqual(dem_num_values[12].data_item_id, 221)
        self.assertEqual(dem_num_values[12].value, SignalDecimal(308023.000000000))
        self.assertEqual(dem_num_values[13].data_item_id, 222)
        self.assertEqual(dem_num_values[13].value, SignalDecimal(267993.000000000))
        self.assertEqual(dem_num_values[14].data_item_id, 223)
        self.assertEqual(dem_num_values[14].value, SignalDecimal(247726.000000000))
        self.assertEqual(dem_num_values[15].data_item_id, 224)
        self.assertEqual(dem_num_values[15].value, SignalDecimal(238062.000000000))
        self.assertEqual(dem_num_values[16].data_item_id, 225)
        self.assertEqual(dem_num_values[16].value, SignalDecimal(220469.000000000))
        self.assertEqual(dem_num_values[17].data_item_id, 226)
        self.assertEqual(dem_num_values[17].value, SignalDecimal(187756.000000000))
        self.assertEqual(dem_num_values[18].data_item_id, 227)
        self.assertEqual(dem_num_values[18].value, SignalDecimal(157246.000000000))
        self.assertEqual(dem_num_values[19].data_item_id, 228)
        self.assertEqual(dem_num_values[19].value, SignalDecimal(109337.000000000))
        self.assertEqual(dem_num_values[20].data_item_id, 229)
        self.assertEqual(dem_num_values[20].value, SignalDecimal(83450.000000000))
        self.assertEqual(dem_num_values[21].data_item_id, 230)
        self.assertEqual(dem_num_values[21].value, SignalDecimal(60919.000000000))
        self.assertEqual(dem_num_values[22].data_item_id, 231)
        self.assertEqual(dem_num_values[22].value, SignalDecimal(43581.000000000))
        self.assertEqual(dem_num_values[23].data_item_id, 232)
        self.assertEqual(dem_num_values[23].value, SignalDecimal(34762.000000000))
        self.assertEqual(dem_num_values[24].data_item_id, 233)
        self.assertEqual(dem_num_values[24].value, SignalDecimal(2672772.000000000))
        self.assertEqual(dem_num_values[25].data_item_id, 234)
        self.assertEqual(dem_num_values[25].value, SignalDecimal(2522373.000000000))
        self.assertEqual(dem_num_values[26].data_item_id, 235)
        self.assertEqual(dem_num_values[26].value, SignalDecimal(33.800000000))
        self.assertEqual(dem_num_values[27].data_item_id, 236)
        self.assertEqual(dem_num_values[27].value, SignalDecimal(225575.000000000))
        self.assertEqual(dem_num_values[28].data_item_id, 237)
        self.assertEqual(dem_num_values[28].value, SignalDecimal(198777.000000000))
        self.assertEqual(dem_num_values[29].data_item_id, 238)
        self.assertEqual(dem_num_values[29].value, SignalDecimal(194042.000000000))
        self.assertEqual(dem_num_values[30].data_item_id, 239)
        self.assertEqual(dem_num_values[30].value, SignalDecimal(222699.000000000))
        self.assertEqual(dem_num_values[31].data_item_id, 240)
        self.assertEqual(dem_num_values[31].value, SignalDecimal(293987.000000000))
        self.assertEqual(dem_num_values[32].data_item_id, 241)
        self.assertEqual(dem_num_values[32].value, SignalDecimal(358988.000000000))
        self.assertEqual(dem_num_values[33].data_item_id, 242)
        self.assertEqual(dem_num_values[33].value, SignalDecimal(317300.000000000))
        self.assertEqual(dem_num_values[34].data_item_id, 243)
        self.assertEqual(dem_num_values[34].value, SignalDecimal(271631.000000000))
        self.assertEqual(dem_num_values[35].data_item_id, 244)
        self.assertEqual(dem_num_values[35].value, SignalDecimal(254188.000000000))
        self.assertEqual(dem_num_values[36].data_item_id, 245)
        self.assertEqual(dem_num_values[36].value, SignalDecimal(251309.000000000))
        self.assertEqual(dem_num_values[37].data_item_id, 246)
        self.assertEqual(dem_num_values[37].value, SignalDecimal(243505.000000000))
        self.assertEqual(dem_num_values[38].data_item_id, 247)
        self.assertEqual(dem_num_values[38].value, SignalDecimal(217897.000000000))
        self.assertEqual(dem_num_values[39].data_item_id, 248)
        self.assertEqual(dem_num_values[39].value, SignalDecimal(193540.000000000))
        self.assertEqual(dem_num_values[40].data_item_id, 249)
        self.assertEqual(dem_num_values[40].value, SignalDecimal(142107.000000000))
        self.assertEqual(dem_num_values[41].data_item_id, 250)
        self.assertEqual(dem_num_values[41].value, SignalDecimal(113908.000000000))
        self.assertEqual(dem_num_values[42].data_item_id, 251)
        self.assertEqual(dem_num_values[42].value, SignalDecimal(88928.000000000))
        self.assertEqual(dem_num_values[43].data_item_id, 252)
        self.assertEqual(dem_num_values[43].value, SignalDecimal(74218.000000000))
        self.assertEqual(dem_num_values[44].data_item_id, 253)
        self.assertEqual(dem_num_values[44].value, SignalDecimal(78803.000000000))
        self.assertEqual(dem_num_values[45].data_item_id, 254)
        self.assertEqual(dem_num_values[45].value, SignalDecimal(2996039.000000000))
        self.assertEqual(dem_num_values[46].data_item_id, 255)
        self.assertEqual(dem_num_values[46].value, SignalDecimal(2848595.000000000))
        self.assertEqual(dem_num_values[47].data_item_id, 256)
        self.assertEqual(dem_num_values[47].value, SignalDecimal(36.100000000))



    def test_gp1__automotive_aftermarket_expenditures(self):
        """
        Run GP1 Automotive Aftermarket Expenditures.  And verify demographics
        """
        # override config to one template
        self._config.gp1_templates = ["Automotive Aftermarket Expenditures"]

        # run gp 1
        GP1_10_1_GeoProcessor(self._threshold).process(self._company_id, self._store_id)

        # select demographic_str_values and demographic_num_values
        dem_num_values = sorted(select_demographic_numvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
        dem_str_values = sorted(select_demographic_strvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)

        # verify that we have all str and num values
        self.assertEqual(len(dem_num_values), 91)
        self.assertEqual(len(dem_str_values), 5)

        # verify all str values
        self.assertEqual(dem_str_values[0].data_item_id, 1)
        self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
        self.assertEqual(dem_str_values[1].data_item_id, 2)
        self.assertEqual(dem_str_values[1].value, "10 miles")
        self.assertEqual(dem_str_values[2].data_item_id, 6)
        self.assertEqual(dem_str_values[2].value, "")
        self.assertEqual(dem_str_values[3].data_item_id, 8)
        self.assertEqual(dem_str_values[3].value, "Ring: 10 mile radius")
        self.assertEqual(dem_str_values[4].data_item_id, 11)
        self.assertEqual(dem_str_values[4].value, "")

        # verify all num values
        self.assertEqual(dem_num_values[0].data_item_id, 3)
        self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
        self.assertEqual(dem_num_values[1].data_item_id, 4)
        self.assertEqual(dem_num_values[1].value, self._store_id)
        self.assertEqual(dem_num_values[2].data_item_id, 5)
        self.assertEqual(dem_num_values[2].value, SignalDecimal(1.000000000))
        self.assertEqual(dem_num_values[3].data_item_id, 7)
        self.assertEqual(dem_num_values[3].value, self._store_id)
        self.assertEqual(dem_num_values[4].data_item_id, 9)
        self.assertEqual(dem_num_values[4].value, SignalDecimal(40.730073000))
        self.assertEqual(dem_num_values[5].data_item_id, 10)
        self.assertEqual(dem_num_values[5].value, SignalDecimal(-73.992770000))
        self.assertEqual(dem_num_values[6].data_item_id, 13)
        self.assertEqual(dem_num_values[6].value, SignalDecimal(7231497.000000000))
        self.assertEqual(dem_num_values[7].data_item_id, 14)
        self.assertEqual(dem_num_values[7].value, SignalDecimal(7350242.000000000))
        self.assertEqual(dem_num_values[8].data_item_id, 16)
        self.assertEqual(dem_num_values[8].value, SignalDecimal(2798907.000000000))
        self.assertEqual(dem_num_values[9].data_item_id, 17)
        self.assertEqual(dem_num_values[9].value, SignalDecimal(2853568.000000000))
        self.assertEqual(dem_num_values[10].data_item_id, 19)
        self.assertEqual(dem_num_values[10].value, SignalDecimal(1612849.000000000))
        self.assertEqual(dem_num_values[11].data_item_id, 20)
        self.assertEqual(dem_num_values[11].value, SignalDecimal(1626283.000000000))
        self.assertEqual(dem_num_values[12].data_item_id, 31)
        self.assertEqual(dem_num_values[12].value, SignalDecimal(34.900000000))
        self.assertEqual(dem_num_values[13].data_item_id, 32)
        self.assertEqual(dem_num_values[13].value, SignalDecimal(35.200000000))
        self.assertEqual(dem_num_values[14].data_item_id, 84)
        self.assertEqual(dem_num_values[14].value, SignalDecimal(45018.000000000))
        self.assertEqual(dem_num_values[15].data_item_id, 85)
        self.assertEqual(dem_num_values[15].value, SignalDecimal(54397.000000000))
        self.assertEqual(dem_num_values[16].data_item_id, 857)
        self.assertEqual(dem_num_values[16].value, SignalDecimal(97.000000000))
        self.assertEqual(dem_num_values[17].data_item_id, 858)
        self.assertEqual(dem_num_values[17].value, SignalDecimal(4.480000000))
        self.assertEqual(dem_num_values[18].data_item_id, 859)
        self.assertEqual(dem_num_values[18].value, SignalDecimal(12543850.000000000))
        self.assertEqual(dem_num_values[19].data_item_id, 860)
        self.assertEqual(dem_num_values[19].value, SignalDecimal(94.000000000))
        self.assertEqual(dem_num_values[20].data_item_id, 861)
        self.assertEqual(dem_num_values[20].value, SignalDecimal(2543.680000000))
        self.assertEqual(dem_num_values[21].data_item_id, 862)
        self.assertEqual(dem_num_values[21].value, SignalDecimal(7119524040.000000000))
        self.assertEqual(dem_num_values[22].data_item_id, 863)
        self.assertEqual(dem_num_values[22].value, SignalDecimal(86.000000000))
        self.assertEqual(dem_num_values[23].data_item_id, 864)
        self.assertEqual(dem_num_values[23].value, SignalDecimal(9.850000000))
        self.assertEqual(dem_num_values[24].data_item_id, 865)
        self.assertEqual(dem_num_values[24].value, SignalDecimal(27556365.000000000))
        self.assertEqual(dem_num_values[25].data_item_id, 866)
        self.assertEqual(dem_num_values[25].value, SignalDecimal(97.000000000))
        self.assertEqual(dem_num_values[26].data_item_id, 867)
        self.assertEqual(dem_num_values[26].value, SignalDecimal(52.560000000))
        self.assertEqual(dem_num_values[27].data_item_id, 868)
        self.assertEqual(dem_num_values[27].value, SignalDecimal(147114409.000000000))
        self.assertEqual(dem_num_values[28].data_item_id, 869)
        self.assertEqual(dem_num_values[28].value, SignalDecimal(87.000000000))
        self.assertEqual(dem_num_values[29].data_item_id, 870)
        self.assertEqual(dem_num_values[29].value, SignalDecimal(121.640000000))
        self.assertEqual(dem_num_values[30].data_item_id, 871)
        self.assertEqual(dem_num_values[30].value, SignalDecimal(340454894.000000000))
        self.assertEqual(dem_num_values[31].data_item_id, 872)
        self.assertEqual(dem_num_values[31].value, SignalDecimal(105.000000000))
        self.assertEqual(dem_num_values[32].data_item_id, 873)
        self.assertEqual(dem_num_values[32].value, SignalDecimal(7.190000000))
        self.assertEqual(dem_num_values[33].data_item_id, 874)
        self.assertEqual(dem_num_values[33].value, SignalDecimal(20131305.000000000))
        self.assertEqual(dem_num_values[34].data_item_id, 875)
        self.assertEqual(dem_num_values[34].value, SignalDecimal(109.000000000))
        self.assertEqual(dem_num_values[35].data_item_id, 876)
        self.assertEqual(dem_num_values[35].value, SignalDecimal(8.580000000))
        self.assertEqual(dem_num_values[36].data_item_id, 877)
        self.assertEqual(dem_num_values[36].value, SignalDecimal(24020079.000000000))
        self.assertEqual(dem_num_values[37].data_item_id, 878)
        self.assertEqual(dem_num_values[37].value, SignalDecimal(88.000000000))
        self.assertEqual(dem_num_values[38].data_item_id, 879)
        self.assertEqual(dem_num_values[38].value, SignalDecimal(14.080000000))
        self.assertEqual(dem_num_values[39].data_item_id, 880)
        self.assertEqual(dem_num_values[39].value, SignalDecimal(39397389.000000000))
        self.assertEqual(dem_num_values[40].data_item_id, 881)
        self.assertEqual(dem_num_values[40].value, SignalDecimal(114.000000000))
        self.assertEqual(dem_num_values[41].data_item_id, 882)
        self.assertEqual(dem_num_values[41].value, SignalDecimal(24.200000000))
        self.assertEqual(dem_num_values[42].data_item_id, 883)
        self.assertEqual(dem_num_values[42].value, SignalDecimal(67738058.000000000))
        self.assertEqual(dem_num_values[43].data_item_id, 884)
        self.assertEqual(dem_num_values[43].value, SignalDecimal(108.000000000))
        self.assertEqual(dem_num_values[44].data_item_id, 885)
        self.assertEqual(dem_num_values[44].value, SignalDecimal(2.650000000))
        self.assertEqual(dem_num_values[45].data_item_id, 886)
        self.assertEqual(dem_num_values[45].value, SignalDecimal(7420464.000000000))
        self.assertEqual(dem_num_values[46].data_item_id, 887)
        self.assertEqual(dem_num_values[46].value, SignalDecimal(92.000000000))
        self.assertEqual(dem_num_values[47].data_item_id, 888)
        self.assertEqual(dem_num_values[47].value, SignalDecimal(15.720000000))
        self.assertEqual(dem_num_values[48].data_item_id, 889)
        self.assertEqual(dem_num_values[48].value, SignalDecimal(43990467.000000000))
        self.assertEqual(dem_num_values[49].data_item_id, 890)
        self.assertEqual(dem_num_values[49].value, SignalDecimal(114.000000000))
        self.assertEqual(dem_num_values[50].data_item_id, 891)
        self.assertEqual(dem_num_values[50].value, SignalDecimal(42.250000000))
        self.assertEqual(dem_num_values[51].data_item_id, 892)
        self.assertEqual(dem_num_values[51].value, SignalDecimal(118252000.000000000))
        self.assertEqual(dem_num_values[52].data_item_id, 893)
        self.assertEqual(dem_num_values[52].value, SignalDecimal(118.000000000))
        self.assertEqual(dem_num_values[53].data_item_id, 894)
        self.assertEqual(dem_num_values[53].value, SignalDecimal(90.410000000))
        self.assertEqual(dem_num_values[54].data_item_id, 895)
        self.assertEqual(dem_num_values[54].value, SignalDecimal(253050162.000000000))
        self.assertEqual(dem_num_values[55].data_item_id, 896)
        self.assertEqual(dem_num_values[55].value, SignalDecimal(93.000000000))
        self.assertEqual(dem_num_values[56].data_item_id, 897)
        self.assertEqual(dem_num_values[56].value, SignalDecimal(41.530000000))
        self.assertEqual(dem_num_values[57].data_item_id, 898)
        self.assertEqual(dem_num_values[57].value, SignalDecimal(116227017.000000000))
        self.assertEqual(dem_num_values[58].data_item_id, 899)
        self.assertEqual(dem_num_values[58].value, SignalDecimal(102.000000000))
        self.assertEqual(dem_num_values[59].data_item_id, 900)
        self.assertEqual(dem_num_values[59].value, SignalDecimal(28.650000000))
        self.assertEqual(dem_num_values[60].data_item_id, 901)
        self.assertEqual(dem_num_values[60].value, SignalDecimal(80187264.000000000))
        self.assertEqual(dem_num_values[61].data_item_id, 902)
        self.assertEqual(dem_num_values[61].value, SignalDecimal(124.000000000))
        self.assertEqual(dem_num_values[62].data_item_id, 903)
        self.assertEqual(dem_num_values[62].value, SignalDecimal(10.380000000))
        self.assertEqual(dem_num_values[63].data_item_id, 904)
        self.assertEqual(dem_num_values[63].value, SignalDecimal(29040299.000000000))
        self.assertEqual(dem_num_values[64].data_item_id, 905)
        self.assertEqual(dem_num_values[64].value, SignalDecimal(104.000000000))
        self.assertEqual(dem_num_values[65].data_item_id, 906)
        self.assertEqual(dem_num_values[65].value, SignalDecimal(34.780000000))
        self.assertEqual(dem_num_values[66].data_item_id, 907)
        self.assertEqual(dem_num_values[66].value, SignalDecimal(97341931.000000000))
        self.assertEqual(dem_num_values[67].data_item_id, 908)
        self.assertEqual(dem_num_values[67].value, SignalDecimal(118.000000000))
        self.assertEqual(dem_num_values[68].data_item_id, 909)
        self.assertEqual(dem_num_values[68].value, SignalDecimal(15.280000000))
        self.assertEqual(dem_num_values[69].data_item_id, 910)
        self.assertEqual(dem_num_values[69].value, SignalDecimal(42776410.000000000))
        self.assertEqual(dem_num_values[70].data_item_id, 911)
        self.assertEqual(dem_num_values[70].value, SignalDecimal(104.000000000))
        self.assertEqual(dem_num_values[71].data_item_id, 912)
        self.assertEqual(dem_num_values[71].value, SignalDecimal(18.620000000))
        self.assertEqual(dem_num_values[72].data_item_id, 913)
        self.assertEqual(dem_num_values[72].value, SignalDecimal(52120020.000000000))
        self.assertEqual(dem_num_values[73].data_item_id, 914)
        self.assertEqual(dem_num_values[73].value, SignalDecimal(90.000000000))
        self.assertEqual(dem_num_values[74].data_item_id, 915)
        self.assertEqual(dem_num_values[74].value, SignalDecimal(77.910000000))
        self.assertEqual(dem_num_values[75].data_item_id, 916)
        self.assertEqual(dem_num_values[75].value, SignalDecimal(218075548.000000000))
        self.assertEqual(dem_num_values[76].data_item_id, 917)
        self.assertEqual(dem_num_values[76].value, SignalDecimal(95.000000000))
        self.assertEqual(dem_num_values[77].data_item_id, 918)
        self.assertEqual(dem_num_values[77].value, SignalDecimal(84.510000000))
        self.assertEqual(dem_num_values[78].data_item_id, 919)
        self.assertEqual(dem_num_values[78].value, SignalDecimal(236542522.000000000))
        self.assertEqual(dem_num_values[79].data_item_id, 920)
        self.assertEqual(dem_num_values[79].value, SignalDecimal(109.000000000))
        self.assertEqual(dem_num_values[80].data_item_id, 921)
        self.assertEqual(dem_num_values[80].value, SignalDecimal(65.200000000))
        self.assertEqual(dem_num_values[81].data_item_id, 922)
        self.assertEqual(dem_num_values[81].value, SignalDecimal(182498107.000000000))
        self.assertEqual(dem_num_values[82].data_item_id, 923)
        self.assertEqual(dem_num_values[82].value, SignalDecimal(118.000000000))
        self.assertEqual(dem_num_values[83].data_item_id, 924)
        self.assertEqual(dem_num_values[83].value, SignalDecimal(7.610000000))
        self.assertEqual(dem_num_values[84].data_item_id, 925)
        self.assertEqual(dem_num_values[84].value, SignalDecimal(21304847.000000000))
        self.assertEqual(dem_num_values[85].data_item_id, 926)
        self.assertEqual(dem_num_values[85].value, SignalDecimal(111.000000000))
        self.assertEqual(dem_num_values[86].data_item_id, 927)
        self.assertEqual(dem_num_values[86].value, SignalDecimal(29.920000000))
        self.assertEqual(dem_num_values[87].data_item_id, 928)
        self.assertEqual(dem_num_values[87].value, SignalDecimal(83751393.000000000))
        self.assertEqual(dem_num_values[88].data_item_id, 929)
        self.assertEqual(dem_num_values[88].value, SignalDecimal(114.000000000))
        self.assertEqual(dem_num_values[89].data_item_id, 930)
        self.assertEqual(dem_num_values[89].value, SignalDecimal(72.070000000))
        self.assertEqual(dem_num_values[90].data_item_id, 931)
        self.assertEqual(dem_num_values[90].value, SignalDecimal(201708988.000000000))



    # def test_gp6__acs_housing(self):
    #     """
    #     Run GP6 ACS Housing Report.  And verify demographics
    #     """
    #     # override config to one template
    #     self._config.ba_online_templates = ["acs_housing"]
    #
    #     # run gp 6
    #     GP6_BA_Online_Reports(self._threshold).process(self._company_id, self._store_id)
    #
    #     # select demographic_str_values and demographic_num_values
    #     dem_num_values = sorted(select_demographic_numvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
    #     dem_str_values = sorted(select_demographic_strvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
    #
    #     # verify that we have all str and num values
    #     self.assertEqual(len(dem_num_values), 270)
    #     self.assertEqual(len(dem_str_values), 125)
    #
    #     # verify all str values
    #     self.assertEqual(dem_str_values[0].data_item_id, 1)
    #     self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[1].data_item_id, 2)
    #     self.assertEqual(dem_str_values[1].value, "10 miles")
    #     self.assertEqual(dem_str_values[2].data_item_id, 6)
    #     self.assertEqual(dem_str_values[2].value, "")
    #     self.assertEqual(dem_str_values[3].data_item_id, 7)
    #     self.assertEqual(dem_str_values[3].value, "")
    #     self.assertEqual(dem_str_values[4].data_item_id, 8)
    #     self.assertEqual(dem_str_values[4].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[5].data_item_id, 11)
    #     self.assertEqual(dem_str_values[5].value, "")
    #     self.assertEqual(dem_str_values[6].data_item_id, 260)
    #     self.assertEqual(dem_str_values[6].value, "High")
    #     self.assertEqual(dem_str_values[7].data_item_id, 263)
    #     self.assertEqual(dem_str_values[7].value, "High")
    #     self.assertEqual(dem_str_values[8].data_item_id, 266)
    #     self.assertEqual(dem_str_values[8].value, "High")
    #     self.assertEqual(dem_str_values[9].data_item_id, 269)
    #     self.assertEqual(dem_str_values[9].value, "High")
    #     self.assertEqual(dem_str_values[10].data_item_id, 272)
    #     self.assertEqual(dem_str_values[10].value, "High")
    #     self.assertEqual(dem_str_values[11].data_item_id, 275)
    #     self.assertEqual(dem_str_values[11].value, "High")
    #     self.assertEqual(dem_str_values[12].data_item_id, 278)
    #     self.assertEqual(dem_str_values[12].value, "High")
    #     self.assertEqual(dem_str_values[13].data_item_id, 281)
    #     self.assertEqual(dem_str_values[13].value, "High")
    #     self.assertEqual(dem_str_values[14].data_item_id, 284)
    #     self.assertEqual(dem_str_values[14].value, "Medium")
    #     self.assertEqual(dem_str_values[15].data_item_id, 287)
    #     self.assertEqual(dem_str_values[15].value, "High")
    #     self.assertEqual(dem_str_values[16].data_item_id, 290)
    #     self.assertEqual(dem_str_values[16].value, "High")
    #     self.assertEqual(dem_str_values[17].data_item_id, 293)
    #     self.assertEqual(dem_str_values[17].value, "High")
    #     self.assertEqual(dem_str_values[18].data_item_id, 296)
    #     self.assertEqual(dem_str_values[18].value, "High")
    #     self.assertEqual(dem_str_values[19].data_item_id, 299)
    #     self.assertEqual(dem_str_values[19].value, "High")
    #     self.assertEqual(dem_str_values[20].data_item_id, 302)
    #     self.assertEqual(dem_str_values[20].value, "High")
    #     self.assertEqual(dem_str_values[21].data_item_id, 305)
    #     self.assertEqual(dem_str_values[21].value, "High")
    #     self.assertEqual(dem_str_values[22].data_item_id, 308)
    #     self.assertEqual(dem_str_values[22].value, "High")
    #     self.assertEqual(dem_str_values[23].data_item_id, 311)
    #     self.assertEqual(dem_str_values[23].value, "High")
    #     self.assertEqual(dem_str_values[24].data_item_id, 314)
    #     self.assertEqual(dem_str_values[24].value, "High")
    #     self.assertEqual(dem_str_values[25].data_item_id, 317)
    #     self.assertEqual(dem_str_values[25].value, "High")
    #     self.assertEqual(dem_str_values[26].data_item_id, 320)
    #     self.assertEqual(dem_str_values[26].value, "High")
    #     self.assertEqual(dem_str_values[27].data_item_id, 323)
    #     self.assertEqual(dem_str_values[27].value, "High")
    #     self.assertEqual(dem_str_values[28].data_item_id, 326)
    #     self.assertEqual(dem_str_values[28].value, "High")
    #     self.assertEqual(dem_str_values[29].data_item_id, 329)
    #     self.assertEqual(dem_str_values[29].value, "High")
    #     self.assertEqual(dem_str_values[30].data_item_id, 332)
    #     self.assertEqual(dem_str_values[30].value, "High")
    #     self.assertEqual(dem_str_values[31].data_item_id, 335)
    #     self.assertEqual(dem_str_values[31].value, "High")
    #     self.assertEqual(dem_str_values[32].data_item_id, 338)
    #     self.assertEqual(dem_str_values[32].value, "High")
    #     self.assertEqual(dem_str_values[33].data_item_id, 341)
    #     self.assertEqual(dem_str_values[33].value, "High")
    #     self.assertEqual(dem_str_values[34].data_item_id, 350)
    #     self.assertEqual(dem_str_values[34].value, "High")
    #     self.assertEqual(dem_str_values[35].data_item_id, 353)
    #     self.assertEqual(dem_str_values[35].value, "High")
    #     self.assertEqual(dem_str_values[36].data_item_id, 356)
    #     self.assertEqual(dem_str_values[36].value, "High")
    #     self.assertEqual(dem_str_values[37].data_item_id, 359)
    #     self.assertEqual(dem_str_values[37].value, "High")
    #     self.assertEqual(dem_str_values[38].data_item_id, 362)
    #     self.assertEqual(dem_str_values[38].value, "High")
    #     self.assertEqual(dem_str_values[39].data_item_id, 365)
    #     self.assertEqual(dem_str_values[39].value, "High")
    #     self.assertEqual(dem_str_values[40].data_item_id, 368)
    #     self.assertEqual(dem_str_values[40].value, "High")
    #     self.assertEqual(dem_str_values[41].data_item_id, 377)
    #     self.assertEqual(dem_str_values[41].value, "High")
    #     self.assertEqual(dem_str_values[42].data_item_id, 380)
    #     self.assertEqual(dem_str_values[42].value, "High")
    #     self.assertEqual(dem_str_values[43].data_item_id, 383)
    #     self.assertEqual(dem_str_values[43].value, "High")
    #     self.assertEqual(dem_str_values[44].data_item_id, 386)
    #     self.assertEqual(dem_str_values[44].value, "High")
    #     self.assertEqual(dem_str_values[45].data_item_id, 389)
    #     self.assertEqual(dem_str_values[45].value, "High")
    #     self.assertEqual(dem_str_values[46].data_item_id, 392)
    #     self.assertEqual(dem_str_values[46].value, "High")
    #     self.assertEqual(dem_str_values[47].data_item_id, 395)
    #     self.assertEqual(dem_str_values[47].value, "High")
    #     self.assertEqual(dem_str_values[48].data_item_id, 398)
    #     self.assertEqual(dem_str_values[48].value, "High")
    #     self.assertEqual(dem_str_values[49].data_item_id, 401)
    #     self.assertEqual(dem_str_values[49].value, "High")
    #     self.assertEqual(dem_str_values[50].data_item_id, 404)
    #     self.assertEqual(dem_str_values[50].value, "High")
    #     self.assertEqual(dem_str_values[51].data_item_id, 407)
    #     self.assertEqual(dem_str_values[51].value, "High")
    #     self.assertEqual(dem_str_values[52].data_item_id, 410)
    #     self.assertEqual(dem_str_values[52].value, "High")
    #     self.assertEqual(dem_str_values[53].data_item_id, 413)
    #     self.assertEqual(dem_str_values[53].value, "High")
    #     self.assertEqual(dem_str_values[54].data_item_id, 416)
    #     self.assertEqual(dem_str_values[54].value, "High")
    #     self.assertEqual(dem_str_values[55].data_item_id, 419)
    #     self.assertEqual(dem_str_values[55].value, "High")
    #     self.assertEqual(dem_str_values[56].data_item_id, 422)
    #     self.assertEqual(dem_str_values[56].value, "High")
    #     self.assertEqual(dem_str_values[57].data_item_id, 425)
    #     self.assertEqual(dem_str_values[57].value, "High")
    #     self.assertEqual(dem_str_values[58].data_item_id, 428)
    #     self.assertEqual(dem_str_values[58].value, "High")
    #     self.assertEqual(dem_str_values[59].data_item_id, 431)
    #     self.assertEqual(dem_str_values[59].value, "High")
    #     self.assertEqual(dem_str_values[60].data_item_id, 434)
    #     self.assertEqual(dem_str_values[60].value, "High")
    #     self.assertEqual(dem_str_values[61].data_item_id, 437)
    #     self.assertEqual(dem_str_values[61].value, "High")
    #     self.assertEqual(dem_str_values[62].data_item_id, 440)
    #     self.assertEqual(dem_str_values[62].value, "High")
    #     self.assertEqual(dem_str_values[63].data_item_id, 443)
    #     self.assertEqual(dem_str_values[63].value, "High")
    #     self.assertEqual(dem_str_values[64].data_item_id, 446)
    #     self.assertEqual(dem_str_values[64].value, "High")
    #     self.assertEqual(dem_str_values[65].data_item_id, 455)
    #     self.assertEqual(dem_str_values[65].value, "High")
    #     self.assertEqual(dem_str_values[66].data_item_id, 458)
    #     self.assertEqual(dem_str_values[66].value, "High")
    #     self.assertEqual(dem_str_values[67].data_item_id, 461)
    #     self.assertEqual(dem_str_values[67].value, "High")
    #     self.assertEqual(dem_str_values[68].data_item_id, 464)
    #     self.assertEqual(dem_str_values[68].value, "High")
    #     self.assertEqual(dem_str_values[69].data_item_id, 467)
    #     self.assertEqual(dem_str_values[69].value, "High")
    #     self.assertEqual(dem_str_values[70].data_item_id, 470)
    #     self.assertEqual(dem_str_values[70].value, "High")
    #     self.assertEqual(dem_str_values[71].data_item_id, 473)
    #     self.assertEqual(dem_str_values[71].value, "High")
    #     self.assertEqual(dem_str_values[72].data_item_id, 476)
    #     self.assertEqual(dem_str_values[72].value, "High")
    #     self.assertEqual(dem_str_values[73].data_item_id, 479)
    #     self.assertEqual(dem_str_values[73].value, "High")
    #     self.assertEqual(dem_str_values[74].data_item_id, 482)
    #     self.assertEqual(dem_str_values[74].value, "High")
    #     self.assertEqual(dem_str_values[75].data_item_id, 485)
    #     self.assertEqual(dem_str_values[75].value, "High")
    #     self.assertEqual(dem_str_values[76].data_item_id, 488)
    #     self.assertEqual(dem_str_values[76].value, "High")
    #     self.assertEqual(dem_str_values[77].data_item_id, 491)
    #     self.assertEqual(dem_str_values[77].value, "High")
    #     self.assertEqual(dem_str_values[78].data_item_id, 494)
    #     self.assertEqual(dem_str_values[78].value, "High")
    #     self.assertEqual(dem_str_values[79].data_item_id, 497)
    #     self.assertEqual(dem_str_values[79].value, "High")
    #     self.assertEqual(dem_str_values[80].data_item_id, 500)
    #     self.assertEqual(dem_str_values[80].value, "High")
    #     self.assertEqual(dem_str_values[81].data_item_id, 503)
    #     self.assertEqual(dem_str_values[81].value, "High")
    #     self.assertEqual(dem_str_values[82].data_item_id, 506)
    #     self.assertEqual(dem_str_values[82].value, "High")
    #     self.assertEqual(dem_str_values[83].data_item_id, 509)
    #     self.assertEqual(dem_str_values[83].value, "High")
    #     self.assertEqual(dem_str_values[84].data_item_id, 512)
    #     self.assertEqual(dem_str_values[84].value, "High")
    #     self.assertEqual(dem_str_values[85].data_item_id, 515)
    #     self.assertEqual(dem_str_values[85].value, "High")
    #     self.assertEqual(dem_str_values[86].data_item_id, 518)
    #     self.assertEqual(dem_str_values[86].value, "High")
    #     self.assertEqual(dem_str_values[87].data_item_id, 521)
    #     self.assertEqual(dem_str_values[87].value, "High")
    #     self.assertEqual(dem_str_values[88].data_item_id, 524)
    #     self.assertEqual(dem_str_values[88].value, "High")
    #     self.assertEqual(dem_str_values[89].data_item_id, 530)
    #     self.assertEqual(dem_str_values[89].value, "High")
    #     self.assertEqual(dem_str_values[90].data_item_id, 533)
    #     self.assertEqual(dem_str_values[90].value, "High")
    #     self.assertEqual(dem_str_values[91].data_item_id, 536)
    #     self.assertEqual(dem_str_values[91].value, "High")
    #     self.assertEqual(dem_str_values[92].data_item_id, 539)
    #     self.assertEqual(dem_str_values[92].value, "High")
    #     self.assertEqual(dem_str_values[93].data_item_id, 542)
    #     self.assertEqual(dem_str_values[93].value, "High")
    #     self.assertEqual(dem_str_values[94].data_item_id, 545)
    #     self.assertEqual(dem_str_values[94].value, "High")
    #     self.assertEqual(dem_str_values[95].data_item_id, 548)
    #     self.assertEqual(dem_str_values[95].value, "High")
    #     self.assertEqual(dem_str_values[96].data_item_id, 551)
    #     self.assertEqual(dem_str_values[96].value, "High")
    #     self.assertEqual(dem_str_values[97].data_item_id, 554)
    #     self.assertEqual(dem_str_values[97].value, "High")
    #     self.assertEqual(dem_str_values[98].data_item_id, 557)
    #     self.assertEqual(dem_str_values[98].value, "High")
    #     self.assertEqual(dem_str_values[99].data_item_id, 560)
    #     self.assertEqual(dem_str_values[99].value, "High")
    #     self.assertEqual(dem_str_values[100].data_item_id, 563)
    #     self.assertEqual(dem_str_values[100].value, "High")
    #     self.assertEqual(dem_str_values[101].data_item_id, 566)
    #     self.assertEqual(dem_str_values[101].value, "High")
    #     self.assertEqual(dem_str_values[102].data_item_id, 572)
    #     self.assertEqual(dem_str_values[102].value, "High")
    #     self.assertEqual(dem_str_values[103].data_item_id, 575)
    #     self.assertEqual(dem_str_values[103].value, "High")
    #     self.assertEqual(dem_str_values[104].data_item_id, 578)
    #     self.assertEqual(dem_str_values[104].value, "High")
    #     self.assertEqual(dem_str_values[105].data_item_id, 581)
    #     self.assertEqual(dem_str_values[105].value, "High")
    #     self.assertEqual(dem_str_values[106].data_item_id, 584)
    #     self.assertEqual(dem_str_values[106].value, "High")
    #     self.assertEqual(dem_str_values[107].data_item_id, 587)
    #     self.assertEqual(dem_str_values[107].value, "High")
    #     self.assertEqual(dem_str_values[108].data_item_id, 590)
    #     self.assertEqual(dem_str_values[108].value, "Medium")
    #     self.assertEqual(dem_str_values[109].data_item_id, 593)
    #     self.assertEqual(dem_str_values[109].value, "Medium")
    #     self.assertEqual(dem_str_values[110].data_item_id, 596)
    #     self.assertEqual(dem_str_values[110].value, "High")
    #     self.assertEqual(dem_str_values[111].data_item_id, 599)
    #     self.assertEqual(dem_str_values[111].value, "High")
    #     self.assertEqual(dem_str_values[112].data_item_id, 602)
    #     self.assertEqual(dem_str_values[112].value, "High")
    #     self.assertEqual(dem_str_values[113].data_item_id, 605)
    #     self.assertEqual(dem_str_values[113].value, "High")
    #     self.assertEqual(dem_str_values[114].data_item_id, 608)
    #     self.assertEqual(dem_str_values[114].value, "High")
    #     self.assertEqual(dem_str_values[115].data_item_id, 611)
    #     self.assertEqual(dem_str_values[115].value, "High")
    #     self.assertEqual(dem_str_values[116].data_item_id, 614)
    #     self.assertEqual(dem_str_values[116].value, "High")
    #     self.assertEqual(dem_str_values[117].data_item_id, 617)
    #     self.assertEqual(dem_str_values[117].value, "High")
    #     self.assertEqual(dem_str_values[118].data_item_id, 620)
    #     self.assertEqual(dem_str_values[118].value, "High")
    #     self.assertEqual(dem_str_values[119].data_item_id, 623)
    #     self.assertEqual(dem_str_values[119].value, "High")
    #     self.assertEqual(dem_str_values[120].data_item_id, 626)
    #     self.assertEqual(dem_str_values[120].value, "High")
    #     self.assertEqual(dem_str_values[121].data_item_id, 629)
    #     self.assertEqual(dem_str_values[121].value, "High")
    #     self.assertEqual(dem_str_values[122].data_item_id, 632)
    #     self.assertEqual(dem_str_values[122].value, "High")
    #     self.assertEqual(dem_str_values[123].data_item_id, 635)
    #     self.assertEqual(dem_str_values[123].value, "High")
    #     self.assertEqual(dem_str_values[124].data_item_id, 638)
    #     self.assertEqual(dem_str_values[124].value, "High")
    #
    #     # verify all num values
    #     self.assertEqual(dem_num_values[0].data_item_id, 3)
    #     self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[1].data_item_id, 4)
    #     self.assertEqual(dem_num_values[1].value, self._store_id)
    #     self.assertEqual(dem_num_values[2].data_item_id, 5)
    #     self.assertEqual(dem_num_values[2].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[3].data_item_id, 9)
    #     self.assertEqual(dem_num_values[3].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[4].data_item_id, 10)
    #     self.assertEqual(dem_num_values[4].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[5].data_item_id, 258)
    #     self.assertEqual(dem_num_values[5].value, SignalDecimal(7215115.000000000))
    #     self.assertEqual(dem_num_values[6].data_item_id, 259)
    #     self.assertEqual(dem_num_values[6].value, SignalDecimal(28949.000000000))
    #     self.assertEqual(dem_num_values[7].data_item_id, 261)
    #     self.assertEqual(dem_num_values[7].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[8].data_item_id, 262)
    #     self.assertEqual(dem_num_values[8].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[9].data_item_id, 264)
    #     self.assertEqual(dem_num_values[9].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[10].data_item_id, 265)
    #     self.assertEqual(dem_num_values[10].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[11].data_item_id, 267)
    #     self.assertEqual(dem_num_values[11].value, SignalDecimal(819576.000000000))
    #     self.assertEqual(dem_num_values[12].data_item_id, 268)
    #     self.assertEqual(dem_num_values[12].value, SignalDecimal(5084.000000000))
    #     self.assertEqual(dem_num_values[13].data_item_id, 270)
    #     self.assertEqual(dem_num_values[13].value, SignalDecimal(3210.000000000))
    #     self.assertEqual(dem_num_values[14].data_item_id, 271)
    #     self.assertEqual(dem_num_values[14].value, SignalDecimal(392.000000000))
    #     self.assertEqual(dem_num_values[15].data_item_id, 273)
    #     self.assertEqual(dem_num_values[15].value, SignalDecimal(2105.000000000))
    #     self.assertEqual(dem_num_values[16].data_item_id, 274)
    #     self.assertEqual(dem_num_values[16].value, SignalDecimal(346.000000000))
    #     self.assertEqual(dem_num_values[17].data_item_id, 276)
    #     self.assertEqual(dem_num_values[17].value, SignalDecimal(2079.000000000))
    #     self.assertEqual(dem_num_values[18].data_item_id, 277)
    #     self.assertEqual(dem_num_values[18].value, SignalDecimal(303.000000000))
    #     self.assertEqual(dem_num_values[19].data_item_id, 279)
    #     self.assertEqual(dem_num_values[19].value, SignalDecimal(1841.000000000))
    #     self.assertEqual(dem_num_values[20].data_item_id, 280)
    #     self.assertEqual(dem_num_values[20].value, SignalDecimal(282.000000000))
    #     self.assertEqual(dem_num_values[21].data_item_id, 282)
    #     self.assertEqual(dem_num_values[21].value, SignalDecimal(1387.000000000))
    #     self.assertEqual(dem_num_values[22].data_item_id, 283)
    #     self.assertEqual(dem_num_values[22].value, SignalDecimal(290.000000000))
    #     self.assertEqual(dem_num_values[23].data_item_id, 285)
    #     self.assertEqual(dem_num_values[23].value, SignalDecimal(1692.000000000))
    #     self.assertEqual(dem_num_values[24].data_item_id, 286)
    #     self.assertEqual(dem_num_values[24].value, SignalDecimal(274.000000000))
    #     self.assertEqual(dem_num_values[25].data_item_id, 288)
    #     self.assertEqual(dem_num_values[25].value, SignalDecimal(1283.000000000))
    #     self.assertEqual(dem_num_values[26].data_item_id, 289)
    #     self.assertEqual(dem_num_values[26].value, SignalDecimal(210.000000000))
    #     self.assertEqual(dem_num_values[27].data_item_id, 291)
    #     self.assertEqual(dem_num_values[27].value, SignalDecimal(3033.000000000))
    #     self.assertEqual(dem_num_values[28].data_item_id, 292)
    #     self.assertEqual(dem_num_values[28].value, SignalDecimal(323.000000000))
    #     self.assertEqual(dem_num_values[29].data_item_id, 294)
    #     self.assertEqual(dem_num_values[29].value, SignalDecimal(4013.000000000))
    #     self.assertEqual(dem_num_values[30].data_item_id, 295)
    #     self.assertEqual(dem_num_values[30].value, SignalDecimal(399.000000000))
    #     self.assertEqual(dem_num_values[31].data_item_id, 297)
    #     self.assertEqual(dem_num_values[31].value, SignalDecimal(3309.000000000))
    #     self.assertEqual(dem_num_values[32].data_item_id, 298)
    #     self.assertEqual(dem_num_values[32].value, SignalDecimal(364.000000000))
    #     self.assertEqual(dem_num_values[33].data_item_id, 300)
    #     self.assertEqual(dem_num_values[33].value, SignalDecimal(3552.000000000))
    #     self.assertEqual(dem_num_values[34].data_item_id, 301)
    #     self.assertEqual(dem_num_values[34].value, SignalDecimal(392.000000000))
    #     self.assertEqual(dem_num_values[35].data_item_id, 303)
    #     self.assertEqual(dem_num_values[35].value, SignalDecimal(3617.000000000))
    #     self.assertEqual(dem_num_values[36].data_item_id, 304)
    #     self.assertEqual(dem_num_values[36].value, SignalDecimal(403.000000000))
    #     self.assertEqual(dem_num_values[37].data_item_id, 306)
    #     self.assertEqual(dem_num_values[37].value, SignalDecimal(3580.000000000))
    #     self.assertEqual(dem_num_values[38].data_item_id, 307)
    #     self.assertEqual(dem_num_values[38].value, SignalDecimal(393.000000000))
    #     self.assertEqual(dem_num_values[39].data_item_id, 309)
    #     self.assertEqual(dem_num_values[39].value, SignalDecimal(12067.000000000))
    #     self.assertEqual(dem_num_values[40].data_item_id, 310)
    #     self.assertEqual(dem_num_values[40].value, SignalDecimal(720.000000000))
    #     self.assertEqual(dem_num_values[41].data_item_id, 312)
    #     self.assertEqual(dem_num_values[41].value, SignalDecimal(9324.000000000))
    #     self.assertEqual(dem_num_values[42].data_item_id, 313)
    #     self.assertEqual(dem_num_values[42].value, SignalDecimal(638.000000000))
    #     self.assertEqual(dem_num_values[43].data_item_id, 315)
    #     self.assertEqual(dem_num_values[43].value, SignalDecimal(16666.000000000))
    #     self.assertEqual(dem_num_values[44].data_item_id, 316)
    #     self.assertEqual(dem_num_values[44].value, SignalDecimal(870.000000000))
    #     self.assertEqual(dem_num_values[45].data_item_id, 318)
    #     self.assertEqual(dem_num_values[45].value, SignalDecimal(15377.000000000))
    #     self.assertEqual(dem_num_values[46].data_item_id, 319)
    #     self.assertEqual(dem_num_values[46].value, SignalDecimal(806.000000000))
    #     self.assertEqual(dem_num_values[47].data_item_id, 321)
    #     self.assertEqual(dem_num_values[47].value, SignalDecimal(44504.000000000))
    #     self.assertEqual(dem_num_values[48].data_item_id, 322)
    #     self.assertEqual(dem_num_values[48].value, SignalDecimal(1367.000000000))
    #     self.assertEqual(dem_num_values[49].data_item_id, 324)
    #     self.assertEqual(dem_num_values[49].value, SignalDecimal(32789.000000000))
    #     self.assertEqual(dem_num_values[50].data_item_id, 325)
    #     self.assertEqual(dem_num_values[50].value, SignalDecimal(1227.000000000))
    #     self.assertEqual(dem_num_values[51].data_item_id, 327)
    #     self.assertEqual(dem_num_values[51].value, SignalDecimal(108131.000000000))
    #     self.assertEqual(dem_num_values[52].data_item_id, 328)
    #     self.assertEqual(dem_num_values[52].value, SignalDecimal(2116.000000000))
    #     self.assertEqual(dem_num_values[53].data_item_id, 330)
    #     self.assertEqual(dem_num_values[53].value, SignalDecimal(124258.000000000))
    #     self.assertEqual(dem_num_values[54].data_item_id, 331)
    #     self.assertEqual(dem_num_values[54].value, SignalDecimal(2288.000000000))
    #     self.assertEqual(dem_num_values[55].data_item_id, 333)
    #     self.assertEqual(dem_num_values[55].value, SignalDecimal(232818.000000000))
    #     self.assertEqual(dem_num_values[56].data_item_id, 334)
    #     self.assertEqual(dem_num_values[56].value, SignalDecimal(3048.000000000))
    #     self.assertEqual(dem_num_values[57].data_item_id, 336)
    #     self.assertEqual(dem_num_values[57].value, SignalDecimal(87240.000000000))
    #     self.assertEqual(dem_num_values[58].data_item_id, 337)
    #     self.assertEqual(dem_num_values[58].value, SignalDecimal(1970.000000000))
    #     self.assertEqual(dem_num_values[59].data_item_id, 339)
    #     self.assertEqual(dem_num_values[59].value, SignalDecimal(101699.000000000))
    #     self.assertEqual(dem_num_values[60].data_item_id, 340)
    #     self.assertEqual(dem_num_values[60].value, SignalDecimal(2100.000000000))
    #     self.assertEqual(dem_num_values[61].data_item_id, 342)
    #     self.assertEqual(dem_num_values[61].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[62].data_item_id, 343)
    #     self.assertEqual(dem_num_values[62].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[63].data_item_id, 344)
    #     self.assertEqual(dem_num_values[63].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[64].data_item_id, 345)
    #     self.assertEqual(dem_num_values[64].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[65].data_item_id, 346)
    #     self.assertEqual(dem_num_values[65].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[66].data_item_id, 347)
    #     self.assertEqual(dem_num_values[66].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[67].data_item_id, 348)
    #     self.assertEqual(dem_num_values[67].value, SignalDecimal(819576.000000000))
    #     self.assertEqual(dem_num_values[68].data_item_id, 349)
    #     self.assertEqual(dem_num_values[68].value, SignalDecimal(5084.000000000))
    #     self.assertEqual(dem_num_values[69].data_item_id, 351)
    #     self.assertEqual(dem_num_values[69].value, SignalDecimal(523425.000000000))
    #     self.assertEqual(dem_num_values[70].data_item_id, 352)
    #     self.assertEqual(dem_num_values[70].value, SignalDecimal(4452.000000000))
    #     self.assertEqual(dem_num_values[71].data_item_id, 354)
    #     self.assertEqual(dem_num_values[71].value, SignalDecimal(17867.000000000))
    #     self.assertEqual(dem_num_values[72].data_item_id, 355)
    #     self.assertEqual(dem_num_values[72].value, SignalDecimal(898.000000000))
    #     self.assertEqual(dem_num_values[73].data_item_id, 357)
    #     self.assertEqual(dem_num_values[73].value, SignalDecimal(76463.000000000))
    #     self.assertEqual(dem_num_values[74].data_item_id, 358)
    #     self.assertEqual(dem_num_values[74].value, SignalDecimal(1794.000000000))
    #     self.assertEqual(dem_num_values[75].data_item_id, 360)
    #     self.assertEqual(dem_num_values[75].value, SignalDecimal(5298.000000000))
    #     self.assertEqual(dem_num_values[76].data_item_id, 361)
    #     self.assertEqual(dem_num_values[76].value, SignalDecimal(529.000000000))
    #     self.assertEqual(dem_num_values[77].data_item_id, 363)
    #     self.assertEqual(dem_num_values[77].value, SignalDecimal(423797.000000000))
    #     self.assertEqual(dem_num_values[78].data_item_id, 364)
    #     self.assertEqual(dem_num_values[78].value, SignalDecimal(4153.000000000))
    #     self.assertEqual(dem_num_values[79].data_item_id, 366)
    #     self.assertEqual(dem_num_values[79].value, SignalDecimal(296151.000000000))
    #     self.assertEqual(dem_num_values[80].data_item_id, 367)
    #     self.assertEqual(dem_num_values[80].value, SignalDecimal(3292.000000000))
    #     self.assertEqual(dem_num_values[81].data_item_id, 369)
    #     self.assertEqual(dem_num_values[81].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[82].data_item_id, 370)
    #     self.assertEqual(dem_num_values[82].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[83].data_item_id, 371)
    #     self.assertEqual(dem_num_values[83].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[84].data_item_id, 372)
    #     self.assertEqual(dem_num_values[84].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[85].data_item_id, 373)
    #     self.assertEqual(dem_num_values[85].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[86].data_item_id, 374)
    #     self.assertEqual(dem_num_values[86].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[87].data_item_id, 375)
    #     self.assertEqual(dem_num_values[87].value, SignalDecimal(1888778.000000000))
    #     self.assertEqual(dem_num_values[88].data_item_id, 376)
    #     self.assertEqual(dem_num_values[88].value, SignalDecimal(7542.000000000))
    #     self.assertEqual(dem_num_values[89].data_item_id, 378)
    #     self.assertEqual(dem_num_values[89].value, SignalDecimal(1842588.000000000))
    #     self.assertEqual(dem_num_values[90].data_item_id, 379)
    #     self.assertEqual(dem_num_values[90].value, SignalDecimal(7496.000000000))
    #     self.assertEqual(dem_num_values[91].data_item_id, 381)
    #     self.assertEqual(dem_num_values[91].value, SignalDecimal(10411.000000000))
    #     self.assertEqual(dem_num_values[92].data_item_id, 382)
    #     self.assertEqual(dem_num_values[92].value, SignalDecimal(735.000000000))
    #     self.assertEqual(dem_num_values[93].data_item_id, 384)
    #     self.assertEqual(dem_num_values[93].value, SignalDecimal(22598.000000000))
    #     self.assertEqual(dem_num_values[94].data_item_id, 385)
    #     self.assertEqual(dem_num_values[94].value, SignalDecimal(1068.000000000))
    #     self.assertEqual(dem_num_values[95].data_item_id, 387)
    #     self.assertEqual(dem_num_values[95].value, SignalDecimal(45874.000000000))
    #     self.assertEqual(dem_num_values[96].data_item_id, 388)
    #     self.assertEqual(dem_num_values[96].value, SignalDecimal(1490.000000000))
    #     self.assertEqual(dem_num_values[97].data_item_id, 390)
    #     self.assertEqual(dem_num_values[97].value, SignalDecimal(51690.000000000))
    #     self.assertEqual(dem_num_values[98].data_item_id, 391)
    #     self.assertEqual(dem_num_values[98].value, SignalDecimal(1574.000000000))
    #     self.assertEqual(dem_num_values[99].data_item_id, 393)
    #     self.assertEqual(dem_num_values[99].value, SignalDecimal(30513.000000000))
    #     self.assertEqual(dem_num_values[100].data_item_id, 394)
    #     self.assertEqual(dem_num_values[100].value, SignalDecimal(1258.000000000))
    #     self.assertEqual(dem_num_values[101].data_item_id, 396)
    #     self.assertEqual(dem_num_values[101].value, SignalDecimal(31939.000000000))
    #     self.assertEqual(dem_num_values[102].data_item_id, 397)
    #     self.assertEqual(dem_num_values[102].value, SignalDecimal(1291.000000000))
    #     self.assertEqual(dem_num_values[103].data_item_id, 399)
    #     self.assertEqual(dem_num_values[103].value, SignalDecimal(30394.000000000))
    #     self.assertEqual(dem_num_values[104].data_item_id, 400)
    #     self.assertEqual(dem_num_values[104].value, SignalDecimal(1264.000000000))
    #     self.assertEqual(dem_num_values[105].data_item_id, 402)
    #     self.assertEqual(dem_num_values[105].value, SignalDecimal(34634.000000000))
    #     self.assertEqual(dem_num_values[106].data_item_id, 403)
    #     self.assertEqual(dem_num_values[106].value, SignalDecimal(1361.000000000))
    #     self.assertEqual(dem_num_values[107].data_item_id, 405)
    #     self.assertEqual(dem_num_values[107].value, SignalDecimal(36406.000000000))
    #     self.assertEqual(dem_num_values[108].data_item_id, 406)
    #     self.assertEqual(dem_num_values[108].value, SignalDecimal(1369.000000000))
    #     self.assertEqual(dem_num_values[109].data_item_id, 408)
    #     self.assertEqual(dem_num_values[109].value, SignalDecimal(60747.000000000))
    #     self.assertEqual(dem_num_values[110].data_item_id, 409)
    #     self.assertEqual(dem_num_values[110].value, SignalDecimal(1797.000000000))
    #     self.assertEqual(dem_num_values[111].data_item_id, 411)
    #     self.assertEqual(dem_num_values[111].value, SignalDecimal(52916.000000000))
    #     self.assertEqual(dem_num_values[112].data_item_id, 412)
    #     self.assertEqual(dem_num_values[112].value, SignalDecimal(1653.000000000))
    #     self.assertEqual(dem_num_values[113].data_item_id, 414)
    #     self.assertEqual(dem_num_values[113].value, SignalDecimal(67495.000000000))
    #     self.assertEqual(dem_num_values[114].data_item_id, 415)
    #     self.assertEqual(dem_num_values[114].value, SignalDecimal(1892.000000000))
    #     self.assertEqual(dem_num_values[115].data_item_id, 417)
    #     self.assertEqual(dem_num_values[115].value, SignalDecimal(73950.000000000))
    #     self.assertEqual(dem_num_values[116].data_item_id, 418)
    #     self.assertEqual(dem_num_values[116].value, SignalDecimal(1967.000000000))
    #     self.assertEqual(dem_num_values[117].data_item_id, 420)
    #     self.assertEqual(dem_num_values[117].value, SignalDecimal(78634.000000000))
    #     self.assertEqual(dem_num_values[118].data_item_id, 421)
    #     self.assertEqual(dem_num_values[118].value, SignalDecimal(2072.000000000))
    #     self.assertEqual(dem_num_values[119].data_item_id, 423)
    #     self.assertEqual(dem_num_values[119].value, SignalDecimal(79013.000000000))
    #     self.assertEqual(dem_num_values[120].data_item_id, 424)
    #     self.assertEqual(dem_num_values[120].value, SignalDecimal(2051.000000000))
    #     self.assertEqual(dem_num_values[121].data_item_id, 426)
    #     self.assertEqual(dem_num_values[121].value, SignalDecimal(158488.000000000))
    #     self.assertEqual(dem_num_values[122].data_item_id, 427)
    #     self.assertEqual(dem_num_values[122].value, SignalDecimal(2858.000000000))
    #     self.assertEqual(dem_num_values[123].data_item_id, 429)
    #     self.assertEqual(dem_num_values[123].value, SignalDecimal(168698.000000000))
    #     self.assertEqual(dem_num_values[124].data_item_id, 430)
    #     self.assertEqual(dem_num_values[124].value, SignalDecimal(3046.000000000))
    #     self.assertEqual(dem_num_values[125].data_item_id, 432)
    #     self.assertEqual(dem_num_values[125].value, SignalDecimal(294507.000000000))
    #     self.assertEqual(dem_num_values[126].data_item_id, 433)
    #     self.assertEqual(dem_num_values[126].value, SignalDecimal(3891.000000000))
    #     self.assertEqual(dem_num_values[127].data_item_id, 435)
    #     self.assertEqual(dem_num_values[127].value, SignalDecimal(175517.000000000))
    #     self.assertEqual(dem_num_values[128].data_item_id, 436)
    #     self.assertEqual(dem_num_values[128].value, SignalDecimal(3061.000000000))
    #     self.assertEqual(dem_num_values[129].data_item_id, 438)
    #     self.assertEqual(dem_num_values[129].value, SignalDecimal(174713.000000000))
    #     self.assertEqual(dem_num_values[130].data_item_id, 439)
    #     self.assertEqual(dem_num_values[130].value, SignalDecimal(3070.000000000))
    #     self.assertEqual(dem_num_values[131].data_item_id, 441)
    #     self.assertEqual(dem_num_values[131].value, SignalDecimal(163452.000000000))
    #     self.assertEqual(dem_num_values[132].data_item_id, 442)
    #     self.assertEqual(dem_num_values[132].value, SignalDecimal(2791.000000000))
    #     self.assertEqual(dem_num_values[133].data_item_id, 444)
    #     self.assertEqual(dem_num_values[133].value, SignalDecimal(46190.000000000))
    #     self.assertEqual(dem_num_values[134].data_item_id, 445)
    #     self.assertEqual(dem_num_values[134].value, SignalDecimal(1616.000000000))
    #     self.assertEqual(dem_num_values[135].data_item_id, 447)
    #     self.assertEqual(dem_num_values[135].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[136].data_item_id, 448)
    #     self.assertEqual(dem_num_values[136].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[137].data_item_id, 449)
    #     self.assertEqual(dem_num_values[137].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[138].data_item_id, 450)
    #     self.assertEqual(dem_num_values[138].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[139].data_item_id, 451)
    #     self.assertEqual(dem_num_values[139].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[140].data_item_id, 452)
    #     self.assertEqual(dem_num_values[140].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[141].data_item_id, 453)
    #     self.assertEqual(dem_num_values[141].value, SignalDecimal(1888778.000000000))
    #     self.assertEqual(dem_num_values[142].data_item_id, 454)
    #     self.assertEqual(dem_num_values[142].value, SignalDecimal(7542.000000000))
    #     self.assertEqual(dem_num_values[143].data_item_id, 456)
    #     self.assertEqual(dem_num_values[143].value, SignalDecimal(1524708.000000000))
    #     self.assertEqual(dem_num_values[144].data_item_id, 457)
    #     self.assertEqual(dem_num_values[144].value, SignalDecimal(7150.000000000))
    #     self.assertEqual(dem_num_values[145].data_item_id, 459)
    #     self.assertEqual(dem_num_values[145].value, SignalDecimal(364070.000000000))
    #     self.assertEqual(dem_num_values[146].data_item_id, 460)
    #     self.assertEqual(dem_num_values[146].value, SignalDecimal(3540.000000000))
    #     self.assertEqual(dem_num_values[147].data_item_id, 462)
    #     self.assertEqual(dem_num_values[147].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[148].data_item_id, 463)
    #     self.assertEqual(dem_num_values[148].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[149].data_item_id, 465)
    #     self.assertEqual(dem_num_values[149].value, SignalDecimal(199926.000000000))
    #     self.assertEqual(dem_num_values[150].data_item_id, 466)
    #     self.assertEqual(dem_num_values[150].value, SignalDecimal(2656.000000000))
    #     self.assertEqual(dem_num_values[151].data_item_id, 468)
    #     self.assertEqual(dem_num_values[151].value, SignalDecimal(173517.000000000))
    #     self.assertEqual(dem_num_values[152].data_item_id, 469)
    #     self.assertEqual(dem_num_values[152].value, SignalDecimal(2520.000000000))
    #     self.assertEqual(dem_num_values[153].data_item_id, 471)
    #     self.assertEqual(dem_num_values[153].value, SignalDecimal(403942.000000000))
    #     self.assertEqual(dem_num_values[154].data_item_id, 472)
    #     self.assertEqual(dem_num_values[154].value, SignalDecimal(4114.000000000))
    #     self.assertEqual(dem_num_values[155].data_item_id, 474)
    #     self.assertEqual(dem_num_values[155].value, SignalDecimal(330212.000000000))
    #     self.assertEqual(dem_num_values[156].data_item_id, 475)
    #     self.assertEqual(dem_num_values[156].value, SignalDecimal(3883.000000000))
    #     self.assertEqual(dem_num_values[157].data_item_id, 477)
    #     self.assertEqual(dem_num_values[157].value, SignalDecimal(246715.000000000))
    #     self.assertEqual(dem_num_values[158].data_item_id, 478)
    #     self.assertEqual(dem_num_values[158].value, SignalDecimal(3314.000000000))
    #     self.assertEqual(dem_num_values[159].data_item_id, 480)
    #     self.assertEqual(dem_num_values[159].value, SignalDecimal(223424.000000000))
    #     self.assertEqual(dem_num_values[160].data_item_id, 481)
    #     self.assertEqual(dem_num_values[160].value, SignalDecimal(3246.000000000))
    #     self.assertEqual(dem_num_values[161].data_item_id, 483)
    #     self.assertEqual(dem_num_values[161].value, SignalDecimal(488297.000000000))
    #     self.assertEqual(dem_num_values[162].data_item_id, 484)
    #     self.assertEqual(dem_num_values[162].value, SignalDecimal(4468.000000000))
    #     self.assertEqual(dem_num_values[163].data_item_id, 486)
    #     self.assertEqual(dem_num_values[163].value, SignalDecimal(904935.000000000))
    #     self.assertEqual(dem_num_values[164].data_item_id, 487)
    #     self.assertEqual(dem_num_values[164].value, SignalDecimal(5102.000000000))
    #     self.assertEqual(dem_num_values[165].data_item_id, 489)
    #     self.assertEqual(dem_num_values[165].value, SignalDecimal(3546.000000000))
    #     self.assertEqual(dem_num_values[166].data_item_id, 490)
    #     self.assertEqual(dem_num_values[166].value, SignalDecimal(456.000000000))
    #     self.assertEqual(dem_num_values[167].data_item_id, 492)
    #     self.assertEqual(dem_num_values[167].value, SignalDecimal(1837.000000000))
    #     self.assertEqual(dem_num_values[168].data_item_id, 493)
    #     self.assertEqual(dem_num_values[168].value, SignalDecimal(354.000000000))
    #     self.assertEqual(dem_num_values[169].data_item_id, 495)
    #     self.assertEqual(dem_num_values[169].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[170].data_item_id, 496)
    #     self.assertEqual(dem_num_values[170].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[171].data_item_id, 498)
    #     self.assertEqual(dem_num_values[171].value, SignalDecimal(33182.000000000))
    #     self.assertEqual(dem_num_values[172].data_item_id, 499)
    #     self.assertEqual(dem_num_values[172].value, SignalDecimal(1212.000000000))
    #     self.assertEqual(dem_num_values[173].data_item_id, 501)
    #     self.assertEqual(dem_num_values[173].value, SignalDecimal(91977.000000000))
    #     self.assertEqual(dem_num_values[174].data_item_id, 502)
    #     self.assertEqual(dem_num_values[174].value, SignalDecimal(2024.000000000))
    #     self.assertEqual(dem_num_values[175].data_item_id, 504)
    #     self.assertEqual(dem_num_values[175].value, SignalDecimal(105411.000000000))
    #     self.assertEqual(dem_num_values[176].data_item_id, 505)
    #     self.assertEqual(dem_num_values[176].value, SignalDecimal(2251.000000000))
    #     self.assertEqual(dem_num_values[177].data_item_id, 507)
    #     self.assertEqual(dem_num_values[177].value, SignalDecimal(142461.000000000))
    #     self.assertEqual(dem_num_values[178].data_item_id, 508)
    #     self.assertEqual(dem_num_values[178].value, SignalDecimal(2526.000000000))
    #     self.assertEqual(dem_num_values[179].data_item_id, 510)
    #     self.assertEqual(dem_num_values[179].value, SignalDecimal(203664.000000000))
    #     self.assertEqual(dem_num_values[180].data_item_id, 511)
    #     self.assertEqual(dem_num_values[180].value, SignalDecimal(3024.000000000))
    #     self.assertEqual(dem_num_values[181].data_item_id, 513)
    #     self.assertEqual(dem_num_values[181].value, SignalDecimal(336280.000000000))
    #     self.assertEqual(dem_num_values[182].data_item_id, 514)
    #     self.assertEqual(dem_num_values[182].value, SignalDecimal(3775.000000000))
    #     self.assertEqual(dem_num_values[183].data_item_id, 516)
    #     self.assertEqual(dem_num_values[183].value, SignalDecimal(394290.000000000))
    #     self.assertEqual(dem_num_values[184].data_item_id, 517)
    #     self.assertEqual(dem_num_values[184].value, SignalDecimal(4170.000000000))
    #     self.assertEqual(dem_num_values[185].data_item_id, 519)
    #     self.assertEqual(dem_num_values[185].value, SignalDecimal(339567.000000000))
    #     self.assertEqual(dem_num_values[186].data_item_id, 520)
    #     self.assertEqual(dem_num_values[186].value, SignalDecimal(3978.000000000))
    #     self.assertEqual(dem_num_values[187].data_item_id, 522)
    #     self.assertEqual(dem_num_values[187].value, SignalDecimal(1329518.000000000))
    #     self.assertEqual(dem_num_values[188].data_item_id, 523)
    #     self.assertEqual(dem_num_values[188].value, SignalDecimal(6867.000000000))
    #     self.assertEqual(dem_num_values[189].data_item_id, 525)
    #     self.assertEqual(dem_num_values[189].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[190].data_item_id, 526)
    #     self.assertEqual(dem_num_values[190].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[191].data_item_id, 527)
    #     self.assertEqual(dem_num_values[191].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[192].data_item_id, 528)
    #     self.assertEqual(dem_num_values[192].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[193].data_item_id, 529)
    #     self.assertEqual(dem_num_values[193].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[194].data_item_id, 531)
    #     self.assertEqual(dem_num_values[194].value, SignalDecimal(117572.000000000))
    #     self.assertEqual(dem_num_values[195].data_item_id, 532)
    #     self.assertEqual(dem_num_values[195].value, SignalDecimal(2374.000000000))
    #     self.assertEqual(dem_num_values[196].data_item_id, 534)
    #     self.assertEqual(dem_num_values[196].value, SignalDecimal(192289.000000000))
    #     self.assertEqual(dem_num_values[197].data_item_id, 535)
    #     self.assertEqual(dem_num_values[197].value, SignalDecimal(2972.000000000))
    #     self.assertEqual(dem_num_values[198].data_item_id, 537)
    #     self.assertEqual(dem_num_values[198].value, SignalDecimal(216811.000000000))
    #     self.assertEqual(dem_num_values[199].data_item_id, 538)
    #     self.assertEqual(dem_num_values[199].value, SignalDecimal(3053.000000000))
    #     self.assertEqual(dem_num_values[200].data_item_id, 540)
    #     self.assertEqual(dem_num_values[200].value, SignalDecimal(121802.000000000))
    #     self.assertEqual(dem_num_values[201].data_item_id, 541)
    #     self.assertEqual(dem_num_values[201].value, SignalDecimal(2220.000000000))
    #     self.assertEqual(dem_num_values[202].data_item_id, 543)
    #     self.assertEqual(dem_num_values[202].value, SignalDecimal(85482.000000000))
    #     self.assertEqual(dem_num_values[203].data_item_id, 544)
    #     self.assertEqual(dem_num_values[203].value, SignalDecimal(1873.000000000))
    #     self.assertEqual(dem_num_values[204].data_item_id, 546)
    #     self.assertEqual(dem_num_values[204].value, SignalDecimal(85620.000000000))
    #     self.assertEqual(dem_num_values[205].data_item_id, 547)
    #     self.assertEqual(dem_num_values[205].value, SignalDecimal(1744.000000000))
    #     self.assertEqual(dem_num_values[206].data_item_id, 549)
    #     self.assertEqual(dem_num_values[206].value, SignalDecimal(573027.000000000))
    #     self.assertEqual(dem_num_values[207].data_item_id, 550)
    #     self.assertEqual(dem_num_values[207].value, SignalDecimal(5311.000000000))
    #     self.assertEqual(dem_num_values[208].data_item_id, 552)
    #     self.assertEqual(dem_num_values[208].value, SignalDecimal(528288.000000000))
    #     self.assertEqual(dem_num_values[209].data_item_id, 553)
    #     self.assertEqual(dem_num_values[209].value, SignalDecimal(5274.000000000))
    #     self.assertEqual(dem_num_values[210].data_item_id, 555)
    #     self.assertEqual(dem_num_values[210].value, SignalDecimal(408974.000000000))
    #     self.assertEqual(dem_num_values[211].data_item_id, 556)
    #     self.assertEqual(dem_num_values[211].value, SignalDecimal(4445.000000000))
    #     self.assertEqual(dem_num_values[212].data_item_id, 558)
    #     self.assertEqual(dem_num_values[212].value, SignalDecimal(162893.000000000))
    #     self.assertEqual(dem_num_values[213].data_item_id, 559)
    #     self.assertEqual(dem_num_values[213].value, SignalDecimal(2790.000000000))
    #     self.assertEqual(dem_num_values[214].data_item_id, 561)
    #     self.assertEqual(dem_num_values[214].value, SignalDecimal(137724.000000000))
    #     self.assertEqual(dem_num_values[215].data_item_id, 562)
    #     self.assertEqual(dem_num_values[215].value, SignalDecimal(2496.000000000))
    #     self.assertEqual(dem_num_values[216].data_item_id, 564)
    #     self.assertEqual(dem_num_values[216].value, SignalDecimal(77872.000000000))
    #     self.assertEqual(dem_num_values[217].data_item_id, 565)
    #     self.assertEqual(dem_num_values[217].value, SignalDecimal(1831.000000000))
    #     self.assertEqual(dem_num_values[218].data_item_id, 567)
    #     self.assertEqual(dem_num_values[218].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[219].data_item_id, 568)
    #     self.assertEqual(dem_num_values[219].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[220].data_item_id, 569)
    #     self.assertEqual(dem_num_values[220].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[221].data_item_id, 570)
    #     self.assertEqual(dem_num_values[221].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[222].data_item_id, 571)
    #     self.assertEqual(dem_num_values[222].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[223].data_item_id, 573)
    #     self.assertEqual(dem_num_values[223].value, SignalDecimal(1476015.000000000))
    #     self.assertEqual(dem_num_values[224].data_item_id, 574)
    #     self.assertEqual(dem_num_values[224].value, SignalDecimal(6989.000000000))
    #     self.assertEqual(dem_num_values[225].data_item_id, 576)
    #     self.assertEqual(dem_num_values[225].value, SignalDecimal(40503.000000000))
    #     self.assertEqual(dem_num_values[226].data_item_id, 577)
    #     self.assertEqual(dem_num_values[226].value, SignalDecimal(1253.000000000))
    #     self.assertEqual(dem_num_values[227].data_item_id, 579)
    #     self.assertEqual(dem_num_values[227].value, SignalDecimal(255970.000000000))
    #     self.assertEqual(dem_num_values[228].data_item_id, 580)
    #     self.assertEqual(dem_num_values[228].value, SignalDecimal(3330.000000000))
    #     self.assertEqual(dem_num_values[229].data_item_id, 582)
    #     self.assertEqual(dem_num_values[229].value, SignalDecimal(874239.000000000))
    #     self.assertEqual(dem_num_values[230].data_item_id, 583)
    #     self.assertEqual(dem_num_values[230].value, SignalDecimal(6124.000000000))
    #     self.assertEqual(dem_num_values[231].data_item_id, 585)
    #     self.assertEqual(dem_num_values[231].value, SignalDecimal(1914.000000000))
    #     self.assertEqual(dem_num_values[232].data_item_id, 586)
    #     self.assertEqual(dem_num_values[232].value, SignalDecimal(318.000000000))
    #     self.assertEqual(dem_num_values[233].data_item_id, 588)
    #     self.assertEqual(dem_num_values[233].value, SignalDecimal(1119.000000000))
    #     self.assertEqual(dem_num_values[234].data_item_id, 589)
    #     self.assertEqual(dem_num_values[234].value, SignalDecimal(253.000000000))
    #     self.assertEqual(dem_num_values[235].data_item_id, 591)
    #     self.assertEqual(dem_num_values[235].value, SignalDecimal(664.000000000))
    #     self.assertEqual(dem_num_values[236].data_item_id, 592)
    #     self.assertEqual(dem_num_values[236].value, SignalDecimal(158.000000000))
    #     self.assertEqual(dem_num_values[237].data_item_id, 594)
    #     self.assertEqual(dem_num_values[237].value, SignalDecimal(31127.000000000))
    #     self.assertEqual(dem_num_values[238].data_item_id, 595)
    #     self.assertEqual(dem_num_values[238].value, SignalDecimal(1169.000000000))
    #     self.assertEqual(dem_num_values[239].data_item_id, 597)
    #     self.assertEqual(dem_num_values[239].value, SignalDecimal(26804.000000000))
    #     self.assertEqual(dem_num_values[240].data_item_id, 598)
    #     self.assertEqual(dem_num_values[240].value, SignalDecimal(1132.000000000))
    #     self.assertEqual(dem_num_values[241].data_item_id, 600)
    #     self.assertEqual(dem_num_values[241].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[242].data_item_id, 601)
    #     self.assertEqual(dem_num_values[242].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[243].data_item_id, 603)
    #     self.assertEqual(dem_num_values[243].value, SignalDecimal(244806.000000000))
    #     self.assertEqual(dem_num_values[244].data_item_id, 604)
    #     self.assertEqual(dem_num_values[244].value, SignalDecimal(3159.000000000))
    #     self.assertEqual(dem_num_values[245].data_item_id, 606)
    #     self.assertEqual(dem_num_values[245].value, SignalDecimal(353838.000000000))
    #     self.assertEqual(dem_num_values[246].data_item_id, 607)
    #     self.assertEqual(dem_num_values[246].value, SignalDecimal(3769.000000000))
    #     self.assertEqual(dem_num_values[247].data_item_id, 609)
    #     self.assertEqual(dem_num_values[247].value, SignalDecimal(166262.000000000))
    #     self.assertEqual(dem_num_values[248].data_item_id, 610)
    #     self.assertEqual(dem_num_values[248].value, SignalDecimal(2590.000000000))
    #     self.assertEqual(dem_num_values[249].data_item_id, 612)
    #     self.assertEqual(dem_num_values[249].value, SignalDecimal(40622.000000000))
    #     self.assertEqual(dem_num_values[250].data_item_id, 613)
    #     self.assertEqual(dem_num_values[250].value, SignalDecimal(1286.000000000))
    #     self.assertEqual(dem_num_values[251].data_item_id, 615)
    #     self.assertEqual(dem_num_values[251].value, SignalDecimal(10673.000000000))
    #     self.assertEqual(dem_num_values[252].data_item_id, 616)
    #     self.assertEqual(dem_num_values[252].value, SignalDecimal(660.000000000))
    #     self.assertEqual(dem_num_values[253].data_item_id, 618)
    #     self.assertEqual(dem_num_values[253].value, SignalDecimal(3375.000000000))
    #     self.assertEqual(dem_num_values[254].data_item_id, 619)
    #     self.assertEqual(dem_num_values[254].value, SignalDecimal(389.000000000))
    #     self.assertEqual(dem_num_values[255].data_item_id, 621)
    #     self.assertEqual(dem_num_values[255].value, SignalDecimal(1269451.000000000))
    #     self.assertEqual(dem_num_values[256].data_item_id, 622)
    #     self.assertEqual(dem_num_values[256].value, SignalDecimal(6767.000000000))
    #     self.assertEqual(dem_num_values[257].data_item_id, 624)
    #     self.assertEqual(dem_num_values[257].value, SignalDecimal(506407.000000000))
    #     self.assertEqual(dem_num_values[258].data_item_id, 625)
    #     self.assertEqual(dem_num_values[258].value, SignalDecimal(5019.000000000))
    #     self.assertEqual(dem_num_values[259].data_item_id, 627)
    #     self.assertEqual(dem_num_values[259].value, SignalDecimal(97031.000000000))
    #     self.assertEqual(dem_num_values[260].data_item_id, 628)
    #     self.assertEqual(dem_num_values[260].value, SignalDecimal(2325.000000000))
    #     self.assertEqual(dem_num_values[261].data_item_id, 630)
    #     self.assertEqual(dem_num_values[261].value, SignalDecimal(11450.000000000))
    #     self.assertEqual(dem_num_values[262].data_item_id, 631)
    #     self.assertEqual(dem_num_values[262].value, SignalDecimal(825.000000000))
    #     self.assertEqual(dem_num_values[263].data_item_id, 633)
    #     self.assertEqual(dem_num_values[263].value, SignalDecimal(2152.000000000))
    #     self.assertEqual(dem_num_values[264].data_item_id, 634)
    #     self.assertEqual(dem_num_values[264].value, SignalDecimal(329.000000000))
    #     self.assertEqual(dem_num_values[265].data_item_id, 636)
    #     self.assertEqual(dem_num_values[265].value, SignalDecimal(2287.000000000))
    #     self.assertEqual(dem_num_values[266].data_item_id, 637)
    #     self.assertEqual(dem_num_values[266].value, SignalDecimal(302.000000000))
    #     self.assertEqual(dem_num_values[267].data_item_id, 639)
    #     self.assertEqual(dem_num_values[267].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[268].data_item_id, 640)
    #     self.assertEqual(dem_num_values[268].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[269].data_item_id, 641)
    #     self.assertEqual(dem_num_values[269].value, SignalDecimal(-1.000000000))
    #
    #
    #
    # def test_gp6__traffic(self):
    #     """
    #     Run GP6 Traffic Report.  And verify demographics
    #     """
    #     # override config to one template
    #     self._config.ba_online_templates = ["traffic"]
    #
    #     # run gp 6
    #     GP6_BA_Online_Reports(self._threshold).process(self._company_id, self._store_id)
    #
    #     # select demographic_str_values and demographic_num_values
    #     dem_num_values = sorted(select_demographic_numvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
    #     dem_str_values = sorted(select_demographic_strvalues(self._trade_area.trade_area_id), key = lambda d: d.data_item_id)
    #
    #     # verify that we have all str and num values
    #     self.assertEqual(len(dem_num_values), 160)
    #     self.assertEqual(len(dem_str_values), 66)
    #
    #     # verify all str values
    #     self.assertEqual(dem_str_values[0].data_item_id, 1)
    #     self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[0].template_name, "traffic")
    #     self.assertEqual(dem_str_values[1].data_item_id, 2)
    #     self.assertEqual(dem_str_values[1].value, "10 miles")
    #     self.assertEqual(dem_str_values[1].template_name, "traffic")
    #     self.assertEqual(dem_str_values[2].data_item_id, 6)
    #     self.assertEqual(dem_str_values[2].value, "")
    #     self.assertEqual(dem_str_values[2].template_name, "traffic")
    #     self.assertEqual(dem_str_values[3].data_item_id, 7)
    #     self.assertEqual(dem_str_values[3].value, "")
    #     self.assertEqual(dem_str_values[3].template_name, "traffic")
    #     self.assertEqual(dem_str_values[4].data_item_id, 8)
    #     self.assertEqual(dem_str_values[4].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[4].template_name, "traffic")
    #     self.assertEqual(dem_str_values[5].data_item_id, 11)
    #     self.assertEqual(dem_str_values[5].value, "")
    #     self.assertEqual(dem_str_values[5].template_name, "traffic")
    #     self.assertEqual(dem_str_values[6].data_item_id, 649)
    #     self.assertEqual(dem_str_values[6].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[6].template_name, "traffic")
    #     self.assertEqual(dem_str_values[7].data_item_id, 650)
    #     self.assertEqual(dem_str_values[7].value, "Lafayette St (0.04 miles E)")
    #     self.assertEqual(dem_str_values[7].template_name, "traffic")
    #     self.assertEqual(dem_str_values[8].data_item_id, 656)
    #     self.assertEqual(dem_str_values[8].value, "E 8 St")
    #     self.assertEqual(dem_str_values[8].template_name, "traffic")
    #     self.assertEqual(dem_str_values[9].data_item_id, 657)
    #     self.assertEqual(dem_str_values[9].value, "Broadway (0.04 miles NW)")
    #     self.assertEqual(dem_str_values[9].template_name, "traffic")
    #     self.assertEqual(dem_str_values[10].data_item_id, 663)
    #     self.assertEqual(dem_str_values[10].value, "Broadway")
    #     self.assertEqual(dem_str_values[10].template_name, "traffic")
    #     self.assertEqual(dem_str_values[11].data_item_id, 664)
    #     self.assertEqual(dem_str_values[11].value, "Waverly Pl (0.02 miles NE)")
    #     self.assertEqual(dem_str_values[11].template_name, "traffic")
    #     self.assertEqual(dem_str_values[12].data_item_id, 670)
    #     self.assertEqual(dem_str_values[12].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[12].template_name, "traffic")
    #     self.assertEqual(dem_str_values[13].data_item_id, 671)
    #     self.assertEqual(dem_str_values[13].value, "Astor Pl (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[13].template_name, "traffic")
    #     self.assertEqual(dem_str_values[14].data_item_id, 677)
    #     self.assertEqual(dem_str_values[14].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[14].template_name, "traffic")
    #     self.assertEqual(dem_str_values[15].data_item_id, 678)
    #     self.assertEqual(dem_str_values[15].value, "Cooper Sq (0.02 miles E)")
    #     self.assertEqual(dem_str_values[15].template_name, "traffic")
    #     self.assertEqual(dem_str_values[16].data_item_id, 684)
    #     self.assertEqual(dem_str_values[16].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[16].template_name, "traffic")
    #     self.assertEqual(dem_str_values[17].data_item_id, 685)
    #     self.assertEqual(dem_str_values[17].value, "E 4 St (0.07 miles SW)")
    #     self.assertEqual(dem_str_values[17].template_name, "traffic")
    #     self.assertEqual(dem_str_values[18].data_item_id, 691)
    #     self.assertEqual(dem_str_values[18].value, "E 9 St")
    #     self.assertEqual(dem_str_values[18].template_name, "traffic")
    #     self.assertEqual(dem_str_values[19].data_item_id, 692)
    #     self.assertEqual(dem_str_values[19].value, "Broadway (0.04 miles NW)")
    #     self.assertEqual(dem_str_values[19].template_name, "traffic")
    #     self.assertEqual(dem_str_values[20].data_item_id, 698)
    #     self.assertEqual(dem_str_values[20].value, "E 8 St")
    #     self.assertEqual(dem_str_values[20].template_name, "traffic")
    #     self.assertEqual(dem_str_values[21].data_item_id, 699)
    #     self.assertEqual(dem_str_values[21].value, "Lafayette St (0.01 miles NW)")
    #     self.assertEqual(dem_str_values[21].template_name, "traffic")
    #     self.assertEqual(dem_str_values[22].data_item_id, 705)
    #     self.assertEqual(dem_str_values[22].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[22].template_name, "traffic")
    #     self.assertEqual(dem_str_values[23].data_item_id, 706)
    #     self.assertEqual(dem_str_values[23].value, "E 7 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[23].template_name, "traffic")
    #     self.assertEqual(dem_str_values[24].data_item_id, 712)
    #     self.assertEqual(dem_str_values[24].value, "Waverly Pl")
    #     self.assertEqual(dem_str_values[24].template_name, "traffic")
    #     self.assertEqual(dem_str_values[25].data_item_id, 713)
    #     self.assertEqual(dem_str_values[25].value, "Greene St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[25].template_name, "traffic")
    #     self.assertEqual(dem_str_values[26].data_item_id, 719)
    #     self.assertEqual(dem_str_values[26].value, "4 Ave")
    #     self.assertEqual(dem_str_values[26].template_name, "traffic")
    #     self.assertEqual(dem_str_values[27].data_item_id, 720)
    #     self.assertEqual(dem_str_values[27].value, "E 9 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[27].template_name, "traffic")
    #     self.assertEqual(dem_str_values[28].data_item_id, 726)
    #     self.assertEqual(dem_str_values[28].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[28].template_name, "traffic")
    #     self.assertEqual(dem_str_values[29].data_item_id, 727)
    #     self.assertEqual(dem_str_values[29].value, "E 6 St (0.03 miles SE)")
    #     self.assertEqual(dem_str_values[29].template_name, "traffic")
    #     self.assertEqual(dem_str_values[30].data_item_id, 733)
    #     self.assertEqual(dem_str_values[30].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[30].template_name, "traffic")
    #     self.assertEqual(dem_str_values[31].data_item_id, 734)
    #     self.assertEqual(dem_str_values[31].value, "3 Ave (0.02 miles E)")
    #     self.assertEqual(dem_str_values[31].template_name, "traffic")
    #     self.assertEqual(dem_str_values[32].data_item_id, 740)
    #     self.assertEqual(dem_str_values[32].value, "University Pl")
    #     self.assertEqual(dem_str_values[32].template_name, "traffic")
    #     self.assertEqual(dem_str_values[33].data_item_id, 741)
    #     self.assertEqual(dem_str_values[33].value, "E 8 St (0.01 miles NE)")
    #     self.assertEqual(dem_str_values[33].template_name, "traffic")
    #     self.assertEqual(dem_str_values[34].data_item_id, 747)
    #     self.assertEqual(dem_str_values[34].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[34].template_name, "traffic")
    #     self.assertEqual(dem_str_values[35].data_item_id, 748)
    #     self.assertEqual(dem_str_values[35].value, "E 7 St (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[35].template_name, "traffic")
    #     self.assertEqual(dem_str_values[36].data_item_id, 754)
    #     self.assertEqual(dem_str_values[36].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[36].template_name, "traffic")
    #     self.assertEqual(dem_str_values[37].data_item_id, 755)
    #     self.assertEqual(dem_str_values[37].value, "E 6 St (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[37].template_name, "traffic")
    #     self.assertEqual(dem_str_values[38].data_item_id, 761)
    #     self.assertEqual(dem_str_values[38].value, "W 4 St")
    #     self.assertEqual(dem_str_values[38].template_name, "traffic")
    #     self.assertEqual(dem_str_values[39].data_item_id, 762)
    #     self.assertEqual(dem_str_values[39].value, "Mercer St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[39].template_name, "traffic")
    #     self.assertEqual(dem_str_values[40].data_item_id, 768)
    #     self.assertEqual(dem_str_values[40].value, "St Marks Pl")
    #     self.assertEqual(dem_str_values[40].template_name, "traffic")
    #     self.assertEqual(dem_str_values[41].data_item_id, 769)
    #     self.assertEqual(dem_str_values[41].value, "2 Ave (0.13 miles SE)")
    #     self.assertEqual(dem_str_values[41].template_name, "traffic")
    #     self.assertEqual(dem_str_values[42].data_item_id, 775)
    #     self.assertEqual(dem_str_values[42].value, "Washington Pl")
    #     self.assertEqual(dem_str_values[42].template_name, "traffic")
    #     self.assertEqual(dem_str_values[43].data_item_id, 776)
    #     self.assertEqual(dem_str_values[43].value, "Washington Sq E (0.01 miles NW)")
    #     self.assertEqual(dem_str_values[43].template_name, "traffic")
    #     self.assertEqual(dem_str_values[44].data_item_id, 782)
    #     self.assertEqual(dem_str_values[44].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[44].template_name, "traffic")
    #     self.assertEqual(dem_str_values[45].data_item_id, 783)
    #     self.assertEqual(dem_str_values[45].value, "E 6 St (0.02 miles NE)")
    #     self.assertEqual(dem_str_values[45].template_name, "traffic")
    #     self.assertEqual(dem_str_values[46].data_item_id, 789)
    #     self.assertEqual(dem_str_values[46].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[46].template_name, "traffic")
    #     self.assertEqual(dem_str_values[47].data_item_id, 790)
    #     self.assertEqual(dem_str_values[47].value, "Stable Ct (0.03 miles S)")
    #     self.assertEqual(dem_str_values[47].template_name, "traffic")
    #     self.assertEqual(dem_str_values[48].data_item_id, 796)
    #     self.assertEqual(dem_str_values[48].value, "Stuyvesant St")
    #     self.assertEqual(dem_str_values[48].template_name, "traffic")
    #     self.assertEqual(dem_str_values[49].data_item_id, 797)
    #     self.assertEqual(dem_str_values[49].value, "3 Ave (0.01 miles W)")
    #     self.assertEqual(dem_str_values[49].template_name, "traffic")
    #     self.assertEqual(dem_str_values[50].data_item_id, 803)
    #     self.assertEqual(dem_str_values[50].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[50].template_name, "traffic")
    #     self.assertEqual(dem_str_values[51].data_item_id, 804)
    #     self.assertEqual(dem_str_values[51].value, "Great Jones St (0.02 miles SW)")
    #     self.assertEqual(dem_str_values[51].template_name, "traffic")
    #     self.assertEqual(dem_str_values[52].data_item_id, 810)
    #     self.assertEqual(dem_str_values[52].value, "Great Jones St")
    #     self.assertEqual(dem_str_values[52].template_name, "traffic")
    #     self.assertEqual(dem_str_values[53].data_item_id, 811)
    #     self.assertEqual(dem_str_values[53].value, "Broadway (0.02 miles NW)")
    #     self.assertEqual(dem_str_values[53].template_name, "traffic")
    #     self.assertEqual(dem_str_values[54].data_item_id, 817)
    #     self.assertEqual(dem_str_values[54].value, "E 5 St")
    #     self.assertEqual(dem_str_values[54].template_name, "traffic")
    #     self.assertEqual(dem_str_values[55].data_item_id, 818)
    #     self.assertEqual(dem_str_values[55].value, "2 Ave (0.12 miles SE)")
    #     self.assertEqual(dem_str_values[55].template_name, "traffic")
    #     self.assertEqual(dem_str_values[56].data_item_id, 824)
    #     self.assertEqual(dem_str_values[56].value, "Great Jones St")
    #     self.assertEqual(dem_str_values[56].template_name, "traffic")
    #     self.assertEqual(dem_str_values[57].data_item_id, 825)
    #     self.assertEqual(dem_str_values[57].value, "Lafayette St (0.01 miles SE)")
    #     self.assertEqual(dem_str_values[57].template_name, "traffic")
    #     self.assertEqual(dem_str_values[58].data_item_id, 831)
    #     self.assertEqual(dem_str_values[58].value, "E 11 St")
    #     self.assertEqual(dem_str_values[58].template_name, "traffic")
    #     self.assertEqual(dem_str_values[59].data_item_id, 832)
    #     self.assertEqual(dem_str_values[59].value, "University Pl (0.06 miles NW)")
    #     self.assertEqual(dem_str_values[59].template_name, "traffic")
    #     self.assertEqual(dem_str_values[60].data_item_id, 838)
    #     self.assertEqual(dem_str_values[60].value, "4 Ave")
    #     self.assertEqual(dem_str_values[60].template_name, "traffic")
    #     self.assertEqual(dem_str_values[61].data_item_id, 839)
    #     self.assertEqual(dem_str_values[61].value, "E 11 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[61].template_name, "traffic")
    #     self.assertEqual(dem_str_values[62].data_item_id, 845)
    #     self.assertEqual(dem_str_values[62].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[62].template_name, "traffic")
    #     self.assertEqual(dem_str_values[63].data_item_id, 846)
    #     self.assertEqual(dem_str_values[63].value, "E 4 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[63].template_name, "traffic")
    #     self.assertEqual(dem_str_values[64].data_item_id, 852)
    #     self.assertEqual(dem_str_values[64].value, "W 3 St")
    #     self.assertEqual(dem_str_values[64].template_name, "traffic")
    #     self.assertEqual(dem_str_values[65].data_item_id, 853)
    #     self.assertEqual(dem_str_values[65].value, "Greene St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[65].template_name, "traffic")
    #
    #
    #     # verify all num values
    #     self.assertEqual(dem_num_values[0].data_item_id, 3)
    #     self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[0].template_name, "traffic")
    #     self.assertEqual(dem_num_values[1].data_item_id, 4)
    #     self.assertEqual(dem_num_values[1].value, self._store_id)
    #     self.assertEqual(dem_num_values[1].template_name, "traffic")
    #     self.assertEqual(dem_num_values[2].data_item_id, 5)
    #     self.assertEqual(dem_num_values[2].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[2].template_name, "traffic")
    #     self.assertEqual(dem_num_values[3].data_item_id, 9)
    #     self.assertEqual(dem_num_values[3].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[3].template_name, "traffic")
    #     self.assertEqual(dem_num_values[4].data_item_id, 10)
    #     self.assertEqual(dem_num_values[4].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[4].template_name, "traffic")
    #     self.assertEqual(dem_num_values[5].data_item_id, 13)
    #     self.assertEqual(dem_num_values[5].value, SignalDecimal(7328832.000000000))
    #     self.assertEqual(dem_num_values[5].template_name, "traffic")
    #     self.assertEqual(dem_num_values[6].data_item_id, 14)
    #     self.assertEqual(dem_num_values[6].value, SignalDecimal(7463631.000000000))
    #     self.assertEqual(dem_num_values[6].template_name, "traffic")
    #     self.assertEqual(dem_num_values[7].data_item_id, 642)
    #     self.assertEqual(dem_num_values[7].value, SignalDecimal(7014508.000000000))
    #     self.assertEqual(dem_num_values[7].template_name, "traffic")
    #     self.assertEqual(dem_num_values[8].data_item_id, 645)
    #     self.assertEqual(dem_num_values[8].value, SignalDecimal(3559476.000000000))
    #     self.assertEqual(dem_num_values[8].template_name, "traffic")
    #     self.assertEqual(dem_num_values[9].data_item_id, 646)
    #     self.assertEqual(dem_num_values[9].value, SignalDecimal(669785698.000000000))
    #     self.assertEqual(dem_num_values[9].template_name, "traffic")
    #     self.assertEqual(dem_num_values[10].data_item_id, 647)
    #     self.assertEqual(dem_num_values[10].value, SignalDecimal(0.040000000))
    #     self.assertEqual(dem_num_values[10].template_name, "traffic")
    #     self.assertEqual(dem_num_values[11].data_item_id, 648)
    #     self.assertEqual(dem_num_values[11].value, SignalDecimal(40.729959000))
    #     self.assertEqual(dem_num_values[11].template_name, "traffic")
    #     self.assertEqual(dem_num_values[12].data_item_id, 651)
    #     self.assertEqual(dem_num_values[12].value, SignalDecimal(-73.992102000))
    #     self.assertEqual(dem_num_values[12].template_name, "traffic")
    #     self.assertEqual(dem_num_values[13].data_item_id, 652)
    #     self.assertEqual(dem_num_values[13].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[13].template_name, "traffic")
    #     self.assertEqual(dem_num_values[14].data_item_id, 653)
    #     self.assertEqual(dem_num_values[14].value, SignalDecimal(4860.000000000))
    #     self.assertEqual(dem_num_values[14].template_name, "traffic")
    #     self.assertEqual(dem_num_values[15].data_item_id, 654)
    #     self.assertEqual(dem_num_values[15].value, SignalDecimal(0.060000000))
    #     self.assertEqual(dem_num_values[15].template_name, "traffic")
    #     self.assertEqual(dem_num_values[16].data_item_id, 655)
    #     self.assertEqual(dem_num_values[16].value, SignalDecimal(40.730320000))
    #     self.assertEqual(dem_num_values[16].template_name, "traffic")
    #     self.assertEqual(dem_num_values[17].data_item_id, 658)
    #     self.assertEqual(dem_num_values[17].value, SignalDecimal(-73.991749000))
    #     self.assertEqual(dem_num_values[17].template_name, "traffic")
    #     self.assertEqual(dem_num_values[18].data_item_id, 659)
    #     self.assertEqual(dem_num_values[18].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[18].template_name, "traffic")
    #     self.assertEqual(dem_num_values[19].data_item_id, 660)
    #     self.assertEqual(dem_num_values[19].value, SignalDecimal(7105.000000000))
    #     self.assertEqual(dem_num_values[19].template_name, "traffic")
    #     self.assertEqual(dem_num_values[20].data_item_id, 661)
    #     self.assertEqual(dem_num_values[20].value, SignalDecimal(0.060000000))
    #     self.assertEqual(dem_num_values[20].template_name, "traffic")
    #     self.assertEqual(dem_num_values[21].data_item_id, 662)
    #     self.assertEqual(dem_num_values[21].value, SignalDecimal(40.729327000))
    #     self.assertEqual(dem_num_values[21].template_name, "traffic")
    #     self.assertEqual(dem_num_values[22].data_item_id, 665)
    #     self.assertEqual(dem_num_values[22].value, SignalDecimal(-73.993479000))
    #     self.assertEqual(dem_num_values[22].template_name, "traffic")
    #     self.assertEqual(dem_num_values[23].data_item_id, 666)
    #     self.assertEqual(dem_num_values[23].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[23].template_name, "traffic")
    #     self.assertEqual(dem_num_values[24].data_item_id, 667)
    #     self.assertEqual(dem_num_values[24].value, SignalDecimal(22338.000000000))
    #     self.assertEqual(dem_num_values[24].template_name, "traffic")
    #     self.assertEqual(dem_num_values[25].data_item_id, 668)
    #     self.assertEqual(dem_num_values[25].value, SignalDecimal(0.080000000))
    #     self.assertEqual(dem_num_values[25].template_name, "traffic")
    #     self.assertEqual(dem_num_values[26].data_item_id, 669)
    #     self.assertEqual(dem_num_values[26].value, SignalDecimal(40.729940000))
    #     self.assertEqual(dem_num_values[26].template_name, "traffic")
    #     self.assertEqual(dem_num_values[27].data_item_id, 672)
    #     self.assertEqual(dem_num_values[27].value, SignalDecimal(-73.991254000))
    #     self.assertEqual(dem_num_values[27].template_name, "traffic")
    #     self.assertEqual(dem_num_values[28].data_item_id, 673)
    #     self.assertEqual(dem_num_values[28].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[28].template_name, "traffic")
    #     self.assertEqual(dem_num_values[29].data_item_id, 674)
    #     self.assertEqual(dem_num_values[29].value, SignalDecimal(17797.000000000))
    #     self.assertEqual(dem_num_values[29].template_name, "traffic")
    #     self.assertEqual(dem_num_values[30].data_item_id, 675)
    #     self.assertEqual(dem_num_values[30].value, SignalDecimal(0.090000000))
    #     self.assertEqual(dem_num_values[30].template_name, "traffic")
    #     self.assertEqual(dem_num_values[31].data_item_id, 676)
    #     self.assertEqual(dem_num_values[31].value, SignalDecimal(40.729794000))
    #     self.assertEqual(dem_num_values[31].template_name, "traffic")
    #     self.assertEqual(dem_num_values[32].data_item_id, 679)
    #     self.assertEqual(dem_num_values[32].value, SignalDecimal(-73.991084000))
    #     self.assertEqual(dem_num_values[32].template_name, "traffic")
    #     self.assertEqual(dem_num_values[33].data_item_id, 680)
    #     self.assertEqual(dem_num_values[33].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[33].template_name, "traffic")
    #     self.assertEqual(dem_num_values[34].data_item_id, 681)
    #     self.assertEqual(dem_num_values[34].value, SignalDecimal(6892.000000000))
    #     self.assertEqual(dem_num_values[34].template_name, "traffic")
    #     self.assertEqual(dem_num_values[35].data_item_id, 682)
    #     self.assertEqual(dem_num_values[35].value, SignalDecimal(0.090000000))
    #     self.assertEqual(dem_num_values[35].template_name, "traffic")
    #     self.assertEqual(dem_num_values[36].data_item_id, 683)
    #     self.assertEqual(dem_num_values[36].value, SignalDecimal(40.728758000))
    #     self.assertEqual(dem_num_values[36].template_name, "traffic")
    #     self.assertEqual(dem_num_values[37].data_item_id, 686)
    #     self.assertEqual(dem_num_values[37].value, SignalDecimal(-73.992373000))
    #     self.assertEqual(dem_num_values[37].template_name, "traffic")
    #     self.assertEqual(dem_num_values[38].data_item_id, 687)
    #     self.assertEqual(dem_num_values[38].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[38].template_name, "traffic")
    #     self.assertEqual(dem_num_values[39].data_item_id, 688)
    #     self.assertEqual(dem_num_values[39].value, SignalDecimal(18700.000000000))
    #     self.assertEqual(dem_num_values[39].template_name, "traffic")
    #     self.assertEqual(dem_num_values[40].data_item_id, 689)
    #     self.assertEqual(dem_num_values[40].value, SignalDecimal(0.100000000))
    #     self.assertEqual(dem_num_values[40].template_name, "traffic")
    #     self.assertEqual(dem_num_values[41].data_item_id, 690)
    #     self.assertEqual(dem_num_values[41].value, SignalDecimal(40.730909000))
    #     self.assertEqual(dem_num_values[41].template_name, "traffic")
    #     self.assertEqual(dem_num_values[42].data_item_id, 693)
    #     self.assertEqual(dem_num_values[42].value, SignalDecimal(-73.991315000))
    #     self.assertEqual(dem_num_values[42].template_name, "traffic")
    #     self.assertEqual(dem_num_values[43].data_item_id, 694)
    #     self.assertEqual(dem_num_values[43].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[43].template_name, "traffic")
    #     self.assertEqual(dem_num_values[44].data_item_id, 695)
    #     self.assertEqual(dem_num_values[44].value, SignalDecimal(10250.000000000))
    #     self.assertEqual(dem_num_values[44].template_name, "traffic")
    #     self.assertEqual(dem_num_values[45].data_item_id, 696)
    #     self.assertEqual(dem_num_values[45].value, SignalDecimal(0.100000000))
    #     self.assertEqual(dem_num_values[45].template_name, "traffic")
    #     self.assertEqual(dem_num_values[46].data_item_id, 697)
    #     self.assertEqual(dem_num_values[46].value, SignalDecimal(40.729964000))
    #     self.assertEqual(dem_num_values[46].template_name, "traffic")
    #     self.assertEqual(dem_num_values[47].data_item_id, 700)
    #     self.assertEqual(dem_num_values[47].value, SignalDecimal(-73.990886000))
    #     self.assertEqual(dem_num_values[47].template_name, "traffic")
    #     self.assertEqual(dem_num_values[48].data_item_id, 701)
    #     self.assertEqual(dem_num_values[48].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[48].template_name, "traffic")
    #     self.assertEqual(dem_num_values[49].data_item_id, 702)
    #     self.assertEqual(dem_num_values[49].value, SignalDecimal(6202.000000000))
    #     self.assertEqual(dem_num_values[49].template_name, "traffic")
    #     self.assertEqual(dem_num_values[50].data_item_id, 703)
    #     self.assertEqual(dem_num_values[50].value, SignalDecimal(0.110000000))
    #     self.assertEqual(dem_num_values[50].template_name, "traffic")
    #     self.assertEqual(dem_num_values[51].data_item_id, 704)
    #     self.assertEqual(dem_num_values[51].value, SignalDecimal(40.729348000))
    #     self.assertEqual(dem_num_values[51].template_name, "traffic")
    #     self.assertEqual(dem_num_values[52].data_item_id, 707)
    #     self.assertEqual(dem_num_values[52].value, SignalDecimal(-73.990870000))
    #     self.assertEqual(dem_num_values[52].template_name, "traffic")
    #     self.assertEqual(dem_num_values[53].data_item_id, 708)
    #     self.assertEqual(dem_num_values[53].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[53].template_name, "traffic")
    #     self.assertEqual(dem_num_values[54].data_item_id, 709)
    #     self.assertEqual(dem_num_values[54].value, SignalDecimal(5674.000000000))
    #     self.assertEqual(dem_num_values[54].template_name, "traffic")
    #     self.assertEqual(dem_num_values[55].data_item_id, 710)
    #     self.assertEqual(dem_num_values[55].value, SignalDecimal(0.120000000))
    #     self.assertEqual(dem_num_values[55].template_name, "traffic")
    #     self.assertEqual(dem_num_values[56].data_item_id, 711)
    #     self.assertEqual(dem_num_values[56].value, SignalDecimal(40.730470000))
    #     self.assertEqual(dem_num_values[56].template_name, "traffic")
    #     self.assertEqual(dem_num_values[57].data_item_id, 714)
    #     self.assertEqual(dem_num_values[57].value, SignalDecimal(-73.995065000))
    #     self.assertEqual(dem_num_values[57].template_name, "traffic")
    #     self.assertEqual(dem_num_values[58].data_item_id, 715)
    #     self.assertEqual(dem_num_values[58].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[58].template_name, "traffic")
    #     self.assertEqual(dem_num_values[59].data_item_id, 716)
    #     self.assertEqual(dem_num_values[59].value, SignalDecimal(4900.000000000))
    #     self.assertEqual(dem_num_values[59].template_name, "traffic")
    #     self.assertEqual(dem_num_values[60].data_item_id, 717)
    #     self.assertEqual(dem_num_values[60].value, SignalDecimal(0.130000000))
    #     self.assertEqual(dem_num_values[60].template_name, "traffic")
    #     self.assertEqual(dem_num_values[61].data_item_id, 718)
    #     self.assertEqual(dem_num_values[61].value, SignalDecimal(40.730705000))
    #     self.assertEqual(dem_num_values[61].template_name, "traffic")
    #     self.assertEqual(dem_num_values[62].data_item_id, 721)
    #     self.assertEqual(dem_num_values[62].value, SignalDecimal(-73.990483000))
    #     self.assertEqual(dem_num_values[62].template_name, "traffic")
    #     self.assertEqual(dem_num_values[63].data_item_id, 722)
    #     self.assertEqual(dem_num_values[63].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[63].template_name, "traffic")
    #     self.assertEqual(dem_num_values[64].data_item_id, 723)
    #     self.assertEqual(dem_num_values[64].value, SignalDecimal(19594.000000000))
    #     self.assertEqual(dem_num_values[64].template_name, "traffic")
    #     self.assertEqual(dem_num_values[65].data_item_id, 724)
    #     self.assertEqual(dem_num_values[65].value, SignalDecimal(0.130000000))
    #     self.assertEqual(dem_num_values[65].template_name, "traffic")
    #     self.assertEqual(dem_num_values[66].data_item_id, 725)
    #     self.assertEqual(dem_num_values[66].value, SignalDecimal(40.728672000))
    #     self.assertEqual(dem_num_values[66].template_name, "traffic")
    #     self.assertEqual(dem_num_values[67].data_item_id, 728)
    #     self.assertEqual(dem_num_values[67].value, SignalDecimal(-73.991049000))
    #     self.assertEqual(dem_num_values[67].template_name, "traffic")
    #     self.assertEqual(dem_num_values[68].data_item_id, 729)
    #     self.assertEqual(dem_num_values[68].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[68].template_name, "traffic")
    #     self.assertEqual(dem_num_values[69].data_item_id, 730)
    #     self.assertEqual(dem_num_values[69].value, SignalDecimal(5285.000000000))
    #     self.assertEqual(dem_num_values[69].template_name, "traffic")
    #     self.assertEqual(dem_num_values[70].data_item_id, 731)
    #     self.assertEqual(dem_num_values[70].value, SignalDecimal(0.140000000))
    #     self.assertEqual(dem_num_values[70].template_name, "traffic")
    #     self.assertEqual(dem_num_values[71].data_item_id, 732)
    #     self.assertEqual(dem_num_values[71].value, SignalDecimal(40.729629000))
    #     self.assertEqual(dem_num_values[71].template_name, "traffic")
    #     self.assertEqual(dem_num_values[72].data_item_id, 735)
    #     self.assertEqual(dem_num_values[72].value, SignalDecimal(-73.990233000))
    #     self.assertEqual(dem_num_values[72].template_name, "traffic")
    #     self.assertEqual(dem_num_values[73].data_item_id, 736)
    #     self.assertEqual(dem_num_values[73].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[73].template_name, "traffic")
    #     self.assertEqual(dem_num_values[74].data_item_id, 737)
    #     self.assertEqual(dem_num_values[74].value, SignalDecimal(8699.000000000))
    #     self.assertEqual(dem_num_values[74].template_name, "traffic")
    #     self.assertEqual(dem_num_values[75].data_item_id, 738)
    #     self.assertEqual(dem_num_values[75].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[75].template_name, "traffic")
    #     self.assertEqual(dem_num_values[76].data_item_id, 739)
    #     self.assertEqual(dem_num_values[76].value, SignalDecimal(40.731487000))
    #     self.assertEqual(dem_num_values[76].template_name, "traffic")
    #     self.assertEqual(dem_num_values[77].data_item_id, 742)
    #     self.assertEqual(dem_num_values[77].value, SignalDecimal(-73.994882000))
    #     self.assertEqual(dem_num_values[77].template_name, "traffic")
    #     self.assertEqual(dem_num_values[78].data_item_id, 743)
    #     self.assertEqual(dem_num_values[78].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[78].template_name, "traffic")
    #     self.assertEqual(dem_num_values[79].data_item_id, 744)
    #     self.assertEqual(dem_num_values[79].value, SignalDecimal(13348.000000000))
    #     self.assertEqual(dem_num_values[79].template_name, "traffic")
    #     self.assertEqual(dem_num_values[80].data_item_id, 745)
    #     self.assertEqual(dem_num_values[80].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[80].template_name, "traffic")
    #     self.assertEqual(dem_num_values[81].data_item_id, 746)
    #     self.assertEqual(dem_num_values[81].value, SignalDecimal(40.729113000))
    #     self.assertEqual(dem_num_values[81].template_name, "traffic")
    #     self.assertEqual(dem_num_values[82].data_item_id, 749)
    #     self.assertEqual(dem_num_values[82].value, SignalDecimal(-73.990225000))
    #     self.assertEqual(dem_num_values[82].template_name, "traffic")
    #     self.assertEqual(dem_num_values[83].data_item_id, 750)
    #     self.assertEqual(dem_num_values[83].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[83].template_name, "traffic")
    #     self.assertEqual(dem_num_values[84].data_item_id, 751)
    #     self.assertEqual(dem_num_values[84].value, SignalDecimal(18337.000000000))
    #     self.assertEqual(dem_num_values[84].template_name, "traffic")
    #     self.assertEqual(dem_num_values[85].data_item_id, 752)
    #     self.assertEqual(dem_num_values[85].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[85].template_name, "traffic")
    #     self.assertEqual(dem_num_values[86].data_item_id, 753)
    #     self.assertEqual(dem_num_values[86].value, SignalDecimal(40.728490000))
    #     self.assertEqual(dem_num_values[86].template_name, "traffic")
    #     self.assertEqual(dem_num_values[87].data_item_id, 756)
    #     self.assertEqual(dem_num_values[87].value, SignalDecimal(-73.990687000))
    #     self.assertEqual(dem_num_values[87].template_name, "traffic")
    #     self.assertEqual(dem_num_values[88].data_item_id, 757)
    #     self.assertEqual(dem_num_values[88].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[88].template_name, "traffic")
    #     self.assertEqual(dem_num_values[89].data_item_id, 758)
    #     self.assertEqual(dem_num_values[89].value, SignalDecimal(16751.000000000))
    #     self.assertEqual(dem_num_values[89].template_name, "traffic")
    #     self.assertEqual(dem_num_values[90].data_item_id, 759)
    #     self.assertEqual(dem_num_values[90].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[90].template_name, "traffic")
    #     self.assertEqual(dem_num_values[91].data_item_id, 760)
    #     self.assertEqual(dem_num_values[91].value, SignalDecimal(40.728985000))
    #     self.assertEqual(dem_num_values[91].template_name, "traffic")
    #     self.assertEqual(dem_num_values[92].data_item_id, 763)
    #     self.assertEqual(dem_num_values[92].value, SignalDecimal(-73.995416000))
    #     self.assertEqual(dem_num_values[92].template_name, "traffic")
    #     self.assertEqual(dem_num_values[93].data_item_id, 764)
    #     self.assertEqual(dem_num_values[93].value, SignalDecimal(1995.000000000))
    #     self.assertEqual(dem_num_values[93].template_name, "traffic")
    #     self.assertEqual(dem_num_values[94].data_item_id, 765)
    #     self.assertEqual(dem_num_values[94].value, SignalDecimal(6145.000000000))
    #     self.assertEqual(dem_num_values[94].template_name, "traffic")
    #     self.assertEqual(dem_num_values[95].data_item_id, 766)
    #     self.assertEqual(dem_num_values[95].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[95].template_name, "traffic")
    #     self.assertEqual(dem_num_values[96].data_item_id, 767)
    #     self.assertEqual(dem_num_values[96].value, SignalDecimal(40.729514000))
    #     self.assertEqual(dem_num_values[96].template_name, "traffic")
    #     self.assertEqual(dem_num_values[97].data_item_id, 770)
    #     self.assertEqual(dem_num_values[97].value, SignalDecimal(-73.989800000))
    #     self.assertEqual(dem_num_values[97].template_name, "traffic")
    #     self.assertEqual(dem_num_values[98].data_item_id, 771)
    #     self.assertEqual(dem_num_values[98].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[98].template_name, "traffic")
    #     self.assertEqual(dem_num_values[99].data_item_id, 772)
    #     self.assertEqual(dem_num_values[99].value, SignalDecimal(15990.000000000))
    #     self.assertEqual(dem_num_values[99].template_name, "traffic")
    #     self.assertEqual(dem_num_values[100].data_item_id, 773)
    #     self.assertEqual(dem_num_values[100].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[100].template_name, "traffic")
    #     self.assertEqual(dem_num_values[101].data_item_id, 774)
    #     self.assertEqual(dem_num_values[101].value, SignalDecimal(40.730052000))
    #     self.assertEqual(dem_num_values[101].template_name, "traffic")
    #     self.assertEqual(dem_num_values[102].data_item_id, 777)
    #     self.assertEqual(dem_num_values[102].value, SignalDecimal(-73.995858000))
    #     self.assertEqual(dem_num_values[102].template_name, "traffic")
    #     self.assertEqual(dem_num_values[103].data_item_id, 778)
    #     self.assertEqual(dem_num_values[103].value, SignalDecimal(1995.000000000))
    #     self.assertEqual(dem_num_values[103].template_name, "traffic")
    #     self.assertEqual(dem_num_values[104].data_item_id, 779)
    #     self.assertEqual(dem_num_values[104].value, SignalDecimal(4360.000000000))
    #     self.assertEqual(dem_num_values[104].template_name, "traffic")
    #     self.assertEqual(dem_num_values[105].data_item_id, 780)
    #     self.assertEqual(dem_num_values[105].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[105].template_name, "traffic")
    #     self.assertEqual(dem_num_values[106].data_item_id, 781)
    #     self.assertEqual(dem_num_values[106].value, SignalDecimal(40.728100000))
    #     self.assertEqual(dem_num_values[106].template_name, "traffic")
    #     self.assertEqual(dem_num_values[107].data_item_id, 784)
    #     self.assertEqual(dem_num_values[107].value, SignalDecimal(-73.991001000))
    #     self.assertEqual(dem_num_values[107].template_name, "traffic")
    #     self.assertEqual(dem_num_values[108].data_item_id, 785)
    #     self.assertEqual(dem_num_values[108].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[108].template_name, "traffic")
    #     self.assertEqual(dem_num_values[109].data_item_id, 786)
    #     self.assertEqual(dem_num_values[109].value, SignalDecimal(24073.000000000))
    #     self.assertEqual(dem_num_values[109].template_name, "traffic")
    #     self.assertEqual(dem_num_values[110].data_item_id, 787)
    #     self.assertEqual(dem_num_values[110].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[110].template_name, "traffic")
    #     self.assertEqual(dem_num_values[111].data_item_id, 788)
    #     self.assertEqual(dem_num_values[111].value, SignalDecimal(40.727985000))
    #     self.assertEqual(dem_num_values[111].template_name, "traffic")
    #     self.assertEqual(dem_num_values[112].data_item_id, 791)
    #     self.assertEqual(dem_num_values[112].value, SignalDecimal(-73.991227000))
    #     self.assertEqual(dem_num_values[112].template_name, "traffic")
    #     self.assertEqual(dem_num_values[113].data_item_id, 792)
    #     self.assertEqual(dem_num_values[113].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[113].template_name, "traffic")
    #     self.assertEqual(dem_num_values[114].data_item_id, 793)
    #     self.assertEqual(dem_num_values[114].value, SignalDecimal(2633.000000000))
    #     self.assertEqual(dem_num_values[114].template_name, "traffic")
    #     self.assertEqual(dem_num_values[115].data_item_id, 794)
    #     self.assertEqual(dem_num_values[115].value, SignalDecimal(0.170000000))
    #     self.assertEqual(dem_num_values[115].template_name, "traffic")
    #     self.assertEqual(dem_num_values[116].data_item_id, 795)
    #     self.assertEqual(dem_num_values[116].value, SignalDecimal(40.729883000))
    #     self.assertEqual(dem_num_values[116].template_name, "traffic")
    #     self.assertEqual(dem_num_values[117].data_item_id, 798)
    #     self.assertEqual(dem_num_values[117].value, SignalDecimal(-73.989555000))
    #     self.assertEqual(dem_num_values[117].template_name, "traffic")
    #     self.assertEqual(dem_num_values[118].data_item_id, 799)
    #     self.assertEqual(dem_num_values[118].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[118].template_name, "traffic")
    #     self.assertEqual(dem_num_values[119].data_item_id, 800)
    #     self.assertEqual(dem_num_values[119].value, SignalDecimal(18787.000000000))
    #     self.assertEqual(dem_num_values[119].template_name, "traffic")
    #     self.assertEqual(dem_num_values[120].data_item_id, 801)
    #     self.assertEqual(dem_num_values[120].value, SignalDecimal(0.180000000))
    #     self.assertEqual(dem_num_values[120].template_name, "traffic")
    #     self.assertEqual(dem_num_values[121].data_item_id, 802)
    #     self.assertEqual(dem_num_values[121].value, SignalDecimal(40.727483000))
    #     self.assertEqual(dem_num_values[121].template_name, "traffic")
    #     self.assertEqual(dem_num_values[122].data_item_id, 805)
    #     self.assertEqual(dem_num_values[122].value, SignalDecimal(-73.993474000))
    #     self.assertEqual(dem_num_values[122].template_name, "traffic")
    #     self.assertEqual(dem_num_values[123].data_item_id, 806)
    #     self.assertEqual(dem_num_values[123].value, SignalDecimal(1992.000000000))
    #     self.assertEqual(dem_num_values[123].template_name, "traffic")
    #     self.assertEqual(dem_num_values[124].data_item_id, 807)
    #     self.assertEqual(dem_num_values[124].value, SignalDecimal(13796.000000000))
    #     self.assertEqual(dem_num_values[124].template_name, "traffic")
    #     self.assertEqual(dem_num_values[125].data_item_id, 808)
    #     self.assertEqual(dem_num_values[125].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[125].template_name, "traffic")
    #     self.assertEqual(dem_num_values[126].data_item_id, 809)
    #     self.assertEqual(dem_num_values[126].value, SignalDecimal(40.727658000))
    #     self.assertEqual(dem_num_values[126].template_name, "traffic")
    #     self.assertEqual(dem_num_values[127].data_item_id, 812)
    #     self.assertEqual(dem_num_values[127].value, SignalDecimal(-73.994397000))
    #     self.assertEqual(dem_num_values[127].template_name, "traffic")
    #     self.assertEqual(dem_num_values[128].data_item_id, 813)
    #     self.assertEqual(dem_num_values[128].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[128].template_name, "traffic")
    #     self.assertEqual(dem_num_values[129].data_item_id, 814)
    #     self.assertEqual(dem_num_values[129].value, SignalDecimal(7500.000000000))
    #     self.assertEqual(dem_num_values[129].template_name, "traffic")
    #     self.assertEqual(dem_num_values[130].data_item_id, 815)
    #     self.assertEqual(dem_num_values[130].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[130].template_name, "traffic")
    #     self.assertEqual(dem_num_values[131].data_item_id, 816)
    #     self.assertEqual(dem_num_values[131].value, SignalDecimal(40.727646000))
    #     self.assertEqual(dem_num_values[131].template_name, "traffic")
    #     self.assertEqual(dem_num_values[132].data_item_id, 819)
    #     self.assertEqual(dem_num_values[132].value, SignalDecimal(-73.991009000))
    #     self.assertEqual(dem_num_values[132].template_name, "traffic")
    #     self.assertEqual(dem_num_values[133].data_item_id, 820)
    #     self.assertEqual(dem_num_values[133].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[133].template_name, "traffic")
    #     self.assertEqual(dem_num_values[134].data_item_id, 821)
    #     self.assertEqual(dem_num_values[134].value, SignalDecimal(4091.000000000))
    #     self.assertEqual(dem_num_values[134].template_name, "traffic")
    #     self.assertEqual(dem_num_values[135].data_item_id, 822)
    #     self.assertEqual(dem_num_values[135].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[135].template_name, "traffic")
    #     self.assertEqual(dem_num_values[136].data_item_id, 823)
    #     self.assertEqual(dem_num_values[136].value, SignalDecimal(40.727391000))
    #     self.assertEqual(dem_num_values[136].template_name, "traffic")
    #     self.assertEqual(dem_num_values[137].data_item_id, 826)
    #     self.assertEqual(dem_num_values[137].value, SignalDecimal(-73.993844000))
    #     self.assertEqual(dem_num_values[137].template_name, "traffic")
    #     self.assertEqual(dem_num_values[138].data_item_id, 827)
    #     self.assertEqual(dem_num_values[138].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[138].template_name, "traffic")
    #     self.assertEqual(dem_num_values[139].data_item_id, 828)
    #     self.assertEqual(dem_num_values[139].value, SignalDecimal(8000.000000000))
    #     self.assertEqual(dem_num_values[139].template_name, "traffic")
    #     self.assertEqual(dem_num_values[140].data_item_id, 829)
    #     self.assertEqual(dem_num_values[140].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[140].template_name, "traffic")
    #     self.assertEqual(dem_num_values[141].data_item_id, 830)
    #     self.assertEqual(dem_num_values[141].value, SignalDecimal(40.732901000))
    #     self.assertEqual(dem_num_values[141].template_name, "traffic")
    #     self.assertEqual(dem_num_values[142].data_item_id, 833)
    #     self.assertEqual(dem_num_values[142].value, SignalDecimal(-73.992363000))
    #     self.assertEqual(dem_num_values[142].template_name, "traffic")
    #     self.assertEqual(dem_num_values[143].data_item_id, 834)
    #     self.assertEqual(dem_num_values[143].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[143].template_name, "traffic")
    #     self.assertEqual(dem_num_values[144].data_item_id, 835)
    #     self.assertEqual(dem_num_values[144].value, SignalDecimal(3150.000000000))
    #     self.assertEqual(dem_num_values[144].template_name, "traffic")
    #     self.assertEqual(dem_num_values[145].data_item_id, 836)
    #     self.assertEqual(dem_num_values[145].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[145].template_name, "traffic")
    #     self.assertEqual(dem_num_values[146].data_item_id, 837)
    #     self.assertEqual(dem_num_values[146].value, SignalDecimal(40.732154000))
    #     self.assertEqual(dem_num_values[146].template_name, "traffic")
    #     self.assertEqual(dem_num_values[147].data_item_id, 840)
    #     self.assertEqual(dem_num_values[147].value, SignalDecimal(-73.990173000))
    #     self.assertEqual(dem_num_values[147].template_name, "traffic")
    #     self.assertEqual(dem_num_values[148].data_item_id, 841)
    #     self.assertEqual(dem_num_values[148].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[148].template_name, "traffic")
    #     self.assertEqual(dem_num_values[149].data_item_id, 842)
    #     self.assertEqual(dem_num_values[149].value, SignalDecimal(20867.000000000))
    #     self.assertEqual(dem_num_values[149].template_name, "traffic")
    #     self.assertEqual(dem_num_values[150].data_item_id, 843)
    #     self.assertEqual(dem_num_values[150].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[150].template_name, "traffic")
    #     self.assertEqual(dem_num_values[151].data_item_id, 844)
    #     self.assertEqual(dem_num_values[151].value, SignalDecimal(40.727289000))
    #     self.assertEqual(dem_num_values[151].template_name, "traffic")
    #     self.assertEqual(dem_num_values[152].data_item_id, 847)
    #     self.assertEqual(dem_num_values[152].value, SignalDecimal(-73.991470000))
    #     self.assertEqual(dem_num_values[152].template_name, "traffic")
    #     self.assertEqual(dem_num_values[153].data_item_id, 848)
    #     self.assertEqual(dem_num_values[153].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[153].template_name, "traffic")
    #     self.assertEqual(dem_num_values[154].data_item_id, 849)
    #     self.assertEqual(dem_num_values[154].value, SignalDecimal(21753.000000000))
    #     self.assertEqual(dem_num_values[154].template_name, "traffic")
    #     self.assertEqual(dem_num_values[155].data_item_id, 850)
    #     self.assertEqual(dem_num_values[155].value, SignalDecimal(0.220000000))
    #     self.assertEqual(dem_num_values[155].template_name, "traffic")
    #     self.assertEqual(dem_num_values[156].data_item_id, 851)
    #     self.assertEqual(dem_num_values[156].value, SignalDecimal(40.728708000))
    #     self.assertEqual(dem_num_values[156].template_name, "traffic")
    #     self.assertEqual(dem_num_values[157].data_item_id, 854)
    #     self.assertEqual(dem_num_values[157].value, SignalDecimal(-73.996668000))
    #     self.assertEqual(dem_num_values[157].template_name, "traffic")
    #     self.assertEqual(dem_num_values[158].data_item_id, 855)
    #     self.assertEqual(dem_num_values[158].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[158].template_name, "traffic")
    #     self.assertEqual(dem_num_values[159].data_item_id, 856)
    #     self.assertEqual(dem_num_values[159].value, SignalDecimal(7800.000000000))
    #     self.assertEqual(dem_num_values[159].template_name, "traffic")



    # def test_all_gps(self):
    #     """
    #     Run GP1 and GP6 (All Reports).  And verify demographics
    #     """
    #     # run gp 1 and gp2
    #     GP1_10_1_GeoProcessor(self._threshold).process(self._company_id, self._store_id)
    #     GP6_BA_Online_Reports(self._threshold).process(self._company_id, self._store_id)
    #
    #     # select demographic_str_values and demographic_num_values
    #     dem_num_values = select_demographic_numvalues(self._trade_area.trade_area_id, True)
    #     dem_str_values = select_demographic_strvalues(self._trade_area.trade_area_id, True)
    #
    #     # verify that we have all str and num values
    #     self.assertEqual(len(dem_num_values), 778)
    #     self.assertEqual(len(dem_str_values), 206)
    #
    #
    #     # verify all str values
    #     self.assertEqual(dem_str_values[0].data_item_id, 1)
    #     self.assertEqual(dem_str_values[0].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[0].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[1].data_item_id, 1)
    #     self.assertEqual(dem_str_values[1].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[1].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_str_values[2].data_item_id, 1)
    #     self.assertEqual(dem_str_values[2].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[2].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_str_values[3].data_item_id, 1)
    #     self.assertEqual(dem_str_values[3].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[3].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_str_values[4].data_item_id, 1)
    #     self.assertEqual(dem_str_values[4].value, "%d_1" % self._store_id)
    #     self.assertEqual(dem_str_values[4].template_name, "traffic")
    #     self.assertEqual(dem_str_values[5].data_item_id, 2)
    #     self.assertEqual(dem_str_values[5].value, "10 miles")
    #     self.assertEqual(dem_str_values[5].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[6].data_item_id, 2)
    #     self.assertEqual(dem_str_values[6].value, "10 miles")
    #     self.assertEqual(dem_str_values[6].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_str_values[7].data_item_id, 2)
    #     self.assertEqual(dem_str_values[7].value, "10 miles")
    #     self.assertEqual(dem_str_values[7].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_str_values[8].data_item_id, 2)
    #     self.assertEqual(dem_str_values[8].value, "10 miles")
    #     self.assertEqual(dem_str_values[8].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_str_values[9].data_item_id, 2)
    #     self.assertEqual(dem_str_values[9].value, "10 miles")
    #     self.assertEqual(dem_str_values[9].template_name, "traffic")
    #     self.assertEqual(dem_str_values[10].data_item_id, 6)
    #     self.assertEqual(dem_str_values[10].value, "")
    #     self.assertEqual(dem_str_values[10].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[11].data_item_id, 6)
    #     self.assertEqual(dem_str_values[11].value, "")
    #     self.assertEqual(dem_str_values[11].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_str_values[12].data_item_id, 6)
    #     self.assertEqual(dem_str_values[12].value, "")
    #     self.assertEqual(dem_str_values[12].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_str_values[13].data_item_id, 6)
    #     self.assertEqual(dem_str_values[13].value, "")
    #     self.assertEqual(dem_str_values[13].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_str_values[14].data_item_id, 6)
    #     self.assertEqual(dem_str_values[14].value, "")
    #     self.assertEqual(dem_str_values[14].template_name, "traffic")
    #     self.assertEqual(dem_str_values[15].data_item_id, 7)
    #     self.assertEqual(dem_str_values[15].value, "")
    #     self.assertEqual(dem_str_values[15].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[16].data_item_id, 7)
    #     self.assertEqual(dem_str_values[16].value, "")
    #     self.assertEqual(dem_str_values[16].template_name, "traffic")
    #     self.assertEqual(dem_str_values[17].data_item_id, 8)
    #     self.assertEqual(dem_str_values[17].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[17].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[18].data_item_id, 8)
    #     self.assertEqual(dem_str_values[18].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[18].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_str_values[19].data_item_id, 8)
    #     self.assertEqual(dem_str_values[19].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[19].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_str_values[20].data_item_id, 8)
    #     self.assertEqual(dem_str_values[20].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[20].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_str_values[21].data_item_id, 8)
    #     self.assertEqual(dem_str_values[21].value, "Ring: 10 mile radius")
    #     self.assertEqual(dem_str_values[21].template_name, "traffic")
    #     self.assertEqual(dem_str_values[22].data_item_id, 11)
    #     self.assertEqual(dem_str_values[22].value, "")
    #     self.assertEqual(dem_str_values[22].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[23].data_item_id, 11)
    #     self.assertEqual(dem_str_values[23].value, "")
    #     self.assertEqual(dem_str_values[23].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_str_values[24].data_item_id, 11)
    #     self.assertEqual(dem_str_values[24].value, "")
    #     self.assertEqual(dem_str_values[24].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_str_values[25].data_item_id, 11)
    #     self.assertEqual(dem_str_values[25].value, "")
    #     self.assertEqual(dem_str_values[25].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_str_values[26].data_item_id, 11)
    #     self.assertEqual(dem_str_values[26].value, "")
    #     self.assertEqual(dem_str_values[26].template_name, "traffic")
    #     self.assertEqual(dem_str_values[27].data_item_id, 260)
    #     self.assertEqual(dem_str_values[27].value, "High")
    #     self.assertEqual(dem_str_values[27].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[28].data_item_id, 263)
    #     self.assertEqual(dem_str_values[28].value, "High")
    #     self.assertEqual(dem_str_values[28].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[29].data_item_id, 266)
    #     self.assertEqual(dem_str_values[29].value, "High")
    #     self.assertEqual(dem_str_values[29].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[30].data_item_id, 269)
    #     self.assertEqual(dem_str_values[30].value, "High")
    #     self.assertEqual(dem_str_values[30].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[31].data_item_id, 272)
    #     self.assertEqual(dem_str_values[31].value, "High")
    #     self.assertEqual(dem_str_values[31].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[32].data_item_id, 275)
    #     self.assertEqual(dem_str_values[32].value, "High")
    #     self.assertEqual(dem_str_values[32].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[33].data_item_id, 278)
    #     self.assertEqual(dem_str_values[33].value, "High")
    #     self.assertEqual(dem_str_values[33].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[34].data_item_id, 281)
    #     self.assertEqual(dem_str_values[34].value, "High")
    #     self.assertEqual(dem_str_values[34].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[35].data_item_id, 284)
    #     self.assertEqual(dem_str_values[35].value, "Medium")
    #     self.assertEqual(dem_str_values[35].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[36].data_item_id, 287)
    #     self.assertEqual(dem_str_values[36].value, "High")
    #     self.assertEqual(dem_str_values[36].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[37].data_item_id, 290)
    #     self.assertEqual(dem_str_values[37].value, "High")
    #     self.assertEqual(dem_str_values[37].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[38].data_item_id, 293)
    #     self.assertEqual(dem_str_values[38].value, "High")
    #     self.assertEqual(dem_str_values[38].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[39].data_item_id, 296)
    #     self.assertEqual(dem_str_values[39].value, "High")
    #     self.assertEqual(dem_str_values[39].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[40].data_item_id, 299)
    #     self.assertEqual(dem_str_values[40].value, "High")
    #     self.assertEqual(dem_str_values[40].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[41].data_item_id, 302)
    #     self.assertEqual(dem_str_values[41].value, "High")
    #     self.assertEqual(dem_str_values[41].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[42].data_item_id, 305)
    #     self.assertEqual(dem_str_values[42].value, "High")
    #     self.assertEqual(dem_str_values[42].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[43].data_item_id, 308)
    #     self.assertEqual(dem_str_values[43].value, "High")
    #     self.assertEqual(dem_str_values[43].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[44].data_item_id, 311)
    #     self.assertEqual(dem_str_values[44].value, "High")
    #     self.assertEqual(dem_str_values[44].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[45].data_item_id, 314)
    #     self.assertEqual(dem_str_values[45].value, "High")
    #     self.assertEqual(dem_str_values[45].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[46].data_item_id, 317)
    #     self.assertEqual(dem_str_values[46].value, "High")
    #     self.assertEqual(dem_str_values[46].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[47].data_item_id, 320)
    #     self.assertEqual(dem_str_values[47].value, "High")
    #     self.assertEqual(dem_str_values[47].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[48].data_item_id, 323)
    #     self.assertEqual(dem_str_values[48].value, "High")
    #     self.assertEqual(dem_str_values[48].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[49].data_item_id, 326)
    #     self.assertEqual(dem_str_values[49].value, "High")
    #     self.assertEqual(dem_str_values[49].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[50].data_item_id, 329)
    #     self.assertEqual(dem_str_values[50].value, "High")
    #     self.assertEqual(dem_str_values[50].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[51].data_item_id, 332)
    #     self.assertEqual(dem_str_values[51].value, "High")
    #     self.assertEqual(dem_str_values[51].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[52].data_item_id, 335)
    #     self.assertEqual(dem_str_values[52].value, "High")
    #     self.assertEqual(dem_str_values[52].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[53].data_item_id, 338)
    #     self.assertEqual(dem_str_values[53].value, "High")
    #     self.assertEqual(dem_str_values[53].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[54].data_item_id, 341)
    #     self.assertEqual(dem_str_values[54].value, "High")
    #     self.assertEqual(dem_str_values[54].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[55].data_item_id, 350)
    #     self.assertEqual(dem_str_values[55].value, "High")
    #     self.assertEqual(dem_str_values[55].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[56].data_item_id, 353)
    #     self.assertEqual(dem_str_values[56].value, "High")
    #     self.assertEqual(dem_str_values[56].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[57].data_item_id, 356)
    #     self.assertEqual(dem_str_values[57].value, "High")
    #     self.assertEqual(dem_str_values[57].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[58].data_item_id, 359)
    #     self.assertEqual(dem_str_values[58].value, "High")
    #     self.assertEqual(dem_str_values[58].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[59].data_item_id, 362)
    #     self.assertEqual(dem_str_values[59].value, "High")
    #     self.assertEqual(dem_str_values[59].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[60].data_item_id, 365)
    #     self.assertEqual(dem_str_values[60].value, "High")
    #     self.assertEqual(dem_str_values[60].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[61].data_item_id, 368)
    #     self.assertEqual(dem_str_values[61].value, "High")
    #     self.assertEqual(dem_str_values[61].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[62].data_item_id, 377)
    #     self.assertEqual(dem_str_values[62].value, "High")
    #     self.assertEqual(dem_str_values[62].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[63].data_item_id, 380)
    #     self.assertEqual(dem_str_values[63].value, "High")
    #     self.assertEqual(dem_str_values[63].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[64].data_item_id, 383)
    #     self.assertEqual(dem_str_values[64].value, "High")
    #     self.assertEqual(dem_str_values[64].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[65].data_item_id, 386)
    #     self.assertEqual(dem_str_values[65].value, "High")
    #     self.assertEqual(dem_str_values[65].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[66].data_item_id, 389)
    #     self.assertEqual(dem_str_values[66].value, "High")
    #     self.assertEqual(dem_str_values[66].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[67].data_item_id, 392)
    #     self.assertEqual(dem_str_values[67].value, "High")
    #     self.assertEqual(dem_str_values[67].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[68].data_item_id, 395)
    #     self.assertEqual(dem_str_values[68].value, "High")
    #     self.assertEqual(dem_str_values[68].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[69].data_item_id, 398)
    #     self.assertEqual(dem_str_values[69].value, "High")
    #     self.assertEqual(dem_str_values[69].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[70].data_item_id, 401)
    #     self.assertEqual(dem_str_values[70].value, "High")
    #     self.assertEqual(dem_str_values[70].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[71].data_item_id, 404)
    #     self.assertEqual(dem_str_values[71].value, "High")
    #     self.assertEqual(dem_str_values[71].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[72].data_item_id, 407)
    #     self.assertEqual(dem_str_values[72].value, "High")
    #     self.assertEqual(dem_str_values[72].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[73].data_item_id, 410)
    #     self.assertEqual(dem_str_values[73].value, "High")
    #     self.assertEqual(dem_str_values[73].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[74].data_item_id, 413)
    #     self.assertEqual(dem_str_values[74].value, "High")
    #     self.assertEqual(dem_str_values[74].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[75].data_item_id, 416)
    #     self.assertEqual(dem_str_values[75].value, "High")
    #     self.assertEqual(dem_str_values[75].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[76].data_item_id, 419)
    #     self.assertEqual(dem_str_values[76].value, "High")
    #     self.assertEqual(dem_str_values[76].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[77].data_item_id, 422)
    #     self.assertEqual(dem_str_values[77].value, "High")
    #     self.assertEqual(dem_str_values[77].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[78].data_item_id, 425)
    #     self.assertEqual(dem_str_values[78].value, "High")
    #     self.assertEqual(dem_str_values[78].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[79].data_item_id, 428)
    #     self.assertEqual(dem_str_values[79].value, "High")
    #     self.assertEqual(dem_str_values[79].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[80].data_item_id, 431)
    #     self.assertEqual(dem_str_values[80].value, "High")
    #     self.assertEqual(dem_str_values[80].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[81].data_item_id, 434)
    #     self.assertEqual(dem_str_values[81].value, "High")
    #     self.assertEqual(dem_str_values[81].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[82].data_item_id, 437)
    #     self.assertEqual(dem_str_values[82].value, "High")
    #     self.assertEqual(dem_str_values[82].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[83].data_item_id, 440)
    #     self.assertEqual(dem_str_values[83].value, "High")
    #     self.assertEqual(dem_str_values[83].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[84].data_item_id, 443)
    #     self.assertEqual(dem_str_values[84].value, "High")
    #     self.assertEqual(dem_str_values[84].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[85].data_item_id, 446)
    #     self.assertEqual(dem_str_values[85].value, "High")
    #     self.assertEqual(dem_str_values[85].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[86].data_item_id, 455)
    #     self.assertEqual(dem_str_values[86].value, "High")
    #     self.assertEqual(dem_str_values[86].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[87].data_item_id, 458)
    #     self.assertEqual(dem_str_values[87].value, "High")
    #     self.assertEqual(dem_str_values[87].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[88].data_item_id, 461)
    #     self.assertEqual(dem_str_values[88].value, "High")
    #     self.assertEqual(dem_str_values[88].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[89].data_item_id, 464)
    #     self.assertEqual(dem_str_values[89].value, "High")
    #     self.assertEqual(dem_str_values[89].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[90].data_item_id, 467)
    #     self.assertEqual(dem_str_values[90].value, "High")
    #     self.assertEqual(dem_str_values[90].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[91].data_item_id, 470)
    #     self.assertEqual(dem_str_values[91].value, "High")
    #     self.assertEqual(dem_str_values[91].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[92].data_item_id, 473)
    #     self.assertEqual(dem_str_values[92].value, "High")
    #     self.assertEqual(dem_str_values[92].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[93].data_item_id, 476)
    #     self.assertEqual(dem_str_values[93].value, "High")
    #     self.assertEqual(dem_str_values[93].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[94].data_item_id, 479)
    #     self.assertEqual(dem_str_values[94].value, "High")
    #     self.assertEqual(dem_str_values[94].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[95].data_item_id, 482)
    #     self.assertEqual(dem_str_values[95].value, "High")
    #     self.assertEqual(dem_str_values[95].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[96].data_item_id, 485)
    #     self.assertEqual(dem_str_values[96].value, "High")
    #     self.assertEqual(dem_str_values[96].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[97].data_item_id, 488)
    #     self.assertEqual(dem_str_values[97].value, "High")
    #     self.assertEqual(dem_str_values[97].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[98].data_item_id, 491)
    #     self.assertEqual(dem_str_values[98].value, "High")
    #     self.assertEqual(dem_str_values[98].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[99].data_item_id, 494)
    #     self.assertEqual(dem_str_values[99].value, "High")
    #     self.assertEqual(dem_str_values[99].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[100].data_item_id, 497)
    #     self.assertEqual(dem_str_values[100].value, "High")
    #     self.assertEqual(dem_str_values[100].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[101].data_item_id, 500)
    #     self.assertEqual(dem_str_values[101].value, "High")
    #     self.assertEqual(dem_str_values[101].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[102].data_item_id, 503)
    #     self.assertEqual(dem_str_values[102].value, "High")
    #     self.assertEqual(dem_str_values[102].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[103].data_item_id, 506)
    #     self.assertEqual(dem_str_values[103].value, "High")
    #     self.assertEqual(dem_str_values[103].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[104].data_item_id, 509)
    #     self.assertEqual(dem_str_values[104].value, "High")
    #     self.assertEqual(dem_str_values[104].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[105].data_item_id, 512)
    #     self.assertEqual(dem_str_values[105].value, "High")
    #     self.assertEqual(dem_str_values[105].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[106].data_item_id, 515)
    #     self.assertEqual(dem_str_values[106].value, "High")
    #     self.assertEqual(dem_str_values[106].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[107].data_item_id, 518)
    #     self.assertEqual(dem_str_values[107].value, "High")
    #     self.assertEqual(dem_str_values[107].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[108].data_item_id, 521)
    #     self.assertEqual(dem_str_values[108].value, "High")
    #     self.assertEqual(dem_str_values[108].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[109].data_item_id, 524)
    #     self.assertEqual(dem_str_values[109].value, "High")
    #     self.assertEqual(dem_str_values[109].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[110].data_item_id, 530)
    #     self.assertEqual(dem_str_values[110].value, "High")
    #     self.assertEqual(dem_str_values[110].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[111].data_item_id, 533)
    #     self.assertEqual(dem_str_values[111].value, "High")
    #     self.assertEqual(dem_str_values[111].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[112].data_item_id, 536)
    #     self.assertEqual(dem_str_values[112].value, "High")
    #     self.assertEqual(dem_str_values[112].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[113].data_item_id, 539)
    #     self.assertEqual(dem_str_values[113].value, "High")
    #     self.assertEqual(dem_str_values[113].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[114].data_item_id, 542)
    #     self.assertEqual(dem_str_values[114].value, "High")
    #     self.assertEqual(dem_str_values[114].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[115].data_item_id, 545)
    #     self.assertEqual(dem_str_values[115].value, "High")
    #     self.assertEqual(dem_str_values[115].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[116].data_item_id, 548)
    #     self.assertEqual(dem_str_values[116].value, "High")
    #     self.assertEqual(dem_str_values[116].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[117].data_item_id, 551)
    #     self.assertEqual(dem_str_values[117].value, "High")
    #     self.assertEqual(dem_str_values[117].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[118].data_item_id, 554)
    #     self.assertEqual(dem_str_values[118].value, "High")
    #     self.assertEqual(dem_str_values[118].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[119].data_item_id, 557)
    #     self.assertEqual(dem_str_values[119].value, "High")
    #     self.assertEqual(dem_str_values[119].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[120].data_item_id, 560)
    #     self.assertEqual(dem_str_values[120].value, "High")
    #     self.assertEqual(dem_str_values[120].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[121].data_item_id, 563)
    #     self.assertEqual(dem_str_values[121].value, "High")
    #     self.assertEqual(dem_str_values[121].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[122].data_item_id, 566)
    #     self.assertEqual(dem_str_values[122].value, "High")
    #     self.assertEqual(dem_str_values[122].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[123].data_item_id, 572)
    #     self.assertEqual(dem_str_values[123].value, "High")
    #     self.assertEqual(dem_str_values[123].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[124].data_item_id, 575)
    #     self.assertEqual(dem_str_values[124].value, "High")
    #     self.assertEqual(dem_str_values[124].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[125].data_item_id, 578)
    #     self.assertEqual(dem_str_values[125].value, "High")
    #     self.assertEqual(dem_str_values[125].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[126].data_item_id, 581)
    #     self.assertEqual(dem_str_values[126].value, "High")
    #     self.assertEqual(dem_str_values[126].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[127].data_item_id, 584)
    #     self.assertEqual(dem_str_values[127].value, "High")
    #     self.assertEqual(dem_str_values[127].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[128].data_item_id, 587)
    #     self.assertEqual(dem_str_values[128].value, "High")
    #     self.assertEqual(dem_str_values[128].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[129].data_item_id, 590)
    #     self.assertEqual(dem_str_values[129].value, "Medium")
    #     self.assertEqual(dem_str_values[129].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[130].data_item_id, 593)
    #     self.assertEqual(dem_str_values[130].value, "Medium")
    #     self.assertEqual(dem_str_values[130].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[131].data_item_id, 596)
    #     self.assertEqual(dem_str_values[131].value, "High")
    #     self.assertEqual(dem_str_values[131].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[132].data_item_id, 599)
    #     self.assertEqual(dem_str_values[132].value, "High")
    #     self.assertEqual(dem_str_values[132].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[133].data_item_id, 602)
    #     self.assertEqual(dem_str_values[133].value, "High")
    #     self.assertEqual(dem_str_values[133].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[134].data_item_id, 605)
    #     self.assertEqual(dem_str_values[134].value, "High")
    #     self.assertEqual(dem_str_values[134].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[135].data_item_id, 608)
    #     self.assertEqual(dem_str_values[135].value, "High")
    #     self.assertEqual(dem_str_values[135].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[136].data_item_id, 611)
    #     self.assertEqual(dem_str_values[136].value, "High")
    #     self.assertEqual(dem_str_values[136].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[137].data_item_id, 614)
    #     self.assertEqual(dem_str_values[137].value, "High")
    #     self.assertEqual(dem_str_values[137].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[138].data_item_id, 617)
    #     self.assertEqual(dem_str_values[138].value, "High")
    #     self.assertEqual(dem_str_values[138].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[139].data_item_id, 620)
    #     self.assertEqual(dem_str_values[139].value, "High")
    #     self.assertEqual(dem_str_values[139].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[140].data_item_id, 623)
    #     self.assertEqual(dem_str_values[140].value, "High")
    #     self.assertEqual(dem_str_values[140].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[141].data_item_id, 626)
    #     self.assertEqual(dem_str_values[141].value, "High")
    #     self.assertEqual(dem_str_values[141].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[142].data_item_id, 629)
    #     self.assertEqual(dem_str_values[142].value, "High")
    #     self.assertEqual(dem_str_values[142].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[143].data_item_id, 632)
    #     self.assertEqual(dem_str_values[143].value, "High")
    #     self.assertEqual(dem_str_values[143].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[144].data_item_id, 635)
    #     self.assertEqual(dem_str_values[144].value, "High")
    #     self.assertEqual(dem_str_values[144].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[145].data_item_id, 638)
    #     self.assertEqual(dem_str_values[145].value, "High")
    #     self.assertEqual(dem_str_values[145].template_name, "acs_housing")
    #     self.assertEqual(dem_str_values[146].data_item_id, 649)
    #     self.assertEqual(dem_str_values[146].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[146].template_name, "traffic")
    #     self.assertEqual(dem_str_values[147].data_item_id, 650)
    #     self.assertEqual(dem_str_values[147].value, "Lafayette St (0.04 miles E)")
    #     self.assertEqual(dem_str_values[147].template_name, "traffic")
    #     self.assertEqual(dem_str_values[148].data_item_id, 656)
    #     self.assertEqual(dem_str_values[148].value, "E 8 St")
    #     self.assertEqual(dem_str_values[148].template_name, "traffic")
    #     self.assertEqual(dem_str_values[149].data_item_id, 657)
    #     self.assertEqual(dem_str_values[149].value, "Broadway (0.04 miles NW)")
    #     self.assertEqual(dem_str_values[149].template_name, "traffic")
    #     self.assertEqual(dem_str_values[150].data_item_id, 663)
    #     self.assertEqual(dem_str_values[150].value, "Broadway")
    #     self.assertEqual(dem_str_values[150].template_name, "traffic")
    #     self.assertEqual(dem_str_values[151].data_item_id, 664)
    #     self.assertEqual(dem_str_values[151].value, "Waverly Pl (0.02 miles NE)")
    #     self.assertEqual(dem_str_values[151].template_name, "traffic")
    #     self.assertEqual(dem_str_values[152].data_item_id, 670)
    #     self.assertEqual(dem_str_values[152].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[152].template_name, "traffic")
    #     self.assertEqual(dem_str_values[153].data_item_id, 671)
    #     self.assertEqual(dem_str_values[153].value, "Astor Pl (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[153].template_name, "traffic")
    #     self.assertEqual(dem_str_values[154].data_item_id, 677)
    #     self.assertEqual(dem_str_values[154].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[154].template_name, "traffic")
    #     self.assertEqual(dem_str_values[155].data_item_id, 678)
    #     self.assertEqual(dem_str_values[155].value, "Cooper Sq (0.02 miles E)")
    #     self.assertEqual(dem_str_values[155].template_name, "traffic")
    #     self.assertEqual(dem_str_values[156].data_item_id, 684)
    #     self.assertEqual(dem_str_values[156].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[156].template_name, "traffic")
    #     self.assertEqual(dem_str_values[157].data_item_id, 685)
    #     self.assertEqual(dem_str_values[157].value, "E 4 St (0.07 miles SW)")
    #     self.assertEqual(dem_str_values[157].template_name, "traffic")
    #     self.assertEqual(dem_str_values[158].data_item_id, 691)
    #     self.assertEqual(dem_str_values[158].value, "E 9 St")
    #     self.assertEqual(dem_str_values[158].template_name, "traffic")
    #     self.assertEqual(dem_str_values[159].data_item_id, 692)
    #     self.assertEqual(dem_str_values[159].value, "Broadway (0.04 miles NW)")
    #     self.assertEqual(dem_str_values[159].template_name, "traffic")
    #     self.assertEqual(dem_str_values[160].data_item_id, 698)
    #     self.assertEqual(dem_str_values[160].value, "E 8 St")
    #     self.assertEqual(dem_str_values[160].template_name, "traffic")
    #     self.assertEqual(dem_str_values[161].data_item_id, 699)
    #     self.assertEqual(dem_str_values[161].value, "Lafayette St (0.01 miles NW)")
    #     self.assertEqual(dem_str_values[161].template_name, "traffic")
    #     self.assertEqual(dem_str_values[162].data_item_id, 705)
    #     self.assertEqual(dem_str_values[162].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[162].template_name, "traffic")
    #     self.assertEqual(dem_str_values[163].data_item_id, 706)
    #     self.assertEqual(dem_str_values[163].value, "E 7 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[163].template_name, "traffic")
    #     self.assertEqual(dem_str_values[164].data_item_id, 712)
    #     self.assertEqual(dem_str_values[164].value, "Waverly Pl")
    #     self.assertEqual(dem_str_values[164].template_name, "traffic")
    #     self.assertEqual(dem_str_values[165].data_item_id, 713)
    #     self.assertEqual(dem_str_values[165].value, "Greene St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[165].template_name, "traffic")
    #     self.assertEqual(dem_str_values[166].data_item_id, 719)
    #     self.assertEqual(dem_str_values[166].value, "4 Ave")
    #     self.assertEqual(dem_str_values[166].template_name, "traffic")
    #     self.assertEqual(dem_str_values[167].data_item_id, 720)
    #     self.assertEqual(dem_str_values[167].value, "E 9 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[167].template_name, "traffic")
    #     self.assertEqual(dem_str_values[168].data_item_id, 726)
    #     self.assertEqual(dem_str_values[168].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[168].template_name, "traffic")
    #     self.assertEqual(dem_str_values[169].data_item_id, 727)
    #     self.assertEqual(dem_str_values[169].value, "E 6 St (0.03 miles SE)")
    #     self.assertEqual(dem_str_values[169].template_name, "traffic")
    #     self.assertEqual(dem_str_values[170].data_item_id, 733)
    #     self.assertEqual(dem_str_values[170].value, "Astor Pl")
    #     self.assertEqual(dem_str_values[170].template_name, "traffic")
    #     self.assertEqual(dem_str_values[171].data_item_id, 734)
    #     self.assertEqual(dem_str_values[171].value, "3 Ave (0.02 miles E)")
    #     self.assertEqual(dem_str_values[171].template_name, "traffic")
    #     self.assertEqual(dem_str_values[172].data_item_id, 740)
    #     self.assertEqual(dem_str_values[172].value, "University Pl")
    #     self.assertEqual(dem_str_values[172].template_name, "traffic")
    #     self.assertEqual(dem_str_values[173].data_item_id, 741)
    #     self.assertEqual(dem_str_values[173].value, "E 8 St (0.01 miles NE)")
    #     self.assertEqual(dem_str_values[173].template_name, "traffic")
    #     self.assertEqual(dem_str_values[174].data_item_id, 747)
    #     self.assertEqual(dem_str_values[174].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[174].template_name, "traffic")
    #     self.assertEqual(dem_str_values[175].data_item_id, 748)
    #     self.assertEqual(dem_str_values[175].value, "E 7 St (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[175].template_name, "traffic")
    #     self.assertEqual(dem_str_values[176].data_item_id, 754)
    #     self.assertEqual(dem_str_values[176].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[176].template_name, "traffic")
    #     self.assertEqual(dem_str_values[177].data_item_id, 755)
    #     self.assertEqual(dem_str_values[177].value, "E 6 St (0.01 miles SW)")
    #     self.assertEqual(dem_str_values[177].template_name, "traffic")
    #     self.assertEqual(dem_str_values[178].data_item_id, 761)
    #     self.assertEqual(dem_str_values[178].value, "W 4 St")
    #     self.assertEqual(dem_str_values[178].template_name, "traffic")
    #     self.assertEqual(dem_str_values[179].data_item_id, 762)
    #     self.assertEqual(dem_str_values[179].value, "Mercer St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[179].template_name, "traffic")
    #     self.assertEqual(dem_str_values[180].data_item_id, 768)
    #     self.assertEqual(dem_str_values[180].value, "St Marks Pl")
    #     self.assertEqual(dem_str_values[180].template_name, "traffic")
    #     self.assertEqual(dem_str_values[181].data_item_id, 769)
    #     self.assertEqual(dem_str_values[181].value, "2 Ave (0.13 miles SE)")
    #     self.assertEqual(dem_str_values[181].template_name, "traffic")
    #     self.assertEqual(dem_str_values[182].data_item_id, 775)
    #     self.assertEqual(dem_str_values[182].value, "Washington Pl")
    #     self.assertEqual(dem_str_values[182].template_name, "traffic")
    #     self.assertEqual(dem_str_values[183].data_item_id, 776)
    #     self.assertEqual(dem_str_values[183].value, "Washington Sq E (0.01 miles NW)")
    #     self.assertEqual(dem_str_values[183].template_name, "traffic")
    #     self.assertEqual(dem_str_values[184].data_item_id, 782)
    #     self.assertEqual(dem_str_values[184].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[184].template_name, "traffic")
    #     self.assertEqual(dem_str_values[185].data_item_id, 783)
    #     self.assertEqual(dem_str_values[185].value, "E 6 St (0.02 miles NE)")
    #     self.assertEqual(dem_str_values[185].template_name, "traffic")
    #     self.assertEqual(dem_str_values[186].data_item_id, 789)
    #     self.assertEqual(dem_str_values[186].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[186].template_name, "traffic")
    #     self.assertEqual(dem_str_values[187].data_item_id, 790)
    #     self.assertEqual(dem_str_values[187].value, "Stable Ct (0.03 miles S)")
    #     self.assertEqual(dem_str_values[187].template_name, "traffic")
    #     self.assertEqual(dem_str_values[188].data_item_id, 796)
    #     self.assertEqual(dem_str_values[188].value, "Stuyvesant St")
    #     self.assertEqual(dem_str_values[188].template_name, "traffic")
    #     self.assertEqual(dem_str_values[189].data_item_id, 797)
    #     self.assertEqual(dem_str_values[189].value, "3 Ave (0.01 miles W)")
    #     self.assertEqual(dem_str_values[189].template_name, "traffic")
    #     self.assertEqual(dem_str_values[190].data_item_id, 803)
    #     self.assertEqual(dem_str_values[190].value, "Lafayette St")
    #     self.assertEqual(dem_str_values[190].template_name, "traffic")
    #     self.assertEqual(dem_str_values[191].data_item_id, 804)
    #     self.assertEqual(dem_str_values[191].value, "Great Jones St (0.02 miles SW)")
    #     self.assertEqual(dem_str_values[191].template_name, "traffic")
    #     self.assertEqual(dem_str_values[192].data_item_id, 810)
    #     self.assertEqual(dem_str_values[192].value, "Great Jones St")
    #     self.assertEqual(dem_str_values[192].template_name, "traffic")
    #     self.assertEqual(dem_str_values[193].data_item_id, 811)
    #     self.assertEqual(dem_str_values[193].value, "Broadway (0.02 miles NW)")
    #     self.assertEqual(dem_str_values[193].template_name, "traffic")
    #     self.assertEqual(dem_str_values[194].data_item_id, 817)
    #     self.assertEqual(dem_str_values[194].value, "E 5 St")
    #     self.assertEqual(dem_str_values[194].template_name, "traffic")
    #     self.assertEqual(dem_str_values[195].data_item_id, 818)
    #     self.assertEqual(dem_str_values[195].value, "2 Ave (0.12 miles SE)")
    #     self.assertEqual(dem_str_values[195].template_name, "traffic")
    #     self.assertEqual(dem_str_values[196].data_item_id, 824)
    #     self.assertEqual(dem_str_values[196].value, "Great Jones St")
    #     self.assertEqual(dem_str_values[196].template_name, "traffic")
    #     self.assertEqual(dem_str_values[197].data_item_id, 825)
    #     self.assertEqual(dem_str_values[197].value, "Lafayette St (0.01 miles SE)")
    #     self.assertEqual(dem_str_values[197].template_name, "traffic")
    #     self.assertEqual(dem_str_values[198].data_item_id, 831)
    #     self.assertEqual(dem_str_values[198].value, "E 11 St")
    #     self.assertEqual(dem_str_values[198].template_name, "traffic")
    #     self.assertEqual(dem_str_values[199].data_item_id, 832)
    #     self.assertEqual(dem_str_values[199].value, "University Pl (0.06 miles NW)")
    #     self.assertEqual(dem_str_values[199].template_name, "traffic")
    #     self.assertEqual(dem_str_values[200].data_item_id, 838)
    #     self.assertEqual(dem_str_values[200].value, "4 Ave")
    #     self.assertEqual(dem_str_values[200].template_name, "traffic")
    #     self.assertEqual(dem_str_values[201].data_item_id, 839)
    #     self.assertEqual(dem_str_values[201].value, "E 11 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[201].template_name, "traffic")
    #     self.assertEqual(dem_str_values[202].data_item_id, 845)
    #     self.assertEqual(dem_str_values[202].value, "Cooper Sq")
    #     self.assertEqual(dem_str_values[202].template_name, "traffic")
    #     self.assertEqual(dem_str_values[203].data_item_id, 846)
    #     self.assertEqual(dem_str_values[203].value, "E 4 St (0.01 miles S)")
    #     self.assertEqual(dem_str_values[203].template_name, "traffic")
    #     self.assertEqual(dem_str_values[204].data_item_id, 852)
    #     self.assertEqual(dem_str_values[204].value, "W 3 St")
    #     self.assertEqual(dem_str_values[204].template_name, "traffic")
    #     self.assertEqual(dem_str_values[205].data_item_id, 853)
    #     self.assertEqual(dem_str_values[205].value, "Greene St (0.02 miles SE)")
    #     self.assertEqual(dem_str_values[205].template_name, "traffic")
    #
    #
    #     # verify all num values
    #     self.assertEqual(dem_num_values[0].data_item_id, 3)
    #     self.assertEqual(dem_num_values[0].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[0].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[1].data_item_id, 3)
    #     self.assertEqual(dem_num_values[1].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[1].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[2].data_item_id, 3)
    #     self.assertEqual(dem_num_values[2].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[2].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[3].data_item_id, 3)
    #     self.assertEqual(dem_num_values[3].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[3].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[4].data_item_id, 3)
    #     self.assertEqual(dem_num_values[4].value, SignalDecimal(0.000000000))
    #     self.assertEqual(dem_num_values[4].template_name, "traffic")
    #     self.assertEqual(dem_num_values[5].data_item_id, 4)
    #     self.assertEqual(dem_num_values[5].value, self._store_id)
    #     self.assertEqual(dem_num_values[5].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[6].data_item_id, 4)
    #     self.assertEqual(dem_num_values[6].value, self._store_id)
    #     self.assertEqual(dem_num_values[6].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[7].data_item_id, 4)
    #     self.assertEqual(dem_num_values[7].value, self._store_id)
    #     self.assertEqual(dem_num_values[7].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[8].data_item_id, 4)
    #     self.assertEqual(dem_num_values[8].value, self._store_id)
    #     self.assertEqual(dem_num_values[8].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[9].data_item_id, 4)
    #     self.assertEqual(dem_num_values[9].value, self._store_id)
    #     self.assertEqual(dem_num_values[9].template_name, "traffic")
    #     self.assertEqual(dem_num_values[10].data_item_id, 5)
    #     self.assertEqual(dem_num_values[10].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[10].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[11].data_item_id, 5)
    #     self.assertEqual(dem_num_values[11].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[11].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[12].data_item_id, 5)
    #     self.assertEqual(dem_num_values[12].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[12].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[13].data_item_id, 5)
    #     self.assertEqual(dem_num_values[13].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[13].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[14].data_item_id, 5)
    #     self.assertEqual(dem_num_values[14].value, SignalDecimal(1.000000000))
    #     self.assertEqual(dem_num_values[14].template_name, "traffic")
    #     self.assertEqual(dem_num_values[15].data_item_id, 7)
    #     self.assertEqual(dem_num_values[15].value, self._store_id)
    #     self.assertEqual(dem_num_values[15].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[16].data_item_id, 7)
    #     self.assertEqual(dem_num_values[16].value, self._store_id)
    #     self.assertEqual(dem_num_values[16].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[17].data_item_id, 7)
    #     self.assertEqual(dem_num_values[17].value, self._store_id)
    #     self.assertEqual(dem_num_values[17].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[18].data_item_id, 9)
    #     self.assertEqual(dem_num_values[18].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[18].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[19].data_item_id, 9)
    #     self.assertEqual(dem_num_values[19].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[19].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[20].data_item_id, 9)
    #     self.assertEqual(dem_num_values[20].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[20].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[21].data_item_id, 9)
    #     self.assertEqual(dem_num_values[21].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[21].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[22].data_item_id, 9)
    #     self.assertEqual(dem_num_values[22].value, SignalDecimal(40.730073000))
    #     self.assertEqual(dem_num_values[22].template_name, "traffic")
    #     self.assertEqual(dem_num_values[23].data_item_id, 10)
    #     self.assertEqual(dem_num_values[23].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[23].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[24].data_item_id, 10)
    #     self.assertEqual(dem_num_values[24].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[24].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[25].data_item_id, 10)
    #     self.assertEqual(dem_num_values[25].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[25].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[26].data_item_id, 10)
    #     self.assertEqual(dem_num_values[26].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[26].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[27].data_item_id, 10)
    #     self.assertEqual(dem_num_values[27].value, SignalDecimal(-73.992770000))
    #     self.assertEqual(dem_num_values[27].template_name, "traffic")
    #     self.assertEqual(dem_num_values[28].data_item_id, 12)
    #     self.assertEqual(dem_num_values[28].value, SignalDecimal(7191427.000000000))
    #     self.assertEqual(dem_num_values[28].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[29].data_item_id, 13)
    #     self.assertEqual(dem_num_values[29].value, SignalDecimal(7231497.000000000))
    #     self.assertEqual(dem_num_values[29].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[30].data_item_id, 13)
    #     self.assertEqual(dem_num_values[30].value, SignalDecimal(7231497.000000000))
    #     self.assertEqual(dem_num_values[30].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[31].data_item_id, 13)
    #     self.assertEqual(dem_num_values[31].value, SignalDecimal(7328832.000000000))
    #     self.assertEqual(dem_num_values[31].template_name, "traffic")
    #     self.assertEqual(dem_num_values[32].data_item_id, 14)
    #     self.assertEqual(dem_num_values[32].value, SignalDecimal(7350242.000000000))
    #     self.assertEqual(dem_num_values[32].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[33].data_item_id, 14)
    #     self.assertEqual(dem_num_values[33].value, SignalDecimal(7350242.000000000))
    #     self.assertEqual(dem_num_values[33].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[34].data_item_id, 14)
    #     self.assertEqual(dem_num_values[34].value, SignalDecimal(7463631.000000000))
    #     self.assertEqual(dem_num_values[34].template_name, "traffic")
    #     self.assertEqual(dem_num_values[35].data_item_id, 15)
    #     self.assertEqual(dem_num_values[35].value, SignalDecimal(2783132.000000000))
    #     self.assertEqual(dem_num_values[35].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[36].data_item_id, 16)
    #     self.assertEqual(dem_num_values[36].value, SignalDecimal(2798907.000000000))
    #     self.assertEqual(dem_num_values[36].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[37].data_item_id, 16)
    #     self.assertEqual(dem_num_values[37].value, SignalDecimal(2798907.000000000))
    #     self.assertEqual(dem_num_values[37].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[38].data_item_id, 17)
    #     self.assertEqual(dem_num_values[38].value, SignalDecimal(2853568.000000000))
    #     self.assertEqual(dem_num_values[38].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[39].data_item_id, 17)
    #     self.assertEqual(dem_num_values[39].value, SignalDecimal(2853568.000000000))
    #     self.assertEqual(dem_num_values[39].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[40].data_item_id, 18)
    #     self.assertEqual(dem_num_values[40].value, SignalDecimal(1603716.000000000))
    #     self.assertEqual(dem_num_values[40].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[41].data_item_id, 19)
    #     self.assertEqual(dem_num_values[41].value, SignalDecimal(1612849.000000000))
    #     self.assertEqual(dem_num_values[41].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[42].data_item_id, 19)
    #     self.assertEqual(dem_num_values[42].value, SignalDecimal(1612849.000000000))
    #     self.assertEqual(dem_num_values[42].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[43].data_item_id, 20)
    #     self.assertEqual(dem_num_values[43].value, SignalDecimal(1626283.000000000))
    #     self.assertEqual(dem_num_values[43].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[44].data_item_id, 20)
    #     self.assertEqual(dem_num_values[44].value, SignalDecimal(1626283.000000000))
    #     self.assertEqual(dem_num_values[44].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[45].data_item_id, 21)
    #     self.assertEqual(dem_num_values[45].value, SignalDecimal(2.530000000))
    #     self.assertEqual(dem_num_values[45].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[46].data_item_id, 22)
    #     self.assertEqual(dem_num_values[46].value, SignalDecimal(2.530000000))
    #     self.assertEqual(dem_num_values[46].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[47].data_item_id, 23)
    #     self.assertEqual(dem_num_values[47].value, SignalDecimal(2.520000000))
    #     self.assertEqual(dem_num_values[47].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[48].data_item_id, 24)
    #     self.assertEqual(dem_num_values[48].value, SignalDecimal(777354.000000000))
    #     self.assertEqual(dem_num_values[48].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[49].data_item_id, 25)
    #     self.assertEqual(dem_num_values[49].value, SignalDecimal(772455.000000000))
    #     self.assertEqual(dem_num_values[49].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[50].data_item_id, 26)
    #     self.assertEqual(dem_num_values[50].value, SignalDecimal(812367.000000000))
    #     self.assertEqual(dem_num_values[50].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[51].data_item_id, 27)
    #     self.assertEqual(dem_num_values[51].value, SignalDecimal(2005778.000000000))
    #     self.assertEqual(dem_num_values[51].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[52].data_item_id, 28)
    #     self.assertEqual(dem_num_values[52].value, SignalDecimal(2026452.000000000))
    #     self.assertEqual(dem_num_values[52].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[53].data_item_id, 29)
    #     self.assertEqual(dem_num_values[53].value, SignalDecimal(2041201.000000000))
    #     self.assertEqual(dem_num_values[53].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[54].data_item_id, 30)
    #     self.assertEqual(dem_num_values[54].value, SignalDecimal(34.900000000))
    #     self.assertEqual(dem_num_values[54].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[55].data_item_id, 31)
    #     self.assertEqual(dem_num_values[55].value, SignalDecimal(34.900000000))
    #     self.assertEqual(dem_num_values[55].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[56].data_item_id, 31)
    #     self.assertEqual(dem_num_values[56].value, SignalDecimal(34.900000000))
    #     self.assertEqual(dem_num_values[56].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[57].data_item_id, 32)
    #     self.assertEqual(dem_num_values[57].value, SignalDecimal(35.200000000))
    #     self.assertEqual(dem_num_values[57].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[58].data_item_id, 32)
    #     self.assertEqual(dem_num_values[58].value, SignalDecimal(35.200000000))
    #     self.assertEqual(dem_num_values[58].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[59].data_item_id, 33)
    #     self.assertEqual(dem_num_values[59].value, SignalDecimal(0.326000000))
    #     self.assertEqual(dem_num_values[59].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[60].data_item_id, 34)
    #     self.assertEqual(dem_num_values[60].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[60].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[61].data_item_id, 35)
    #     self.assertEqual(dem_num_values[61].value, SignalDecimal(0.670000000))
    #     self.assertEqual(dem_num_values[61].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[62].data_item_id, 36)
    #     self.assertEqual(dem_num_values[62].value, SignalDecimal(0.388000000))
    #     self.assertEqual(dem_num_values[62].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[63].data_item_id, 37)
    #     self.assertEqual(dem_num_values[63].value, SignalDecimal(0.280000000))
    #     self.assertEqual(dem_num_values[63].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[64].data_item_id, 38)
    #     self.assertEqual(dem_num_values[64].value, SignalDecimal(0.710000000))
    #     self.assertEqual(dem_num_values[64].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[65].data_item_id, 39)
    #     self.assertEqual(dem_num_values[65].value, SignalDecimal(0.166000000))
    #     self.assertEqual(dem_num_values[65].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[66].data_item_id, 40)
    #     self.assertEqual(dem_num_values[66].value, SignalDecimal(0.070000000))
    #     self.assertEqual(dem_num_values[66].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[67].data_item_id, 41)
    #     self.assertEqual(dem_num_values[67].value, SignalDecimal(0.570000000))
    #     self.assertEqual(dem_num_values[67].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[68].data_item_id, 42)
    #     self.assertEqual(dem_num_values[68].value, SignalDecimal(1.013000000))
    #     self.assertEqual(dem_num_values[68].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[69].data_item_id, 43)
    #     self.assertEqual(dem_num_values[69].value, SignalDecimal(0.650000000))
    #     self.assertEqual(dem_num_values[69].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[70].data_item_id, 44)
    #     self.assertEqual(dem_num_values[70].value, SignalDecimal(0.910000000))
    #     self.assertEqual(dem_num_values[70].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[71].data_item_id, 45)
    #     self.assertEqual(dem_num_values[71].value, SignalDecimal(3.857000000))
    #     self.assertEqual(dem_num_values[71].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[72].data_item_id, 46)
    #     self.assertEqual(dem_num_values[72].value, SignalDecimal(3.540000000))
    #     self.assertEqual(dem_num_values[72].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[73].data_item_id, 47)
    #     self.assertEqual(dem_num_values[73].value, SignalDecimal(2.750000000))
    #     self.assertEqual(dem_num_values[73].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[74].data_item_id, 48)
    #     self.assertEqual(dem_num_values[74].value, SignalDecimal(546976.000000000))
    #     self.assertEqual(dem_num_values[74].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[75].data_item_id, 49)
    #     self.assertEqual(dem_num_values[75].value, SignalDecimal(19.543000000))
    #     self.assertEqual(dem_num_values[75].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[76].data_item_id, 50)
    #     self.assertEqual(dem_num_values[76].value, SignalDecimal(538006.000000000))
    #     self.assertEqual(dem_num_values[76].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[77].data_item_id, 51)
    #     self.assertEqual(dem_num_values[77].value, SignalDecimal(18.854000000))
    #     self.assertEqual(dem_num_values[77].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[78].data_item_id, 52)
    #     self.assertEqual(dem_num_values[78].value, SignalDecimal(316067.000000000))
    #     self.assertEqual(dem_num_values[78].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[79].data_item_id, 53)
    #     self.assertEqual(dem_num_values[79].value, SignalDecimal(11.293000000))
    #     self.assertEqual(dem_num_values[79].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[80].data_item_id, 54)
    #     self.assertEqual(dem_num_values[80].value, SignalDecimal(257132.000000000))
    #     self.assertEqual(dem_num_values[80].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[81].data_item_id, 55)
    #     self.assertEqual(dem_num_values[81].value, SignalDecimal(9.011000000))
    #     self.assertEqual(dem_num_values[81].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[82].data_item_id, 56)
    #     self.assertEqual(dem_num_values[82].value, SignalDecimal(279223.000000000))
    #     self.assertEqual(dem_num_values[82].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[83].data_item_id, 57)
    #     self.assertEqual(dem_num_values[83].value, SignalDecimal(9.976000000))
    #     self.assertEqual(dem_num_values[83].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[84].data_item_id, 58)
    #     self.assertEqual(dem_num_values[84].value, SignalDecimal(228433.000000000))
    #     self.assertEqual(dem_num_values[84].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[85].data_item_id, 59)
    #     self.assertEqual(dem_num_values[85].value, SignalDecimal(8.005000000))
    #     self.assertEqual(dem_num_values[85].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[86].data_item_id, 60)
    #     self.assertEqual(dem_num_values[86].value, SignalDecimal(352219.000000000))
    #     self.assertEqual(dem_num_values[86].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[87].data_item_id, 61)
    #     self.assertEqual(dem_num_values[87].value, SignalDecimal(12.584000000))
    #     self.assertEqual(dem_num_values[87].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[88].data_item_id, 62)
    #     self.assertEqual(dem_num_values[88].value, SignalDecimal(303082.000000000))
    #     self.assertEqual(dem_num_values[88].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[89].data_item_id, 63)
    #     self.assertEqual(dem_num_values[89].value, SignalDecimal(10.621000000))
    #     self.assertEqual(dem_num_values[89].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[90].data_item_id, 64)
    #     self.assertEqual(dem_num_values[90].value, SignalDecimal(431496.000000000))
    #     self.assertEqual(dem_num_values[90].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[91].data_item_id, 65)
    #     self.assertEqual(dem_num_values[91].value, SignalDecimal(15.417000000))
    #     self.assertEqual(dem_num_values[91].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[92].data_item_id, 66)
    #     self.assertEqual(dem_num_values[92].value, SignalDecimal(424977.000000000))
    #     self.assertEqual(dem_num_values[92].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[93].data_item_id, 67)
    #     self.assertEqual(dem_num_values[93].value, SignalDecimal(14.893000000))
    #     self.assertEqual(dem_num_values[93].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[94].data_item_id, 68)
    #     self.assertEqual(dem_num_values[94].value, SignalDecimal(279747.000000000))
    #     self.assertEqual(dem_num_values[94].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[95].data_item_id, 69)
    #     self.assertEqual(dem_num_values[95].value, SignalDecimal(9.995000000))
    #     self.assertEqual(dem_num_values[95].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[96].data_item_id, 70)
    #     self.assertEqual(dem_num_values[96].value, SignalDecimal(380270.000000000))
    #     self.assertEqual(dem_num_values[96].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[97].data_item_id, 71)
    #     self.assertEqual(dem_num_values[97].value, SignalDecimal(13.326000000))
    #     self.assertEqual(dem_num_values[97].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[98].data_item_id, 72)
    #     self.assertEqual(dem_num_values[98].value, SignalDecimal(297439.000000000))
    #     self.assertEqual(dem_num_values[98].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[99].data_item_id, 73)
    #     self.assertEqual(dem_num_values[99].value, SignalDecimal(10.627000000))
    #     self.assertEqual(dem_num_values[99].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[100].data_item_id, 74)
    #     self.assertEqual(dem_num_values[100].value, SignalDecimal(372156.000000000))
    #     self.assertEqual(dem_num_values[100].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[101].data_item_id, 75)
    #     self.assertEqual(dem_num_values[101].value, SignalDecimal(13.042000000))
    #     self.assertEqual(dem_num_values[101].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[102].data_item_id, 76)
    #     self.assertEqual(dem_num_values[102].value, SignalDecimal(121503.000000000))
    #     self.assertEqual(dem_num_values[102].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[103].data_item_id, 77)
    #     self.assertEqual(dem_num_values[103].value, SignalDecimal(4.341000000))
    #     self.assertEqual(dem_num_values[103].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[104].data_item_id, 78)
    #     self.assertEqual(dem_num_values[104].value, SignalDecimal(153719.000000000))
    #     self.assertEqual(dem_num_values[104].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[105].data_item_id, 79)
    #     self.assertEqual(dem_num_values[105].value, SignalDecimal(5.387000000))
    #     self.assertEqual(dem_num_values[105].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[106].data_item_id, 80)
    #     self.assertEqual(dem_num_values[106].value, SignalDecimal(174180.000000000))
    #     self.assertEqual(dem_num_values[106].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[107].data_item_id, 81)
    #     self.assertEqual(dem_num_values[107].value, SignalDecimal(6.223000000))
    #     self.assertEqual(dem_num_values[107].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[108].data_item_id, 82)
    #     self.assertEqual(dem_num_values[108].value, SignalDecimal(195738.000000000))
    #     self.assertEqual(dem_num_values[108].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[109].data_item_id, 83)
    #     self.assertEqual(dem_num_values[109].value, SignalDecimal(6.860000000))
    #     self.assertEqual(dem_num_values[109].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[110].data_item_id, 84)
    #     self.assertEqual(dem_num_values[110].value, SignalDecimal(45018.000000000))
    #     self.assertEqual(dem_num_values[110].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[111].data_item_id, 84)
    #     self.assertEqual(dem_num_values[111].value, SignalDecimal(45018.000000000))
    #     self.assertEqual(dem_num_values[111].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[112].data_item_id, 85)
    #     self.assertEqual(dem_num_values[112].value, SignalDecimal(54397.000000000))
    #     self.assertEqual(dem_num_values[112].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[113].data_item_id, 85)
    #     self.assertEqual(dem_num_values[113].value, SignalDecimal(54397.000000000))
    #     self.assertEqual(dem_num_values[113].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[114].data_item_id, 86)
    #     self.assertEqual(dem_num_values[114].value, SignalDecimal(70309.000000000))
    #     self.assertEqual(dem_num_values[114].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[115].data_item_id, 87)
    #     self.assertEqual(dem_num_values[115].value, SignalDecimal(82793.000000000))
    #     self.assertEqual(dem_num_values[115].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[116].data_item_id, 88)
    #     self.assertEqual(dem_num_values[116].value, SignalDecimal(27899.000000000))
    #     self.assertEqual(dem_num_values[116].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[117].data_item_id, 89)
    #     self.assertEqual(dem_num_values[117].value, SignalDecimal(32840.000000000))
    #     self.assertEqual(dem_num_values[117].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[118].data_item_id, 90)
    #     self.assertEqual(dem_num_values[118].value, SignalDecimal(461394.000000000))
    #     self.assertEqual(dem_num_values[118].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[119].data_item_id, 91)
    #     self.assertEqual(dem_num_values[119].value, SignalDecimal(6.416000000))
    #     self.assertEqual(dem_num_values[119].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[120].data_item_id, 92)
    #     self.assertEqual(dem_num_values[120].value, SignalDecimal(457245.000000000))
    #     self.assertEqual(dem_num_values[120].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[121].data_item_id, 93)
    #     self.assertEqual(dem_num_values[121].value, SignalDecimal(6.323000000))
    #     self.assertEqual(dem_num_values[121].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[122].data_item_id, 94)
    #     self.assertEqual(dem_num_values[122].value, SignalDecimal(467942.000000000))
    #     self.assertEqual(dem_num_values[122].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[123].data_item_id, 95)
    #     self.assertEqual(dem_num_values[123].value, SignalDecimal(6.366000000))
    #     self.assertEqual(dem_num_values[123].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[124].data_item_id, 96)
    #     self.assertEqual(dem_num_values[124].value, SignalDecimal(405970.000000000))
    #     self.assertEqual(dem_num_values[124].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[125].data_item_id, 97)
    #     self.assertEqual(dem_num_values[125].value, SignalDecimal(5.645000000))
    #     self.assertEqual(dem_num_values[125].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[126].data_item_id, 98)
    #     self.assertEqual(dem_num_values[126].value, SignalDecimal(406724.000000000))
    #     self.assertEqual(dem_num_values[126].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[127].data_item_id, 99)
    #     self.assertEqual(dem_num_values[127].value, SignalDecimal(5.624000000))
    #     self.assertEqual(dem_num_values[127].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[128].data_item_id, 100)
    #     self.assertEqual(dem_num_values[128].value, SignalDecimal(409298.000000000))
    #     self.assertEqual(dem_num_values[128].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[129].data_item_id, 101)
    #     self.assertEqual(dem_num_values[129].value, SignalDecimal(5.568000000))
    #     self.assertEqual(dem_num_values[129].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[130].data_item_id, 102)
    #     self.assertEqual(dem_num_values[130].value, SignalDecimal(395723.000000000))
    #     self.assertEqual(dem_num_values[130].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[131].data_item_id, 103)
    #     self.assertEqual(dem_num_values[131].value, SignalDecimal(5.503000000))
    #     self.assertEqual(dem_num_values[131].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[132].data_item_id, 104)
    #     self.assertEqual(dem_num_values[132].value, SignalDecimal(397117.000000000))
    #     self.assertEqual(dem_num_values[132].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[133].data_item_id, 105)
    #     self.assertEqual(dem_num_values[133].value, SignalDecimal(5.491000000))
    #     self.assertEqual(dem_num_values[133].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[134].data_item_id, 106)
    #     self.assertEqual(dem_num_values[134].value, SignalDecimal(403918.000000000))
    #     self.assertEqual(dem_num_values[134].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[135].data_item_id, 107)
    #     self.assertEqual(dem_num_values[135].value, SignalDecimal(5.495000000))
    #     self.assertEqual(dem_num_values[135].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[136].data_item_id, 108)
    #     self.assertEqual(dem_num_values[136].value, SignalDecimal(453250.000000000))
    #     self.assertEqual(dem_num_values[136].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[137].data_item_id, 109)
    #     self.assertEqual(dem_num_values[137].value, SignalDecimal(6.303000000))
    #     self.assertEqual(dem_num_values[137].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[138].data_item_id, 110)
    #     self.assertEqual(dem_num_values[138].value, SignalDecimal(452986.000000000))
    #     self.assertEqual(dem_num_values[138].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[139].data_item_id, 111)
    #     self.assertEqual(dem_num_values[139].value, SignalDecimal(6.264000000))
    #     self.assertEqual(dem_num_values[139].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[140].data_item_id, 112)
    #     self.assertEqual(dem_num_values[140].value, SignalDecimal(429305.000000000))
    #     self.assertEqual(dem_num_values[140].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[141].data_item_id, 113)
    #     self.assertEqual(dem_num_values[141].value, SignalDecimal(5.841000000))
    #     self.assertEqual(dem_num_values[141].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[142].data_item_id, 114)
    #     self.assertEqual(dem_num_values[142].value, SignalDecimal(576294.000000000))
    #     self.assertEqual(dem_num_values[142].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[143].data_item_id, 115)
    #     self.assertEqual(dem_num_values[143].value, SignalDecimal(8.014000000))
    #     self.assertEqual(dem_num_values[143].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[144].data_item_id, 116)
    #     self.assertEqual(dem_num_values[144].value, SignalDecimal(581261.000000000))
    #     self.assertEqual(dem_num_values[144].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[145].data_item_id, 117)
    #     self.assertEqual(dem_num_values[145].value, SignalDecimal(8.038000000))
    #     self.assertEqual(dem_num_values[145].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[146].data_item_id, 118)
    #     self.assertEqual(dem_num_values[146].value, SignalDecimal(567923.000000000))
    #     self.assertEqual(dem_num_values[146].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[147].data_item_id, 119)
    #     self.assertEqual(dem_num_values[147].value, SignalDecimal(7.727000000))
    #     self.assertEqual(dem_num_values[147].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[148].data_item_id, 120)
    #     self.assertEqual(dem_num_values[148].value, SignalDecimal(1317460.000000000))
    #     self.assertEqual(dem_num_values[148].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[149].data_item_id, 121)
    #     self.assertEqual(dem_num_values[149].value, SignalDecimal(18.320000000))
    #     self.assertEqual(dem_num_values[149].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[150].data_item_id, 122)
    #     self.assertEqual(dem_num_values[150].value, SignalDecimal(1328977.000000000))
    #     self.assertEqual(dem_num_values[150].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[151].data_item_id, 123)
    #     self.assertEqual(dem_num_values[151].value, SignalDecimal(18.378000000))
    #     self.assertEqual(dem_num_values[151].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[152].data_item_id, 124)
    #     self.assertEqual(dem_num_values[152].value, SignalDecimal(1372794.000000000))
    #     self.assertEqual(dem_num_values[152].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[153].data_item_id, 125)
    #     self.assertEqual(dem_num_values[153].value, SignalDecimal(18.677000000))
    #     self.assertEqual(dem_num_values[153].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[154].data_item_id, 126)
    #     self.assertEqual(dem_num_values[154].value, SignalDecimal(1041539.000000000))
    #     self.assertEqual(dem_num_values[154].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[155].data_item_id, 127)
    #     self.assertEqual(dem_num_values[155].value, SignalDecimal(14.483000000))
    #     self.assertEqual(dem_num_values[155].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[156].data_item_id, 128)
    #     self.assertEqual(dem_num_values[156].value, SignalDecimal(1040892.000000000))
    #     self.assertEqual(dem_num_values[156].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[157].data_item_id, 129)
    #     self.assertEqual(dem_num_values[157].value, SignalDecimal(14.394000000))
    #     self.assertEqual(dem_num_values[157].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[158].data_item_id, 130)
    #     self.assertEqual(dem_num_values[158].value, SignalDecimal(1015698.000000000))
    #     self.assertEqual(dem_num_values[158].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[159].data_item_id, 131)
    #     self.assertEqual(dem_num_values[159].value, SignalDecimal(13.819000000))
    #     self.assertEqual(dem_num_values[159].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[160].data_item_id, 132)
    #     self.assertEqual(dem_num_values[160].value, SignalDecimal(953345.000000000))
    #     self.assertEqual(dem_num_values[160].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[161].data_item_id, 133)
    #     self.assertEqual(dem_num_values[161].value, SignalDecimal(13.257000000))
    #     self.assertEqual(dem_num_values[161].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[162].data_item_id, 134)
    #     self.assertEqual(dem_num_values[162].value, SignalDecimal(950890.000000000))
    #     self.assertEqual(dem_num_values[162].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[163].data_item_id, 135)
    #     self.assertEqual(dem_num_values[163].value, SignalDecimal(13.149000000))
    #     self.assertEqual(dem_num_values[163].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[164].data_item_id, 136)
    #     self.assertEqual(dem_num_values[164].value, SignalDecimal(880441.000000000))
    #     self.assertEqual(dem_num_values[164].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[165].data_item_id, 137)
    #     self.assertEqual(dem_num_values[165].value, SignalDecimal(11.978000000))
    #     self.assertEqual(dem_num_values[165].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[166].data_item_id, 138)
    #     self.assertEqual(dem_num_values[166].value, SignalDecimal(756439.000000000))
    #     self.assertEqual(dem_num_values[166].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[167].data_item_id, 139)
    #     self.assertEqual(dem_num_values[167].value, SignalDecimal(10.519000000))
    #     self.assertEqual(dem_num_values[167].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[168].data_item_id, 140)
    #     self.assertEqual(dem_num_values[168].value, SignalDecimal(769798.000000000))
    #     self.assertEqual(dem_num_values[168].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[169].data_item_id, 141)
    #     self.assertEqual(dem_num_values[169].value, SignalDecimal(10.645000000))
    #     self.assertEqual(dem_num_values[169].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[170].data_item_id, 142)
    #     self.assertEqual(dem_num_values[170].value, SignalDecimal(832108.000000000))
    #     self.assertEqual(dem_num_values[170].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[171].data_item_id, 143)
    #     self.assertEqual(dem_num_values[171].value, SignalDecimal(11.321000000))
    #     self.assertEqual(dem_num_values[171].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[172].data_item_id, 144)
    #     self.assertEqual(dem_num_values[172].value, SignalDecimal(448803.000000000))
    #     self.assertEqual(dem_num_values[172].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[173].data_item_id, 145)
    #     self.assertEqual(dem_num_values[173].value, SignalDecimal(6.241000000))
    #     self.assertEqual(dem_num_values[173].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[174].data_item_id, 146)
    #     self.assertEqual(dem_num_values[174].value, SignalDecimal(462517.000000000))
    #     self.assertEqual(dem_num_values[174].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[175].data_item_id, 147)
    #     self.assertEqual(dem_num_values[175].value, SignalDecimal(6.396000000))
    #     self.assertEqual(dem_num_values[175].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[176].data_item_id, 148)
    #     self.assertEqual(dem_num_values[176].value, SignalDecimal(567890.000000000))
    #     self.assertEqual(dem_num_values[176].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[177].data_item_id, 149)
    #     self.assertEqual(dem_num_values[177].value, SignalDecimal(7.726000000))
    #     self.assertEqual(dem_num_values[177].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[178].data_item_id, 150)
    #     self.assertEqual(dem_num_values[178].value, SignalDecimal(267645.000000000))
    #     self.assertEqual(dem_num_values[178].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[179].data_item_id, 151)
    #     self.assertEqual(dem_num_values[179].value, SignalDecimal(3.722000000))
    #     self.assertEqual(dem_num_values[179].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[180].data_item_id, 152)
    #     self.assertEqual(dem_num_values[180].value, SignalDecimal(268863.000000000))
    #     self.assertEqual(dem_num_values[180].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[181].data_item_id, 153)
    #     self.assertEqual(dem_num_values[181].value, SignalDecimal(3.718000000))
    #     self.assertEqual(dem_num_values[181].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[182].data_item_id, 154)
    #     self.assertEqual(dem_num_values[182].value, SignalDecimal(278076.000000000))
    #     self.assertEqual(dem_num_values[182].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[183].data_item_id, 155)
    #     self.assertEqual(dem_num_values[183].value, SignalDecimal(3.783000000))
    #     self.assertEqual(dem_num_values[183].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[184].data_item_id, 156)
    #     self.assertEqual(dem_num_values[184].value, SignalDecimal(113565.000000000))
    #     self.assertEqual(dem_num_values[184].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[185].data_item_id, 157)
    #     self.assertEqual(dem_num_values[185].value, SignalDecimal(1.579000000))
    #     self.assertEqual(dem_num_values[185].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[186].data_item_id, 158)
    #     self.assertEqual(dem_num_values[186].value, SignalDecimal(114226.000000000))
    #     self.assertEqual(dem_num_values[186].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[187].data_item_id, 159)
    #     self.assertEqual(dem_num_values[187].value, SignalDecimal(1.580000000))
    #     self.assertEqual(dem_num_values[187].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[188].data_item_id, 160)
    #     self.assertEqual(dem_num_values[188].value, SignalDecimal(124848.000000000))
    #     self.assertEqual(dem_num_values[188].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[189].data_item_id, 161)
    #     self.assertEqual(dem_num_values[189].value, SignalDecimal(1.699000000))
    #     self.assertEqual(dem_num_values[189].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[190].data_item_id, 162)
    #     self.assertEqual(dem_num_values[190].value, SignalDecimal(3310412.000000000))
    #     self.assertEqual(dem_num_values[190].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[191].data_item_id, 163)
    #     self.assertEqual(dem_num_values[191].value, SignalDecimal(46.033000000))
    #     self.assertEqual(dem_num_values[191].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[192].data_item_id, 164)
    #     self.assertEqual(dem_num_values[192].value, SignalDecimal(3329236.000000000))
    #     self.assertEqual(dem_num_values[192].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[193].data_item_id, 165)
    #     self.assertEqual(dem_num_values[193].value, SignalDecimal(46.038000000))
    #     self.assertEqual(dem_num_values[193].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[194].data_item_id, 166)
    #     self.assertEqual(dem_num_values[194].value, SignalDecimal(3370641.000000000))
    #     self.assertEqual(dem_num_values[194].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[195].data_item_id, 167)
    #     self.assertEqual(dem_num_values[195].value, SignalDecimal(45.858000000))
    #     self.assertEqual(dem_num_values[195].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[196].data_item_id, 168)
    #     self.assertEqual(dem_num_values[196].value, SignalDecimal(1597352.000000000))
    #     self.assertEqual(dem_num_values[196].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[197].data_item_id, 169)
    #     self.assertEqual(dem_num_values[197].value, SignalDecimal(22.212000000))
    #     self.assertEqual(dem_num_values[197].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[198].data_item_id, 170)
    #     self.assertEqual(dem_num_values[198].value, SignalDecimal(1604530.000000000))
    #     self.assertEqual(dem_num_values[198].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[199].data_item_id, 171)
    #     self.assertEqual(dem_num_values[199].value, SignalDecimal(22.188000000))
    #     self.assertEqual(dem_num_values[199].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[200].data_item_id, 172)
    #     self.assertEqual(dem_num_values[200].value, SignalDecimal(1603367.000000000))
    #     self.assertEqual(dem_num_values[200].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[201].data_item_id, 173)
    #     self.assertEqual(dem_num_values[201].value, SignalDecimal(21.814000000))
    #     self.assertEqual(dem_num_values[201].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[202].data_item_id, 174)
    #     self.assertEqual(dem_num_values[202].value, SignalDecimal(49550.000000000))
    #     self.assertEqual(dem_num_values[202].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[203].data_item_id, 175)
    #     self.assertEqual(dem_num_values[203].value, SignalDecimal(0.689000000))
    #     self.assertEqual(dem_num_values[203].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[204].data_item_id, 176)
    #     self.assertEqual(dem_num_values[204].value, SignalDecimal(49778.000000000))
    #     self.assertEqual(dem_num_values[204].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[205].data_item_id, 177)
    #     self.assertEqual(dem_num_values[205].value, SignalDecimal(0.688000000))
    #     self.assertEqual(dem_num_values[205].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[206].data_item_id, 178)
    #     self.assertEqual(dem_num_values[206].value, SignalDecimal(55405.000000000))
    #     self.assertEqual(dem_num_values[206].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[207].data_item_id, 179)
    #     self.assertEqual(dem_num_values[207].value, SignalDecimal(0.754000000))
    #     self.assertEqual(dem_num_values[207].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[208].data_item_id, 180)
    #     self.assertEqual(dem_num_values[208].value, SignalDecimal(967976.000000000))
    #     self.assertEqual(dem_num_values[208].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[209].data_item_id, 181)
    #     self.assertEqual(dem_num_values[209].value, SignalDecimal(13.460000000))
    #     self.assertEqual(dem_num_values[209].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[210].data_item_id, 182)
    #     self.assertEqual(dem_num_values[210].value, SignalDecimal(971466.000000000))
    #     self.assertEqual(dem_num_values[210].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[211].data_item_id, 183)
    #     self.assertEqual(dem_num_values[211].value, SignalDecimal(13.434000000))
    #     self.assertEqual(dem_num_values[211].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[212].data_item_id, 184)
    #     self.assertEqual(dem_num_values[212].value, SignalDecimal(1043459.000000000))
    #     self.assertEqual(dem_num_values[212].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[213].data_item_id, 185)
    #     self.assertEqual(dem_num_values[213].value, SignalDecimal(14.196000000))
    #     self.assertEqual(dem_num_values[213].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[214].data_item_id, 186)
    #     self.assertEqual(dem_num_values[214].value, SignalDecimal(4432.000000000))
    #     self.assertEqual(dem_num_values[214].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[215].data_item_id, 187)
    #     self.assertEqual(dem_num_values[215].value, SignalDecimal(0.062000000))
    #     self.assertEqual(dem_num_values[215].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[216].data_item_id, 188)
    #     self.assertEqual(dem_num_values[216].value, SignalDecimal(4423.000000000))
    #     self.assertEqual(dem_num_values[216].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[217].data_item_id, 189)
    #     self.assertEqual(dem_num_values[217].value, SignalDecimal(0.061000000))
    #     self.assertEqual(dem_num_values[217].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[218].data_item_id, 190)
    #     self.assertEqual(dem_num_values[218].value, SignalDecimal(4410.000000000))
    #     self.assertEqual(dem_num_values[218].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[219].data_item_id, 191)
    #     self.assertEqual(dem_num_values[219].value, SignalDecimal(0.060000000))
    #     self.assertEqual(dem_num_values[219].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[220].data_item_id, 192)
    #     self.assertEqual(dem_num_values[220].value, SignalDecimal(969067.000000000))
    #     self.assertEqual(dem_num_values[220].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[221].data_item_id, 193)
    #     self.assertEqual(dem_num_values[221].value, SignalDecimal(13.475000000))
    #     self.assertEqual(dem_num_values[221].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[222].data_item_id, 194)
    #     self.assertEqual(dem_num_values[222].value, SignalDecimal(977575.000000000))
    #     self.assertEqual(dem_num_values[222].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[223].data_item_id, 195)
    #     self.assertEqual(dem_num_values[223].value, SignalDecimal(13.518000000))
    #     self.assertEqual(dem_num_values[223].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[224].data_item_id, 196)
    #     self.assertEqual(dem_num_values[224].value, SignalDecimal(986108.000000000))
    #     self.assertEqual(dem_num_values[224].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[225].data_item_id, 197)
    #     self.assertEqual(dem_num_values[225].value, SignalDecimal(13.416000000))
    #     self.assertEqual(dem_num_values[225].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[226].data_item_id, 198)
    #     self.assertEqual(dem_num_values[226].value, SignalDecimal(292637.000000000))
    #     self.assertEqual(dem_num_values[226].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[227].data_item_id, 199)
    #     self.assertEqual(dem_num_values[227].value, SignalDecimal(4.069000000))
    #     self.assertEqual(dem_num_values[227].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[228].data_item_id, 200)
    #     self.assertEqual(dem_num_values[228].value, SignalDecimal(294488.000000000))
    #     self.assertEqual(dem_num_values[228].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[229].data_item_id, 201)
    #     self.assertEqual(dem_num_values[229].value, SignalDecimal(4.072000000))
    #     self.assertEqual(dem_num_values[229].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[230].data_item_id, 202)
    #     self.assertEqual(dem_num_values[230].value, SignalDecimal(286852.000000000))
    #     self.assertEqual(dem_num_values[230].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[231].data_item_id, 203)
    #     self.assertEqual(dem_num_values[231].value, SignalDecimal(3.903000000))
    #     self.assertEqual(dem_num_values[231].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[232].data_item_id, 204)
    #     self.assertEqual(dem_num_values[232].value, SignalDecimal(2217523.000000000))
    #     self.assertEqual(dem_num_values[232].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[233].data_item_id, 205)
    #     self.assertEqual(dem_num_values[233].value, SignalDecimal(30.836000000))
    #     self.assertEqual(dem_num_values[233].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[234].data_item_id, 206)
    #     self.assertEqual(dem_num_values[234].value, SignalDecimal(2237727.000000000))
    #     self.assertEqual(dem_num_values[234].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[235].data_item_id, 207)
    #     self.assertEqual(dem_num_values[235].value, SignalDecimal(30.944000000))
    #     self.assertEqual(dem_num_values[235].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[236].data_item_id, 208)
    #     self.assertEqual(dem_num_values[236].value, SignalDecimal(2316304.000000000))
    #     self.assertEqual(dem_num_values[236].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[237].data_item_id, 209)
    #     self.assertEqual(dem_num_values[237].value, SignalDecimal(31.513000000))
    #     self.assertEqual(dem_num_values[237].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[238].data_item_id, 210)
    #     self.assertEqual(dem_num_values[238].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[238].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[239].data_item_id, 211)
    #     self.assertEqual(dem_num_values[239].value, SignalDecimal(0.280000000))
    #     self.assertEqual(dem_num_values[239].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[240].data_item_id, 212)
    #     self.assertEqual(dem_num_values[240].value, SignalDecimal(0.070000000))
    #     self.assertEqual(dem_num_values[240].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[241].data_item_id, 213)
    #     self.assertEqual(dem_num_values[241].value, SignalDecimal(0.650000000))
    #     self.assertEqual(dem_num_values[241].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[242].data_item_id, 214)
    #     self.assertEqual(dem_num_values[242].value, SignalDecimal(3.540000000))
    #     self.assertEqual(dem_num_values[242].template_name, "Demographic and Income Profile")
    #     self.assertEqual(dem_num_values[243].data_item_id, 215)
    #     self.assertEqual(dem_num_values[243].value, SignalDecimal(235819.000000000))
    #     self.assertEqual(dem_num_values[243].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[244].data_item_id, 216)
    #     self.assertEqual(dem_num_values[244].value, SignalDecimal(207193.000000000))
    #     self.assertEqual(dem_num_values[244].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[245].data_item_id, 217)
    #     self.assertEqual(dem_num_values[245].value, SignalDecimal(201681.000000000))
    #     self.assertEqual(dem_num_values[245].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[246].data_item_id, 218)
    #     self.assertEqual(dem_num_values[246].value, SignalDecimal(230551.000000000))
    #     self.assertEqual(dem_num_values[246].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[247].data_item_id, 219)
    #     self.assertEqual(dem_num_values[247].value, SignalDecimal(282308.000000000))
    #     self.assertEqual(dem_num_values[247].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[248].data_item_id, 220)
    #     self.assertEqual(dem_num_values[248].value, SignalDecimal(333148.000000000))
    #     self.assertEqual(dem_num_values[248].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[249].data_item_id, 221)
    #     self.assertEqual(dem_num_values[249].value, SignalDecimal(308023.000000000))
    #     self.assertEqual(dem_num_values[249].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[250].data_item_id, 222)
    #     self.assertEqual(dem_num_values[250].value, SignalDecimal(267993.000000000))
    #     self.assertEqual(dem_num_values[250].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[251].data_item_id, 223)
    #     self.assertEqual(dem_num_values[251].value, SignalDecimal(247726.000000000))
    #     self.assertEqual(dem_num_values[251].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[252].data_item_id, 224)
    #     self.assertEqual(dem_num_values[252].value, SignalDecimal(238062.000000000))
    #     self.assertEqual(dem_num_values[252].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[253].data_item_id, 225)
    #     self.assertEqual(dem_num_values[253].value, SignalDecimal(220469.000000000))
    #     self.assertEqual(dem_num_values[253].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[254].data_item_id, 226)
    #     self.assertEqual(dem_num_values[254].value, SignalDecimal(187756.000000000))
    #     self.assertEqual(dem_num_values[254].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[255].data_item_id, 227)
    #     self.assertEqual(dem_num_values[255].value, SignalDecimal(157246.000000000))
    #     self.assertEqual(dem_num_values[255].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[256].data_item_id, 228)
    #     self.assertEqual(dem_num_values[256].value, SignalDecimal(109337.000000000))
    #     self.assertEqual(dem_num_values[256].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[257].data_item_id, 229)
    #     self.assertEqual(dem_num_values[257].value, SignalDecimal(83450.000000000))
    #     self.assertEqual(dem_num_values[257].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[258].data_item_id, 230)
    #     self.assertEqual(dem_num_values[258].value, SignalDecimal(60919.000000000))
    #     self.assertEqual(dem_num_values[258].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[259].data_item_id, 231)
    #     self.assertEqual(dem_num_values[259].value, SignalDecimal(43581.000000000))
    #     self.assertEqual(dem_num_values[259].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[260].data_item_id, 232)
    #     self.assertEqual(dem_num_values[260].value, SignalDecimal(34762.000000000))
    #     self.assertEqual(dem_num_values[260].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[261].data_item_id, 233)
    #     self.assertEqual(dem_num_values[261].value, SignalDecimal(2672772.000000000))
    #     self.assertEqual(dem_num_values[261].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[262].data_item_id, 234)
    #     self.assertEqual(dem_num_values[262].value, SignalDecimal(2522373.000000000))
    #     self.assertEqual(dem_num_values[262].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[263].data_item_id, 235)
    #     self.assertEqual(dem_num_values[263].value, SignalDecimal(33.800000000))
    #     self.assertEqual(dem_num_values[263].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[264].data_item_id, 236)
    #     self.assertEqual(dem_num_values[264].value, SignalDecimal(225575.000000000))
    #     self.assertEqual(dem_num_values[264].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[265].data_item_id, 237)
    #     self.assertEqual(dem_num_values[265].value, SignalDecimal(198777.000000000))
    #     self.assertEqual(dem_num_values[265].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[266].data_item_id, 238)
    #     self.assertEqual(dem_num_values[266].value, SignalDecimal(194042.000000000))
    #     self.assertEqual(dem_num_values[266].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[267].data_item_id, 239)
    #     self.assertEqual(dem_num_values[267].value, SignalDecimal(222699.000000000))
    #     self.assertEqual(dem_num_values[267].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[268].data_item_id, 240)
    #     self.assertEqual(dem_num_values[268].value, SignalDecimal(293987.000000000))
    #     self.assertEqual(dem_num_values[268].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[269].data_item_id, 241)
    #     self.assertEqual(dem_num_values[269].value, SignalDecimal(358988.000000000))
    #     self.assertEqual(dem_num_values[269].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[270].data_item_id, 242)
    #     self.assertEqual(dem_num_values[270].value, SignalDecimal(317300.000000000))
    #     self.assertEqual(dem_num_values[270].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[271].data_item_id, 243)
    #     self.assertEqual(dem_num_values[271].value, SignalDecimal(271631.000000000))
    #     self.assertEqual(dem_num_values[271].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[272].data_item_id, 244)
    #     self.assertEqual(dem_num_values[272].value, SignalDecimal(254188.000000000))
    #     self.assertEqual(dem_num_values[272].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[273].data_item_id, 245)
    #     self.assertEqual(dem_num_values[273].value, SignalDecimal(251309.000000000))
    #     self.assertEqual(dem_num_values[273].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[274].data_item_id, 246)
    #     self.assertEqual(dem_num_values[274].value, SignalDecimal(243505.000000000))
    #     self.assertEqual(dem_num_values[274].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[275].data_item_id, 247)
    #     self.assertEqual(dem_num_values[275].value, SignalDecimal(217897.000000000))
    #     self.assertEqual(dem_num_values[275].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[276].data_item_id, 248)
    #     self.assertEqual(dem_num_values[276].value, SignalDecimal(193540.000000000))
    #     self.assertEqual(dem_num_values[276].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[277].data_item_id, 249)
    #     self.assertEqual(dem_num_values[277].value, SignalDecimal(142107.000000000))
    #     self.assertEqual(dem_num_values[277].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[278].data_item_id, 250)
    #     self.assertEqual(dem_num_values[278].value, SignalDecimal(113908.000000000))
    #     self.assertEqual(dem_num_values[278].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[279].data_item_id, 251)
    #     self.assertEqual(dem_num_values[279].value, SignalDecimal(88928.000000000))
    #     self.assertEqual(dem_num_values[279].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[280].data_item_id, 252)
    #     self.assertEqual(dem_num_values[280].value, SignalDecimal(74218.000000000))
    #     self.assertEqual(dem_num_values[280].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[281].data_item_id, 253)
    #     self.assertEqual(dem_num_values[281].value, SignalDecimal(78803.000000000))
    #     self.assertEqual(dem_num_values[281].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[282].data_item_id, 254)
    #     self.assertEqual(dem_num_values[282].value, SignalDecimal(2996039.000000000))
    #     self.assertEqual(dem_num_values[282].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[283].data_item_id, 255)
    #     self.assertEqual(dem_num_values[283].value, SignalDecimal(2848595.000000000))
    #     self.assertEqual(dem_num_values[283].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[284].data_item_id, 256)
    #     self.assertEqual(dem_num_values[284].value, SignalDecimal(36.100000000))
    #     self.assertEqual(dem_num_values[284].template_name, "Nexus Age by Sex Report")
    #     self.assertEqual(dem_num_values[285].data_item_id, 258)
    #     self.assertEqual(dem_num_values[285].value, SignalDecimal(7215115.000000000))
    #     self.assertEqual(dem_num_values[285].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[286].data_item_id, 259)
    #     self.assertEqual(dem_num_values[286].value, SignalDecimal(28949.000000000))
    #     self.assertEqual(dem_num_values[286].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[287].data_item_id, 261)
    #     self.assertEqual(dem_num_values[287].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[287].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[288].data_item_id, 262)
    #     self.assertEqual(dem_num_values[288].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[288].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[289].data_item_id, 264)
    #     self.assertEqual(dem_num_values[289].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[289].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[290].data_item_id, 265)
    #     self.assertEqual(dem_num_values[290].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[290].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[291].data_item_id, 267)
    #     self.assertEqual(dem_num_values[291].value, SignalDecimal(819576.000000000))
    #     self.assertEqual(dem_num_values[291].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[292].data_item_id, 268)
    #     self.assertEqual(dem_num_values[292].value, SignalDecimal(5084.000000000))
    #     self.assertEqual(dem_num_values[292].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[293].data_item_id, 270)
    #     self.assertEqual(dem_num_values[293].value, SignalDecimal(3210.000000000))
    #     self.assertEqual(dem_num_values[293].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[294].data_item_id, 271)
    #     self.assertEqual(dem_num_values[294].value, SignalDecimal(392.000000000))
    #     self.assertEqual(dem_num_values[294].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[295].data_item_id, 273)
    #     self.assertEqual(dem_num_values[295].value, SignalDecimal(2105.000000000))
    #     self.assertEqual(dem_num_values[295].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[296].data_item_id, 274)
    #     self.assertEqual(dem_num_values[296].value, SignalDecimal(346.000000000))
    #     self.assertEqual(dem_num_values[296].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[297].data_item_id, 276)
    #     self.assertEqual(dem_num_values[297].value, SignalDecimal(2079.000000000))
    #     self.assertEqual(dem_num_values[297].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[298].data_item_id, 277)
    #     self.assertEqual(dem_num_values[298].value, SignalDecimal(303.000000000))
    #     self.assertEqual(dem_num_values[298].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[299].data_item_id, 279)
    #     self.assertEqual(dem_num_values[299].value, SignalDecimal(1841.000000000))
    #     self.assertEqual(dem_num_values[299].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[300].data_item_id, 280)
    #     self.assertEqual(dem_num_values[300].value, SignalDecimal(282.000000000))
    #     self.assertEqual(dem_num_values[300].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[301].data_item_id, 282)
    #     self.assertEqual(dem_num_values[301].value, SignalDecimal(1387.000000000))
    #     self.assertEqual(dem_num_values[301].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[302].data_item_id, 283)
    #     self.assertEqual(dem_num_values[302].value, SignalDecimal(290.000000000))
    #     self.assertEqual(dem_num_values[302].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[303].data_item_id, 285)
    #     self.assertEqual(dem_num_values[303].value, SignalDecimal(1692.000000000))
    #     self.assertEqual(dem_num_values[303].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[304].data_item_id, 286)
    #     self.assertEqual(dem_num_values[304].value, SignalDecimal(274.000000000))
    #     self.assertEqual(dem_num_values[304].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[305].data_item_id, 288)
    #     self.assertEqual(dem_num_values[305].value, SignalDecimal(1283.000000000))
    #     self.assertEqual(dem_num_values[305].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[306].data_item_id, 289)
    #     self.assertEqual(dem_num_values[306].value, SignalDecimal(210.000000000))
    #     self.assertEqual(dem_num_values[306].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[307].data_item_id, 291)
    #     self.assertEqual(dem_num_values[307].value, SignalDecimal(3033.000000000))
    #     self.assertEqual(dem_num_values[307].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[308].data_item_id, 292)
    #     self.assertEqual(dem_num_values[308].value, SignalDecimal(323.000000000))
    #     self.assertEqual(dem_num_values[308].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[309].data_item_id, 294)
    #     self.assertEqual(dem_num_values[309].value, SignalDecimal(4013.000000000))
    #     self.assertEqual(dem_num_values[309].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[310].data_item_id, 295)
    #     self.assertEqual(dem_num_values[310].value, SignalDecimal(399.000000000))
    #     self.assertEqual(dem_num_values[310].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[311].data_item_id, 297)
    #     self.assertEqual(dem_num_values[311].value, SignalDecimal(3309.000000000))
    #     self.assertEqual(dem_num_values[311].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[312].data_item_id, 298)
    #     self.assertEqual(dem_num_values[312].value, SignalDecimal(364.000000000))
    #     self.assertEqual(dem_num_values[312].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[313].data_item_id, 300)
    #     self.assertEqual(dem_num_values[313].value, SignalDecimal(3552.000000000))
    #     self.assertEqual(dem_num_values[313].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[314].data_item_id, 301)
    #     self.assertEqual(dem_num_values[314].value, SignalDecimal(392.000000000))
    #     self.assertEqual(dem_num_values[314].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[315].data_item_id, 303)
    #     self.assertEqual(dem_num_values[315].value, SignalDecimal(3617.000000000))
    #     self.assertEqual(dem_num_values[315].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[316].data_item_id, 304)
    #     self.assertEqual(dem_num_values[316].value, SignalDecimal(403.000000000))
    #     self.assertEqual(dem_num_values[316].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[317].data_item_id, 306)
    #     self.assertEqual(dem_num_values[317].value, SignalDecimal(3580.000000000))
    #     self.assertEqual(dem_num_values[317].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[318].data_item_id, 307)
    #     self.assertEqual(dem_num_values[318].value, SignalDecimal(393.000000000))
    #     self.assertEqual(dem_num_values[318].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[319].data_item_id, 309)
    #     self.assertEqual(dem_num_values[319].value, SignalDecimal(12067.000000000))
    #     self.assertEqual(dem_num_values[319].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[320].data_item_id, 310)
    #     self.assertEqual(dem_num_values[320].value, SignalDecimal(720.000000000))
    #     self.assertEqual(dem_num_values[320].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[321].data_item_id, 312)
    #     self.assertEqual(dem_num_values[321].value, SignalDecimal(9324.000000000))
    #     self.assertEqual(dem_num_values[321].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[322].data_item_id, 313)
    #     self.assertEqual(dem_num_values[322].value, SignalDecimal(638.000000000))
    #     self.assertEqual(dem_num_values[322].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[323].data_item_id, 315)
    #     self.assertEqual(dem_num_values[323].value, SignalDecimal(16666.000000000))
    #     self.assertEqual(dem_num_values[323].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[324].data_item_id, 316)
    #     self.assertEqual(dem_num_values[324].value, SignalDecimal(870.000000000))
    #     self.assertEqual(dem_num_values[324].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[325].data_item_id, 318)
    #     self.assertEqual(dem_num_values[325].value, SignalDecimal(15377.000000000))
    #     self.assertEqual(dem_num_values[325].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[326].data_item_id, 319)
    #     self.assertEqual(dem_num_values[326].value, SignalDecimal(806.000000000))
    #     self.assertEqual(dem_num_values[326].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[327].data_item_id, 321)
    #     self.assertEqual(dem_num_values[327].value, SignalDecimal(44504.000000000))
    #     self.assertEqual(dem_num_values[327].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[328].data_item_id, 322)
    #     self.assertEqual(dem_num_values[328].value, SignalDecimal(1367.000000000))
    #     self.assertEqual(dem_num_values[328].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[329].data_item_id, 324)
    #     self.assertEqual(dem_num_values[329].value, SignalDecimal(32789.000000000))
    #     self.assertEqual(dem_num_values[329].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[330].data_item_id, 325)
    #     self.assertEqual(dem_num_values[330].value, SignalDecimal(1227.000000000))
    #     self.assertEqual(dem_num_values[330].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[331].data_item_id, 327)
    #     self.assertEqual(dem_num_values[331].value, SignalDecimal(108131.000000000))
    #     self.assertEqual(dem_num_values[331].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[332].data_item_id, 328)
    #     self.assertEqual(dem_num_values[332].value, SignalDecimal(2116.000000000))
    #     self.assertEqual(dem_num_values[332].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[333].data_item_id, 330)
    #     self.assertEqual(dem_num_values[333].value, SignalDecimal(124258.000000000))
    #     self.assertEqual(dem_num_values[333].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[334].data_item_id, 331)
    #     self.assertEqual(dem_num_values[334].value, SignalDecimal(2288.000000000))
    #     self.assertEqual(dem_num_values[334].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[335].data_item_id, 333)
    #     self.assertEqual(dem_num_values[335].value, SignalDecimal(232818.000000000))
    #     self.assertEqual(dem_num_values[335].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[336].data_item_id, 334)
    #     self.assertEqual(dem_num_values[336].value, SignalDecimal(3048.000000000))
    #     self.assertEqual(dem_num_values[336].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[337].data_item_id, 336)
    #     self.assertEqual(dem_num_values[337].value, SignalDecimal(87240.000000000))
    #     self.assertEqual(dem_num_values[337].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[338].data_item_id, 337)
    #     self.assertEqual(dem_num_values[338].value, SignalDecimal(1970.000000000))
    #     self.assertEqual(dem_num_values[338].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[339].data_item_id, 339)
    #     self.assertEqual(dem_num_values[339].value, SignalDecimal(101699.000000000))
    #     self.assertEqual(dem_num_values[339].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[340].data_item_id, 340)
    #     self.assertEqual(dem_num_values[340].value, SignalDecimal(2100.000000000))
    #     self.assertEqual(dem_num_values[340].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[341].data_item_id, 342)
    #     self.assertEqual(dem_num_values[341].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[341].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[342].data_item_id, 343)
    #     self.assertEqual(dem_num_values[342].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[342].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[343].data_item_id, 344)
    #     self.assertEqual(dem_num_values[343].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[343].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[344].data_item_id, 345)
    #     self.assertEqual(dem_num_values[344].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[344].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[345].data_item_id, 346)
    #     self.assertEqual(dem_num_values[345].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[345].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[346].data_item_id, 347)
    #     self.assertEqual(dem_num_values[346].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[346].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[347].data_item_id, 348)
    #     self.assertEqual(dem_num_values[347].value, SignalDecimal(819576.000000000))
    #     self.assertEqual(dem_num_values[347].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[348].data_item_id, 349)
    #     self.assertEqual(dem_num_values[348].value, SignalDecimal(5084.000000000))
    #     self.assertEqual(dem_num_values[348].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[349].data_item_id, 351)
    #     self.assertEqual(dem_num_values[349].value, SignalDecimal(523425.000000000))
    #     self.assertEqual(dem_num_values[349].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[350].data_item_id, 352)
    #     self.assertEqual(dem_num_values[350].value, SignalDecimal(4452.000000000))
    #     self.assertEqual(dem_num_values[350].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[351].data_item_id, 354)
    #     self.assertEqual(dem_num_values[351].value, SignalDecimal(17867.000000000))
    #     self.assertEqual(dem_num_values[351].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[352].data_item_id, 355)
    #     self.assertEqual(dem_num_values[352].value, SignalDecimal(898.000000000))
    #     self.assertEqual(dem_num_values[352].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[353].data_item_id, 357)
    #     self.assertEqual(dem_num_values[353].value, SignalDecimal(76463.000000000))
    #     self.assertEqual(dem_num_values[353].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[354].data_item_id, 358)
    #     self.assertEqual(dem_num_values[354].value, SignalDecimal(1794.000000000))
    #     self.assertEqual(dem_num_values[354].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[355].data_item_id, 360)
    #     self.assertEqual(dem_num_values[355].value, SignalDecimal(5298.000000000))
    #     self.assertEqual(dem_num_values[355].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[356].data_item_id, 361)
    #     self.assertEqual(dem_num_values[356].value, SignalDecimal(529.000000000))
    #     self.assertEqual(dem_num_values[356].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[357].data_item_id, 363)
    #     self.assertEqual(dem_num_values[357].value, SignalDecimal(423797.000000000))
    #     self.assertEqual(dem_num_values[357].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[358].data_item_id, 364)
    #     self.assertEqual(dem_num_values[358].value, SignalDecimal(4153.000000000))
    #     self.assertEqual(dem_num_values[358].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[359].data_item_id, 366)
    #     self.assertEqual(dem_num_values[359].value, SignalDecimal(296151.000000000))
    #     self.assertEqual(dem_num_values[359].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[360].data_item_id, 367)
    #     self.assertEqual(dem_num_values[360].value, SignalDecimal(3292.000000000))
    #     self.assertEqual(dem_num_values[360].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[361].data_item_id, 369)
    #     self.assertEqual(dem_num_values[361].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[361].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[362].data_item_id, 370)
    #     self.assertEqual(dem_num_values[362].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[362].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[363].data_item_id, 371)
    #     self.assertEqual(dem_num_values[363].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[363].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[364].data_item_id, 372)
    #     self.assertEqual(dem_num_values[364].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[364].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[365].data_item_id, 373)
    #     self.assertEqual(dem_num_values[365].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[365].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[366].data_item_id, 374)
    #     self.assertEqual(dem_num_values[366].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[366].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[367].data_item_id, 375)
    #     self.assertEqual(dem_num_values[367].value, SignalDecimal(1888778.000000000))
    #     self.assertEqual(dem_num_values[367].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[368].data_item_id, 376)
    #     self.assertEqual(dem_num_values[368].value, SignalDecimal(7542.000000000))
    #     self.assertEqual(dem_num_values[368].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[369].data_item_id, 378)
    #     self.assertEqual(dem_num_values[369].value, SignalDecimal(1842588.000000000))
    #     self.assertEqual(dem_num_values[369].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[370].data_item_id, 379)
    #     self.assertEqual(dem_num_values[370].value, SignalDecimal(7496.000000000))
    #     self.assertEqual(dem_num_values[370].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[371].data_item_id, 381)
    #     self.assertEqual(dem_num_values[371].value, SignalDecimal(10411.000000000))
    #     self.assertEqual(dem_num_values[371].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[372].data_item_id, 382)
    #     self.assertEqual(dem_num_values[372].value, SignalDecimal(735.000000000))
    #     self.assertEqual(dem_num_values[372].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[373].data_item_id, 384)
    #     self.assertEqual(dem_num_values[373].value, SignalDecimal(22598.000000000))
    #     self.assertEqual(dem_num_values[373].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[374].data_item_id, 385)
    #     self.assertEqual(dem_num_values[374].value, SignalDecimal(1068.000000000))
    #     self.assertEqual(dem_num_values[374].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[375].data_item_id, 387)
    #     self.assertEqual(dem_num_values[375].value, SignalDecimal(45874.000000000))
    #     self.assertEqual(dem_num_values[375].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[376].data_item_id, 388)
    #     self.assertEqual(dem_num_values[376].value, SignalDecimal(1490.000000000))
    #     self.assertEqual(dem_num_values[376].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[377].data_item_id, 390)
    #     self.assertEqual(dem_num_values[377].value, SignalDecimal(51690.000000000))
    #     self.assertEqual(dem_num_values[377].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[378].data_item_id, 391)
    #     self.assertEqual(dem_num_values[378].value, SignalDecimal(1574.000000000))
    #     self.assertEqual(dem_num_values[378].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[379].data_item_id, 393)
    #     self.assertEqual(dem_num_values[379].value, SignalDecimal(30513.000000000))
    #     self.assertEqual(dem_num_values[379].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[380].data_item_id, 394)
    #     self.assertEqual(dem_num_values[380].value, SignalDecimal(1258.000000000))
    #     self.assertEqual(dem_num_values[380].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[381].data_item_id, 396)
    #     self.assertEqual(dem_num_values[381].value, SignalDecimal(31939.000000000))
    #     self.assertEqual(dem_num_values[381].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[382].data_item_id, 397)
    #     self.assertEqual(dem_num_values[382].value, SignalDecimal(1291.000000000))
    #     self.assertEqual(dem_num_values[382].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[383].data_item_id, 399)
    #     self.assertEqual(dem_num_values[383].value, SignalDecimal(30394.000000000))
    #     self.assertEqual(dem_num_values[383].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[384].data_item_id, 400)
    #     self.assertEqual(dem_num_values[384].value, SignalDecimal(1264.000000000))
    #     self.assertEqual(dem_num_values[384].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[385].data_item_id, 402)
    #     self.assertEqual(dem_num_values[385].value, SignalDecimal(34634.000000000))
    #     self.assertEqual(dem_num_values[385].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[386].data_item_id, 403)
    #     self.assertEqual(dem_num_values[386].value, SignalDecimal(1361.000000000))
    #     self.assertEqual(dem_num_values[386].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[387].data_item_id, 405)
    #     self.assertEqual(dem_num_values[387].value, SignalDecimal(36406.000000000))
    #     self.assertEqual(dem_num_values[387].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[388].data_item_id, 406)
    #     self.assertEqual(dem_num_values[388].value, SignalDecimal(1369.000000000))
    #     self.assertEqual(dem_num_values[388].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[389].data_item_id, 408)
    #     self.assertEqual(dem_num_values[389].value, SignalDecimal(60747.000000000))
    #     self.assertEqual(dem_num_values[389].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[390].data_item_id, 409)
    #     self.assertEqual(dem_num_values[390].value, SignalDecimal(1797.000000000))
    #     self.assertEqual(dem_num_values[390].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[391].data_item_id, 411)
    #     self.assertEqual(dem_num_values[391].value, SignalDecimal(52916.000000000))
    #     self.assertEqual(dem_num_values[391].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[392].data_item_id, 412)
    #     self.assertEqual(dem_num_values[392].value, SignalDecimal(1653.000000000))
    #     self.assertEqual(dem_num_values[392].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[393].data_item_id, 414)
    #     self.assertEqual(dem_num_values[393].value, SignalDecimal(67495.000000000))
    #     self.assertEqual(dem_num_values[393].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[394].data_item_id, 415)
    #     self.assertEqual(dem_num_values[394].value, SignalDecimal(1892.000000000))
    #     self.assertEqual(dem_num_values[394].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[395].data_item_id, 417)
    #     self.assertEqual(dem_num_values[395].value, SignalDecimal(73950.000000000))
    #     self.assertEqual(dem_num_values[395].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[396].data_item_id, 418)
    #     self.assertEqual(dem_num_values[396].value, SignalDecimal(1967.000000000))
    #     self.assertEqual(dem_num_values[396].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[397].data_item_id, 420)
    #     self.assertEqual(dem_num_values[397].value, SignalDecimal(78634.000000000))
    #     self.assertEqual(dem_num_values[397].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[398].data_item_id, 421)
    #     self.assertEqual(dem_num_values[398].value, SignalDecimal(2072.000000000))
    #     self.assertEqual(dem_num_values[398].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[399].data_item_id, 423)
    #     self.assertEqual(dem_num_values[399].value, SignalDecimal(79013.000000000))
    #     self.assertEqual(dem_num_values[399].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[400].data_item_id, 424)
    #     self.assertEqual(dem_num_values[400].value, SignalDecimal(2051.000000000))
    #     self.assertEqual(dem_num_values[400].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[401].data_item_id, 426)
    #     self.assertEqual(dem_num_values[401].value, SignalDecimal(158488.000000000))
    #     self.assertEqual(dem_num_values[401].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[402].data_item_id, 427)
    #     self.assertEqual(dem_num_values[402].value, SignalDecimal(2858.000000000))
    #     self.assertEqual(dem_num_values[402].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[403].data_item_id, 429)
    #     self.assertEqual(dem_num_values[403].value, SignalDecimal(168698.000000000))
    #     self.assertEqual(dem_num_values[403].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[404].data_item_id, 430)
    #     self.assertEqual(dem_num_values[404].value, SignalDecimal(3046.000000000))
    #     self.assertEqual(dem_num_values[404].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[405].data_item_id, 432)
    #     self.assertEqual(dem_num_values[405].value, SignalDecimal(294507.000000000))
    #     self.assertEqual(dem_num_values[405].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[406].data_item_id, 433)
    #     self.assertEqual(dem_num_values[406].value, SignalDecimal(3891.000000000))
    #     self.assertEqual(dem_num_values[406].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[407].data_item_id, 435)
    #     self.assertEqual(dem_num_values[407].value, SignalDecimal(175517.000000000))
    #     self.assertEqual(dem_num_values[407].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[408].data_item_id, 436)
    #     self.assertEqual(dem_num_values[408].value, SignalDecimal(3061.000000000))
    #     self.assertEqual(dem_num_values[408].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[409].data_item_id, 438)
    #     self.assertEqual(dem_num_values[409].value, SignalDecimal(174713.000000000))
    #     self.assertEqual(dem_num_values[409].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[410].data_item_id, 439)
    #     self.assertEqual(dem_num_values[410].value, SignalDecimal(3070.000000000))
    #     self.assertEqual(dem_num_values[410].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[411].data_item_id, 441)
    #     self.assertEqual(dem_num_values[411].value, SignalDecimal(163452.000000000))
    #     self.assertEqual(dem_num_values[411].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[412].data_item_id, 442)
    #     self.assertEqual(dem_num_values[412].value, SignalDecimal(2791.000000000))
    #     self.assertEqual(dem_num_values[412].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[413].data_item_id, 444)
    #     self.assertEqual(dem_num_values[413].value, SignalDecimal(46190.000000000))
    #     self.assertEqual(dem_num_values[413].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[414].data_item_id, 445)
    #     self.assertEqual(dem_num_values[414].value, SignalDecimal(1616.000000000))
    #     self.assertEqual(dem_num_values[414].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[415].data_item_id, 447)
    #     self.assertEqual(dem_num_values[415].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[415].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[416].data_item_id, 448)
    #     self.assertEqual(dem_num_values[416].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[416].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[417].data_item_id, 449)
    #     self.assertEqual(dem_num_values[417].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[417].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[418].data_item_id, 450)
    #     self.assertEqual(dem_num_values[418].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[418].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[419].data_item_id, 451)
    #     self.assertEqual(dem_num_values[419].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[419].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[420].data_item_id, 452)
    #     self.assertEqual(dem_num_values[420].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[420].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[421].data_item_id, 453)
    #     self.assertEqual(dem_num_values[421].value, SignalDecimal(1888778.000000000))
    #     self.assertEqual(dem_num_values[421].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[422].data_item_id, 454)
    #     self.assertEqual(dem_num_values[422].value, SignalDecimal(7542.000000000))
    #     self.assertEqual(dem_num_values[422].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[423].data_item_id, 456)
    #     self.assertEqual(dem_num_values[423].value, SignalDecimal(1524708.000000000))
    #     self.assertEqual(dem_num_values[423].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[424].data_item_id, 457)
    #     self.assertEqual(dem_num_values[424].value, SignalDecimal(7150.000000000))
    #     self.assertEqual(dem_num_values[424].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[425].data_item_id, 459)
    #     self.assertEqual(dem_num_values[425].value, SignalDecimal(364070.000000000))
    #     self.assertEqual(dem_num_values[425].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[426].data_item_id, 460)
    #     self.assertEqual(dem_num_values[426].value, SignalDecimal(3540.000000000))
    #     self.assertEqual(dem_num_values[426].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[427].data_item_id, 462)
    #     self.assertEqual(dem_num_values[427].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[427].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[428].data_item_id, 463)
    #     self.assertEqual(dem_num_values[428].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[428].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[429].data_item_id, 465)
    #     self.assertEqual(dem_num_values[429].value, SignalDecimal(199926.000000000))
    #     self.assertEqual(dem_num_values[429].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[430].data_item_id, 466)
    #     self.assertEqual(dem_num_values[430].value, SignalDecimal(2656.000000000))
    #     self.assertEqual(dem_num_values[430].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[431].data_item_id, 468)
    #     self.assertEqual(dem_num_values[431].value, SignalDecimal(173517.000000000))
    #     self.assertEqual(dem_num_values[431].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[432].data_item_id, 469)
    #     self.assertEqual(dem_num_values[432].value, SignalDecimal(2520.000000000))
    #     self.assertEqual(dem_num_values[432].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[433].data_item_id, 471)
    #     self.assertEqual(dem_num_values[433].value, SignalDecimal(403942.000000000))
    #     self.assertEqual(dem_num_values[433].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[434].data_item_id, 472)
    #     self.assertEqual(dem_num_values[434].value, SignalDecimal(4114.000000000))
    #     self.assertEqual(dem_num_values[434].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[435].data_item_id, 474)
    #     self.assertEqual(dem_num_values[435].value, SignalDecimal(330212.000000000))
    #     self.assertEqual(dem_num_values[435].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[436].data_item_id, 475)
    #     self.assertEqual(dem_num_values[436].value, SignalDecimal(3883.000000000))
    #     self.assertEqual(dem_num_values[436].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[437].data_item_id, 477)
    #     self.assertEqual(dem_num_values[437].value, SignalDecimal(246715.000000000))
    #     self.assertEqual(dem_num_values[437].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[438].data_item_id, 478)
    #     self.assertEqual(dem_num_values[438].value, SignalDecimal(3314.000000000))
    #     self.assertEqual(dem_num_values[438].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[439].data_item_id, 480)
    #     self.assertEqual(dem_num_values[439].value, SignalDecimal(223424.000000000))
    #     self.assertEqual(dem_num_values[439].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[440].data_item_id, 481)
    #     self.assertEqual(dem_num_values[440].value, SignalDecimal(3246.000000000))
    #     self.assertEqual(dem_num_values[440].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[441].data_item_id, 483)
    #     self.assertEqual(dem_num_values[441].value, SignalDecimal(488297.000000000))
    #     self.assertEqual(dem_num_values[441].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[442].data_item_id, 484)
    #     self.assertEqual(dem_num_values[442].value, SignalDecimal(4468.000000000))
    #     self.assertEqual(dem_num_values[442].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[443].data_item_id, 486)
    #     self.assertEqual(dem_num_values[443].value, SignalDecimal(904935.000000000))
    #     self.assertEqual(dem_num_values[443].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[444].data_item_id, 487)
    #     self.assertEqual(dem_num_values[444].value, SignalDecimal(5102.000000000))
    #     self.assertEqual(dem_num_values[444].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[445].data_item_id, 489)
    #     self.assertEqual(dem_num_values[445].value, SignalDecimal(3546.000000000))
    #     self.assertEqual(dem_num_values[445].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[446].data_item_id, 490)
    #     self.assertEqual(dem_num_values[446].value, SignalDecimal(456.000000000))
    #     self.assertEqual(dem_num_values[446].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[447].data_item_id, 492)
    #     self.assertEqual(dem_num_values[447].value, SignalDecimal(1837.000000000))
    #     self.assertEqual(dem_num_values[447].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[448].data_item_id, 493)
    #     self.assertEqual(dem_num_values[448].value, SignalDecimal(354.000000000))
    #     self.assertEqual(dem_num_values[448].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[449].data_item_id, 495)
    #     self.assertEqual(dem_num_values[449].value, SignalDecimal(2976350.000000000))
    #     self.assertEqual(dem_num_values[449].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[450].data_item_id, 496)
    #     self.assertEqual(dem_num_values[450].value, SignalDecimal(7886.000000000))
    #     self.assertEqual(dem_num_values[450].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[451].data_item_id, 498)
    #     self.assertEqual(dem_num_values[451].value, SignalDecimal(33182.000000000))
    #     self.assertEqual(dem_num_values[451].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[452].data_item_id, 499)
    #     self.assertEqual(dem_num_values[452].value, SignalDecimal(1212.000000000))
    #     self.assertEqual(dem_num_values[452].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[453].data_item_id, 501)
    #     self.assertEqual(dem_num_values[453].value, SignalDecimal(91977.000000000))
    #     self.assertEqual(dem_num_values[453].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[454].data_item_id, 502)
    #     self.assertEqual(dem_num_values[454].value, SignalDecimal(2024.000000000))
    #     self.assertEqual(dem_num_values[454].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[455].data_item_id, 504)
    #     self.assertEqual(dem_num_values[455].value, SignalDecimal(105411.000000000))
    #     self.assertEqual(dem_num_values[455].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[456].data_item_id, 505)
    #     self.assertEqual(dem_num_values[456].value, SignalDecimal(2251.000000000))
    #     self.assertEqual(dem_num_values[456].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[457].data_item_id, 507)
    #     self.assertEqual(dem_num_values[457].value, SignalDecimal(142461.000000000))
    #     self.assertEqual(dem_num_values[457].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[458].data_item_id, 508)
    #     self.assertEqual(dem_num_values[458].value, SignalDecimal(2526.000000000))
    #     self.assertEqual(dem_num_values[458].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[459].data_item_id, 510)
    #     self.assertEqual(dem_num_values[459].value, SignalDecimal(203664.000000000))
    #     self.assertEqual(dem_num_values[459].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[460].data_item_id, 511)
    #     self.assertEqual(dem_num_values[460].value, SignalDecimal(3024.000000000))
    #     self.assertEqual(dem_num_values[460].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[461].data_item_id, 513)
    #     self.assertEqual(dem_num_values[461].value, SignalDecimal(336280.000000000))
    #     self.assertEqual(dem_num_values[461].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[462].data_item_id, 514)
    #     self.assertEqual(dem_num_values[462].value, SignalDecimal(3775.000000000))
    #     self.assertEqual(dem_num_values[462].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[463].data_item_id, 516)
    #     self.assertEqual(dem_num_values[463].value, SignalDecimal(394290.000000000))
    #     self.assertEqual(dem_num_values[463].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[464].data_item_id, 517)
    #     self.assertEqual(dem_num_values[464].value, SignalDecimal(4170.000000000))
    #     self.assertEqual(dem_num_values[464].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[465].data_item_id, 519)
    #     self.assertEqual(dem_num_values[465].value, SignalDecimal(339567.000000000))
    #     self.assertEqual(dem_num_values[465].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[466].data_item_id, 520)
    #     self.assertEqual(dem_num_values[466].value, SignalDecimal(3978.000000000))
    #     self.assertEqual(dem_num_values[466].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[467].data_item_id, 522)
    #     self.assertEqual(dem_num_values[467].value, SignalDecimal(1329518.000000000))
    #     self.assertEqual(dem_num_values[467].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[468].data_item_id, 523)
    #     self.assertEqual(dem_num_values[468].value, SignalDecimal(6867.000000000))
    #     self.assertEqual(dem_num_values[468].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[469].data_item_id, 525)
    #     self.assertEqual(dem_num_values[469].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[469].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[470].data_item_id, 526)
    #     self.assertEqual(dem_num_values[470].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[470].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[471].data_item_id, 527)
    #     self.assertEqual(dem_num_values[471].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[471].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[472].data_item_id, 528)
    #     self.assertEqual(dem_num_values[472].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[472].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[473].data_item_id, 529)
    #     self.assertEqual(dem_num_values[473].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[473].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[474].data_item_id, 531)
    #     self.assertEqual(dem_num_values[474].value, SignalDecimal(117572.000000000))
    #     self.assertEqual(dem_num_values[474].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[475].data_item_id, 532)
    #     self.assertEqual(dem_num_values[475].value, SignalDecimal(2374.000000000))
    #     self.assertEqual(dem_num_values[475].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[476].data_item_id, 534)
    #     self.assertEqual(dem_num_values[476].value, SignalDecimal(192289.000000000))
    #     self.assertEqual(dem_num_values[476].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[477].data_item_id, 535)
    #     self.assertEqual(dem_num_values[477].value, SignalDecimal(2972.000000000))
    #     self.assertEqual(dem_num_values[477].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[478].data_item_id, 537)
    #     self.assertEqual(dem_num_values[478].value, SignalDecimal(216811.000000000))
    #     self.assertEqual(dem_num_values[478].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[479].data_item_id, 538)
    #     self.assertEqual(dem_num_values[479].value, SignalDecimal(3053.000000000))
    #     self.assertEqual(dem_num_values[479].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[480].data_item_id, 540)
    #     self.assertEqual(dem_num_values[480].value, SignalDecimal(121802.000000000))
    #     self.assertEqual(dem_num_values[480].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[481].data_item_id, 541)
    #     self.assertEqual(dem_num_values[481].value, SignalDecimal(2220.000000000))
    #     self.assertEqual(dem_num_values[481].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[482].data_item_id, 543)
    #     self.assertEqual(dem_num_values[482].value, SignalDecimal(85482.000000000))
    #     self.assertEqual(dem_num_values[482].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[483].data_item_id, 544)
    #     self.assertEqual(dem_num_values[483].value, SignalDecimal(1873.000000000))
    #     self.assertEqual(dem_num_values[483].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[484].data_item_id, 546)
    #     self.assertEqual(dem_num_values[484].value, SignalDecimal(85620.000000000))
    #     self.assertEqual(dem_num_values[484].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[485].data_item_id, 547)
    #     self.assertEqual(dem_num_values[485].value, SignalDecimal(1744.000000000))
    #     self.assertEqual(dem_num_values[485].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[486].data_item_id, 549)
    #     self.assertEqual(dem_num_values[486].value, SignalDecimal(573027.000000000))
    #     self.assertEqual(dem_num_values[486].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[487].data_item_id, 550)
    #     self.assertEqual(dem_num_values[487].value, SignalDecimal(5311.000000000))
    #     self.assertEqual(dem_num_values[487].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[488].data_item_id, 552)
    #     self.assertEqual(dem_num_values[488].value, SignalDecimal(528288.000000000))
    #     self.assertEqual(dem_num_values[488].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[489].data_item_id, 553)
    #     self.assertEqual(dem_num_values[489].value, SignalDecimal(5274.000000000))
    #     self.assertEqual(dem_num_values[489].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[490].data_item_id, 555)
    #     self.assertEqual(dem_num_values[490].value, SignalDecimal(408974.000000000))
    #     self.assertEqual(dem_num_values[490].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[491].data_item_id, 556)
    #     self.assertEqual(dem_num_values[491].value, SignalDecimal(4445.000000000))
    #     self.assertEqual(dem_num_values[491].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[492].data_item_id, 558)
    #     self.assertEqual(dem_num_values[492].value, SignalDecimal(162893.000000000))
    #     self.assertEqual(dem_num_values[492].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[493].data_item_id, 559)
    #     self.assertEqual(dem_num_values[493].value, SignalDecimal(2790.000000000))
    #     self.assertEqual(dem_num_values[493].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[494].data_item_id, 561)
    #     self.assertEqual(dem_num_values[494].value, SignalDecimal(137724.000000000))
    #     self.assertEqual(dem_num_values[494].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[495].data_item_id, 562)
    #     self.assertEqual(dem_num_values[495].value, SignalDecimal(2496.000000000))
    #     self.assertEqual(dem_num_values[495].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[496].data_item_id, 564)
    #     self.assertEqual(dem_num_values[496].value, SignalDecimal(77872.000000000))
    #     self.assertEqual(dem_num_values[496].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[497].data_item_id, 565)
    #     self.assertEqual(dem_num_values[497].value, SignalDecimal(1831.000000000))
    #     self.assertEqual(dem_num_values[497].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[498].data_item_id, 567)
    #     self.assertEqual(dem_num_values[498].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[498].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[499].data_item_id, 568)
    #     self.assertEqual(dem_num_values[499].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[499].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[500].data_item_id, 569)
    #     self.assertEqual(dem_num_values[500].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[500].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[501].data_item_id, 570)
    #     self.assertEqual(dem_num_values[501].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[501].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[502].data_item_id, 571)
    #     self.assertEqual(dem_num_values[502].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[502].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[503].data_item_id, 573)
    #     self.assertEqual(dem_num_values[503].value, SignalDecimal(1476015.000000000))
    #     self.assertEqual(dem_num_values[503].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[504].data_item_id, 574)
    #     self.assertEqual(dem_num_values[504].value, SignalDecimal(6989.000000000))
    #     self.assertEqual(dem_num_values[504].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[505].data_item_id, 576)
    #     self.assertEqual(dem_num_values[505].value, SignalDecimal(40503.000000000))
    #     self.assertEqual(dem_num_values[505].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[506].data_item_id, 577)
    #     self.assertEqual(dem_num_values[506].value, SignalDecimal(1253.000000000))
    #     self.assertEqual(dem_num_values[506].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[507].data_item_id, 579)
    #     self.assertEqual(dem_num_values[507].value, SignalDecimal(255970.000000000))
    #     self.assertEqual(dem_num_values[507].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[508].data_item_id, 580)
    #     self.assertEqual(dem_num_values[508].value, SignalDecimal(3330.000000000))
    #     self.assertEqual(dem_num_values[508].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[509].data_item_id, 582)
    #     self.assertEqual(dem_num_values[509].value, SignalDecimal(874239.000000000))
    #     self.assertEqual(dem_num_values[509].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[510].data_item_id, 583)
    #     self.assertEqual(dem_num_values[510].value, SignalDecimal(6124.000000000))
    #     self.assertEqual(dem_num_values[510].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[511].data_item_id, 585)
    #     self.assertEqual(dem_num_values[511].value, SignalDecimal(1914.000000000))
    #     self.assertEqual(dem_num_values[511].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[512].data_item_id, 586)
    #     self.assertEqual(dem_num_values[512].value, SignalDecimal(318.000000000))
    #     self.assertEqual(dem_num_values[512].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[513].data_item_id, 588)
    #     self.assertEqual(dem_num_values[513].value, SignalDecimal(1119.000000000))
    #     self.assertEqual(dem_num_values[513].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[514].data_item_id, 589)
    #     self.assertEqual(dem_num_values[514].value, SignalDecimal(253.000000000))
    #     self.assertEqual(dem_num_values[514].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[515].data_item_id, 591)
    #     self.assertEqual(dem_num_values[515].value, SignalDecimal(664.000000000))
    #     self.assertEqual(dem_num_values[515].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[516].data_item_id, 592)
    #     self.assertEqual(dem_num_values[516].value, SignalDecimal(158.000000000))
    #     self.assertEqual(dem_num_values[516].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[517].data_item_id, 594)
    #     self.assertEqual(dem_num_values[517].value, SignalDecimal(31127.000000000))
    #     self.assertEqual(dem_num_values[517].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[518].data_item_id, 595)
    #     self.assertEqual(dem_num_values[518].value, SignalDecimal(1169.000000000))
    #     self.assertEqual(dem_num_values[518].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[519].data_item_id, 597)
    #     self.assertEqual(dem_num_values[519].value, SignalDecimal(26804.000000000))
    #     self.assertEqual(dem_num_values[519].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[520].data_item_id, 598)
    #     self.assertEqual(dem_num_values[520].value, SignalDecimal(1132.000000000))
    #     self.assertEqual(dem_num_values[520].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[521].data_item_id, 600)
    #     self.assertEqual(dem_num_values[521].value, SignalDecimal(2708354.000000000))
    #     self.assertEqual(dem_num_values[521].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[522].data_item_id, 601)
    #     self.assertEqual(dem_num_values[522].value, SignalDecimal(7904.000000000))
    #     self.assertEqual(dem_num_values[522].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[523].data_item_id, 603)
    #     self.assertEqual(dem_num_values[523].value, SignalDecimal(244806.000000000))
    #     self.assertEqual(dem_num_values[523].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[524].data_item_id, 604)
    #     self.assertEqual(dem_num_values[524].value, SignalDecimal(3159.000000000))
    #     self.assertEqual(dem_num_values[524].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[525].data_item_id, 606)
    #     self.assertEqual(dem_num_values[525].value, SignalDecimal(353838.000000000))
    #     self.assertEqual(dem_num_values[525].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[526].data_item_id, 607)
    #     self.assertEqual(dem_num_values[526].value, SignalDecimal(3769.000000000))
    #     self.assertEqual(dem_num_values[526].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[527].data_item_id, 609)
    #     self.assertEqual(dem_num_values[527].value, SignalDecimal(166262.000000000))
    #     self.assertEqual(dem_num_values[527].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[528].data_item_id, 610)
    #     self.assertEqual(dem_num_values[528].value, SignalDecimal(2590.000000000))
    #     self.assertEqual(dem_num_values[528].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[529].data_item_id, 612)
    #     self.assertEqual(dem_num_values[529].value, SignalDecimal(40622.000000000))
    #     self.assertEqual(dem_num_values[529].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[530].data_item_id, 613)
    #     self.assertEqual(dem_num_values[530].value, SignalDecimal(1286.000000000))
    #     self.assertEqual(dem_num_values[530].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[531].data_item_id, 615)
    #     self.assertEqual(dem_num_values[531].value, SignalDecimal(10673.000000000))
    #     self.assertEqual(dem_num_values[531].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[532].data_item_id, 616)
    #     self.assertEqual(dem_num_values[532].value, SignalDecimal(660.000000000))
    #     self.assertEqual(dem_num_values[532].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[533].data_item_id, 618)
    #     self.assertEqual(dem_num_values[533].value, SignalDecimal(3375.000000000))
    #     self.assertEqual(dem_num_values[533].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[534].data_item_id, 619)
    #     self.assertEqual(dem_num_values[534].value, SignalDecimal(389.000000000))
    #     self.assertEqual(dem_num_values[534].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[535].data_item_id, 621)
    #     self.assertEqual(dem_num_values[535].value, SignalDecimal(1269451.000000000))
    #     self.assertEqual(dem_num_values[535].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[536].data_item_id, 622)
    #     self.assertEqual(dem_num_values[536].value, SignalDecimal(6767.000000000))
    #     self.assertEqual(dem_num_values[536].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[537].data_item_id, 624)
    #     self.assertEqual(dem_num_values[537].value, SignalDecimal(506407.000000000))
    #     self.assertEqual(dem_num_values[537].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[538].data_item_id, 625)
    #     self.assertEqual(dem_num_values[538].value, SignalDecimal(5019.000000000))
    #     self.assertEqual(dem_num_values[538].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[539].data_item_id, 627)
    #     self.assertEqual(dem_num_values[539].value, SignalDecimal(97031.000000000))
    #     self.assertEqual(dem_num_values[539].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[540].data_item_id, 628)
    #     self.assertEqual(dem_num_values[540].value, SignalDecimal(2325.000000000))
    #     self.assertEqual(dem_num_values[540].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[541].data_item_id, 630)
    #     self.assertEqual(dem_num_values[541].value, SignalDecimal(11450.000000000))
    #     self.assertEqual(dem_num_values[541].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[542].data_item_id, 631)
    #     self.assertEqual(dem_num_values[542].value, SignalDecimal(825.000000000))
    #     self.assertEqual(dem_num_values[542].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[543].data_item_id, 633)
    #     self.assertEqual(dem_num_values[543].value, SignalDecimal(2152.000000000))
    #     self.assertEqual(dem_num_values[543].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[544].data_item_id, 634)
    #     self.assertEqual(dem_num_values[544].value, SignalDecimal(329.000000000))
    #     self.assertEqual(dem_num_values[544].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[545].data_item_id, 636)
    #     self.assertEqual(dem_num_values[545].value, SignalDecimal(2287.000000000))
    #     self.assertEqual(dem_num_values[545].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[546].data_item_id, 637)
    #     self.assertEqual(dem_num_values[546].value, SignalDecimal(302.000000000))
    #     self.assertEqual(dem_num_values[546].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[547].data_item_id, 639)
    #     self.assertEqual(dem_num_values[547].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[547].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[548].data_item_id, 640)
    #     self.assertEqual(dem_num_values[548].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[548].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[549].data_item_id, 641)
    #     self.assertEqual(dem_num_values[549].value, SignalDecimal(-1.000000000))
    #     self.assertEqual(dem_num_values[549].template_name, "acs_housing")
    #     self.assertEqual(dem_num_values[550].data_item_id, 642)
    #     self.assertEqual(dem_num_values[550].value, SignalDecimal(7014508.000000000))
    #     self.assertEqual(dem_num_values[550].template_name, "traffic")
    #     self.assertEqual(dem_num_values[551].data_item_id, 645)
    #     self.assertEqual(dem_num_values[551].value, SignalDecimal(3559476.000000000))
    #     self.assertEqual(dem_num_values[551].template_name, "traffic")
    #     self.assertEqual(dem_num_values[552].data_item_id, 646)
    #     self.assertEqual(dem_num_values[552].value, SignalDecimal(669785698.000000000))
    #     self.assertEqual(dem_num_values[552].template_name, "traffic")
    #     self.assertEqual(dem_num_values[553].data_item_id, 647)
    #     self.assertEqual(dem_num_values[553].value, SignalDecimal(0.040000000))
    #     self.assertEqual(dem_num_values[553].template_name, "traffic")
    #     self.assertEqual(dem_num_values[554].data_item_id, 648)
    #     self.assertEqual(dem_num_values[554].value, SignalDecimal(40.729959000))
    #     self.assertEqual(dem_num_values[554].template_name, "traffic")
    #     self.assertEqual(dem_num_values[555].data_item_id, 651)
    #     self.assertEqual(dem_num_values[555].value, SignalDecimal(-73.992102000))
    #     self.assertEqual(dem_num_values[555].template_name, "traffic")
    #     self.assertEqual(dem_num_values[556].data_item_id, 652)
    #     self.assertEqual(dem_num_values[556].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[556].template_name, "traffic")
    #     self.assertEqual(dem_num_values[557].data_item_id, 653)
    #     self.assertEqual(dem_num_values[557].value, SignalDecimal(4860.000000000))
    #     self.assertEqual(dem_num_values[557].template_name, "traffic")
    #     self.assertEqual(dem_num_values[558].data_item_id, 654)
    #     self.assertEqual(dem_num_values[558].value, SignalDecimal(0.060000000))
    #     self.assertEqual(dem_num_values[558].template_name, "traffic")
    #     self.assertEqual(dem_num_values[559].data_item_id, 655)
    #     self.assertEqual(dem_num_values[559].value, SignalDecimal(40.730320000))
    #     self.assertEqual(dem_num_values[559].template_name, "traffic")
    #     self.assertEqual(dem_num_values[560].data_item_id, 658)
    #     self.assertEqual(dem_num_values[560].value, SignalDecimal(-73.991749000))
    #     self.assertEqual(dem_num_values[560].template_name, "traffic")
    #     self.assertEqual(dem_num_values[561].data_item_id, 659)
    #     self.assertEqual(dem_num_values[561].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[561].template_name, "traffic")
    #     self.assertEqual(dem_num_values[562].data_item_id, 660)
    #     self.assertEqual(dem_num_values[562].value, SignalDecimal(7105.000000000))
    #     self.assertEqual(dem_num_values[562].template_name, "traffic")
    #     self.assertEqual(dem_num_values[563].data_item_id, 661)
    #     self.assertEqual(dem_num_values[563].value, SignalDecimal(0.060000000))
    #     self.assertEqual(dem_num_values[563].template_name, "traffic")
    #     self.assertEqual(dem_num_values[564].data_item_id, 662)
    #     self.assertEqual(dem_num_values[564].value, SignalDecimal(40.729327000))
    #     self.assertEqual(dem_num_values[564].template_name, "traffic")
    #     self.assertEqual(dem_num_values[565].data_item_id, 665)
    #     self.assertEqual(dem_num_values[565].value, SignalDecimal(-73.993479000))
    #     self.assertEqual(dem_num_values[565].template_name, "traffic")
    #     self.assertEqual(dem_num_values[566].data_item_id, 666)
    #     self.assertEqual(dem_num_values[566].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[566].template_name, "traffic")
    #     self.assertEqual(dem_num_values[567].data_item_id, 667)
    #     self.assertEqual(dem_num_values[567].value, SignalDecimal(22338.000000000))
    #     self.assertEqual(dem_num_values[567].template_name, "traffic")
    #     self.assertEqual(dem_num_values[568].data_item_id, 668)
    #     self.assertEqual(dem_num_values[568].value, SignalDecimal(0.080000000))
    #     self.assertEqual(dem_num_values[568].template_name, "traffic")
    #     self.assertEqual(dem_num_values[569].data_item_id, 669)
    #     self.assertEqual(dem_num_values[569].value, SignalDecimal(40.729940000))
    #     self.assertEqual(dem_num_values[569].template_name, "traffic")
    #     self.assertEqual(dem_num_values[570].data_item_id, 672)
    #     self.assertEqual(dem_num_values[570].value, SignalDecimal(-73.991254000))
    #     self.assertEqual(dem_num_values[570].template_name, "traffic")
    #     self.assertEqual(dem_num_values[571].data_item_id, 673)
    #     self.assertEqual(dem_num_values[571].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[571].template_name, "traffic")
    #     self.assertEqual(dem_num_values[572].data_item_id, 674)
    #     self.assertEqual(dem_num_values[572].value, SignalDecimal(17797.000000000))
    #     self.assertEqual(dem_num_values[572].template_name, "traffic")
    #     self.assertEqual(dem_num_values[573].data_item_id, 675)
    #     self.assertEqual(dem_num_values[573].value, SignalDecimal(0.090000000))
    #     self.assertEqual(dem_num_values[573].template_name, "traffic")
    #     self.assertEqual(dem_num_values[574].data_item_id, 676)
    #     self.assertEqual(dem_num_values[574].value, SignalDecimal(40.729794000))
    #     self.assertEqual(dem_num_values[574].template_name, "traffic")
    #     self.assertEqual(dem_num_values[575].data_item_id, 679)
    #     self.assertEqual(dem_num_values[575].value, SignalDecimal(-73.991084000))
    #     self.assertEqual(dem_num_values[575].template_name, "traffic")
    #     self.assertEqual(dem_num_values[576].data_item_id, 680)
    #     self.assertEqual(dem_num_values[576].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[576].template_name, "traffic")
    #     self.assertEqual(dem_num_values[577].data_item_id, 681)
    #     self.assertEqual(dem_num_values[577].value, SignalDecimal(6892.000000000))
    #     self.assertEqual(dem_num_values[577].template_name, "traffic")
    #     self.assertEqual(dem_num_values[578].data_item_id, 682)
    #     self.assertEqual(dem_num_values[578].value, SignalDecimal(0.090000000))
    #     self.assertEqual(dem_num_values[578].template_name, "traffic")
    #     self.assertEqual(dem_num_values[579].data_item_id, 683)
    #     self.assertEqual(dem_num_values[579].value, SignalDecimal(40.728758000))
    #     self.assertEqual(dem_num_values[579].template_name, "traffic")
    #     self.assertEqual(dem_num_values[580].data_item_id, 686)
    #     self.assertEqual(dem_num_values[580].value, SignalDecimal(-73.992373000))
    #     self.assertEqual(dem_num_values[580].template_name, "traffic")
    #     self.assertEqual(dem_num_values[581].data_item_id, 687)
    #     self.assertEqual(dem_num_values[581].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[581].template_name, "traffic")
    #     self.assertEqual(dem_num_values[582].data_item_id, 688)
    #     self.assertEqual(dem_num_values[582].value, SignalDecimal(18700.000000000))
    #     self.assertEqual(dem_num_values[582].template_name, "traffic")
    #     self.assertEqual(dem_num_values[583].data_item_id, 689)
    #     self.assertEqual(dem_num_values[583].value, SignalDecimal(0.100000000))
    #     self.assertEqual(dem_num_values[583].template_name, "traffic")
    #     self.assertEqual(dem_num_values[584].data_item_id, 690)
    #     self.assertEqual(dem_num_values[584].value, SignalDecimal(40.730909000))
    #     self.assertEqual(dem_num_values[584].template_name, "traffic")
    #     self.assertEqual(dem_num_values[585].data_item_id, 693)
    #     self.assertEqual(dem_num_values[585].value, SignalDecimal(-73.991315000))
    #     self.assertEqual(dem_num_values[585].template_name, "traffic")
    #     self.assertEqual(dem_num_values[586].data_item_id, 694)
    #     self.assertEqual(dem_num_values[586].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[586].template_name, "traffic")
    #     self.assertEqual(dem_num_values[587].data_item_id, 695)
    #     self.assertEqual(dem_num_values[587].value, SignalDecimal(10250.000000000))
    #     self.assertEqual(dem_num_values[587].template_name, "traffic")
    #     self.assertEqual(dem_num_values[588].data_item_id, 696)
    #     self.assertEqual(dem_num_values[588].value, SignalDecimal(0.100000000))
    #     self.assertEqual(dem_num_values[588].template_name, "traffic")
    #     self.assertEqual(dem_num_values[589].data_item_id, 697)
    #     self.assertEqual(dem_num_values[589].value, SignalDecimal(40.729964000))
    #     self.assertEqual(dem_num_values[589].template_name, "traffic")
    #     self.assertEqual(dem_num_values[590].data_item_id, 700)
    #     self.assertEqual(dem_num_values[590].value, SignalDecimal(-73.990886000))
    #     self.assertEqual(dem_num_values[590].template_name, "traffic")
    #     self.assertEqual(dem_num_values[591].data_item_id, 701)
    #     self.assertEqual(dem_num_values[591].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[591].template_name, "traffic")
    #     self.assertEqual(dem_num_values[592].data_item_id, 702)
    #     self.assertEqual(dem_num_values[592].value, SignalDecimal(6202.000000000))
    #     self.assertEqual(dem_num_values[592].template_name, "traffic")
    #     self.assertEqual(dem_num_values[593].data_item_id, 703)
    #     self.assertEqual(dem_num_values[593].value, SignalDecimal(0.110000000))
    #     self.assertEqual(dem_num_values[593].template_name, "traffic")
    #     self.assertEqual(dem_num_values[594].data_item_id, 704)
    #     self.assertEqual(dem_num_values[594].value, SignalDecimal(40.729348000))
    #     self.assertEqual(dem_num_values[594].template_name, "traffic")
    #     self.assertEqual(dem_num_values[595].data_item_id, 707)
    #     self.assertEqual(dem_num_values[595].value, SignalDecimal(-73.990870000))
    #     self.assertEqual(dem_num_values[595].template_name, "traffic")
    #     self.assertEqual(dem_num_values[596].data_item_id, 708)
    #     self.assertEqual(dem_num_values[596].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[596].template_name, "traffic")
    #     self.assertEqual(dem_num_values[597].data_item_id, 709)
    #     self.assertEqual(dem_num_values[597].value, SignalDecimal(5674.000000000))
    #     self.assertEqual(dem_num_values[597].template_name, "traffic")
    #     self.assertEqual(dem_num_values[598].data_item_id, 710)
    #     self.assertEqual(dem_num_values[598].value, SignalDecimal(0.120000000))
    #     self.assertEqual(dem_num_values[598].template_name, "traffic")
    #     self.assertEqual(dem_num_values[599].data_item_id, 711)
    #     self.assertEqual(dem_num_values[599].value, SignalDecimal(40.730470000))
    #     self.assertEqual(dem_num_values[599].template_name, "traffic")
    #     self.assertEqual(dem_num_values[600].data_item_id, 714)
    #     self.assertEqual(dem_num_values[600].value, SignalDecimal(-73.995065000))
    #     self.assertEqual(dem_num_values[600].template_name, "traffic")
    #     self.assertEqual(dem_num_values[601].data_item_id, 715)
    #     self.assertEqual(dem_num_values[601].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[601].template_name, "traffic")
    #     self.assertEqual(dem_num_values[602].data_item_id, 716)
    #     self.assertEqual(dem_num_values[602].value, SignalDecimal(4900.000000000))
    #     self.assertEqual(dem_num_values[602].template_name, "traffic")
    #     self.assertEqual(dem_num_values[603].data_item_id, 717)
    #     self.assertEqual(dem_num_values[603].value, SignalDecimal(0.130000000))
    #     self.assertEqual(dem_num_values[603].template_name, "traffic")
    #     self.assertEqual(dem_num_values[604].data_item_id, 718)
    #     self.assertEqual(dem_num_values[604].value, SignalDecimal(40.730705000))
    #     self.assertEqual(dem_num_values[604].template_name, "traffic")
    #     self.assertEqual(dem_num_values[605].data_item_id, 721)
    #     self.assertEqual(dem_num_values[605].value, SignalDecimal(-73.990483000))
    #     self.assertEqual(dem_num_values[605].template_name, "traffic")
    #     self.assertEqual(dem_num_values[606].data_item_id, 722)
    #     self.assertEqual(dem_num_values[606].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[606].template_name, "traffic")
    #     self.assertEqual(dem_num_values[607].data_item_id, 723)
    #     self.assertEqual(dem_num_values[607].value, SignalDecimal(19594.000000000))
    #     self.assertEqual(dem_num_values[607].template_name, "traffic")
    #     self.assertEqual(dem_num_values[608].data_item_id, 724)
    #     self.assertEqual(dem_num_values[608].value, SignalDecimal(0.130000000))
    #     self.assertEqual(dem_num_values[608].template_name, "traffic")
    #     self.assertEqual(dem_num_values[609].data_item_id, 725)
    #     self.assertEqual(dem_num_values[609].value, SignalDecimal(40.728672000))
    #     self.assertEqual(dem_num_values[609].template_name, "traffic")
    #     self.assertEqual(dem_num_values[610].data_item_id, 728)
    #     self.assertEqual(dem_num_values[610].value, SignalDecimal(-73.991049000))
    #     self.assertEqual(dem_num_values[610].template_name, "traffic")
    #     self.assertEqual(dem_num_values[611].data_item_id, 729)
    #     self.assertEqual(dem_num_values[611].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[611].template_name, "traffic")
    #     self.assertEqual(dem_num_values[612].data_item_id, 730)
    #     self.assertEqual(dem_num_values[612].value, SignalDecimal(5285.000000000))
    #     self.assertEqual(dem_num_values[612].template_name, "traffic")
    #     self.assertEqual(dem_num_values[613].data_item_id, 731)
    #     self.assertEqual(dem_num_values[613].value, SignalDecimal(0.140000000))
    #     self.assertEqual(dem_num_values[613].template_name, "traffic")
    #     self.assertEqual(dem_num_values[614].data_item_id, 732)
    #     self.assertEqual(dem_num_values[614].value, SignalDecimal(40.729629000))
    #     self.assertEqual(dem_num_values[614].template_name, "traffic")
    #     self.assertEqual(dem_num_values[615].data_item_id, 735)
    #     self.assertEqual(dem_num_values[615].value, SignalDecimal(-73.990233000))
    #     self.assertEqual(dem_num_values[615].template_name, "traffic")
    #     self.assertEqual(dem_num_values[616].data_item_id, 736)
    #     self.assertEqual(dem_num_values[616].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[616].template_name, "traffic")
    #     self.assertEqual(dem_num_values[617].data_item_id, 737)
    #     self.assertEqual(dem_num_values[617].value, SignalDecimal(8699.000000000))
    #     self.assertEqual(dem_num_values[617].template_name, "traffic")
    #     self.assertEqual(dem_num_values[618].data_item_id, 738)
    #     self.assertEqual(dem_num_values[618].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[618].template_name, "traffic")
    #     self.assertEqual(dem_num_values[619].data_item_id, 739)
    #     self.assertEqual(dem_num_values[619].value, SignalDecimal(40.731487000))
    #     self.assertEqual(dem_num_values[619].template_name, "traffic")
    #     self.assertEqual(dem_num_values[620].data_item_id, 742)
    #     self.assertEqual(dem_num_values[620].value, SignalDecimal(-73.994882000))
    #     self.assertEqual(dem_num_values[620].template_name, "traffic")
    #     self.assertEqual(dem_num_values[621].data_item_id, 743)
    #     self.assertEqual(dem_num_values[621].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[621].template_name, "traffic")
    #     self.assertEqual(dem_num_values[622].data_item_id, 744)
    #     self.assertEqual(dem_num_values[622].value, SignalDecimal(13348.000000000))
    #     self.assertEqual(dem_num_values[622].template_name, "traffic")
    #     self.assertEqual(dem_num_values[623].data_item_id, 745)
    #     self.assertEqual(dem_num_values[623].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[623].template_name, "traffic")
    #     self.assertEqual(dem_num_values[624].data_item_id, 746)
    #     self.assertEqual(dem_num_values[624].value, SignalDecimal(40.729113000))
    #     self.assertEqual(dem_num_values[624].template_name, "traffic")
    #     self.assertEqual(dem_num_values[625].data_item_id, 749)
    #     self.assertEqual(dem_num_values[625].value, SignalDecimal(-73.990225000))
    #     self.assertEqual(dem_num_values[625].template_name, "traffic")
    #     self.assertEqual(dem_num_values[626].data_item_id, 750)
    #     self.assertEqual(dem_num_values[626].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[626].template_name, "traffic")
    #     self.assertEqual(dem_num_values[627].data_item_id, 751)
    #     self.assertEqual(dem_num_values[627].value, SignalDecimal(18337.000000000))
    #     self.assertEqual(dem_num_values[627].template_name, "traffic")
    #     self.assertEqual(dem_num_values[628].data_item_id, 752)
    #     self.assertEqual(dem_num_values[628].value, SignalDecimal(0.150000000))
    #     self.assertEqual(dem_num_values[628].template_name, "traffic")
    #     self.assertEqual(dem_num_values[629].data_item_id, 753)
    #     self.assertEqual(dem_num_values[629].value, SignalDecimal(40.728490000))
    #     self.assertEqual(dem_num_values[629].template_name, "traffic")
    #     self.assertEqual(dem_num_values[630].data_item_id, 756)
    #     self.assertEqual(dem_num_values[630].value, SignalDecimal(-73.990687000))
    #     self.assertEqual(dem_num_values[630].template_name, "traffic")
    #     self.assertEqual(dem_num_values[631].data_item_id, 757)
    #     self.assertEqual(dem_num_values[631].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[631].template_name, "traffic")
    #     self.assertEqual(dem_num_values[632].data_item_id, 758)
    #     self.assertEqual(dem_num_values[632].value, SignalDecimal(16751.000000000))
    #     self.assertEqual(dem_num_values[632].template_name, "traffic")
    #     self.assertEqual(dem_num_values[633].data_item_id, 759)
    #     self.assertEqual(dem_num_values[633].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[633].template_name, "traffic")
    #     self.assertEqual(dem_num_values[634].data_item_id, 760)
    #     self.assertEqual(dem_num_values[634].value, SignalDecimal(40.728985000))
    #     self.assertEqual(dem_num_values[634].template_name, "traffic")
    #     self.assertEqual(dem_num_values[635].data_item_id, 763)
    #     self.assertEqual(dem_num_values[635].value, SignalDecimal(-73.995416000))
    #     self.assertEqual(dem_num_values[635].template_name, "traffic")
    #     self.assertEqual(dem_num_values[636].data_item_id, 764)
    #     self.assertEqual(dem_num_values[636].value, SignalDecimal(1995.000000000))
    #     self.assertEqual(dem_num_values[636].template_name, "traffic")
    #     self.assertEqual(dem_num_values[637].data_item_id, 765)
    #     self.assertEqual(dem_num_values[637].value, SignalDecimal(6145.000000000))
    #     self.assertEqual(dem_num_values[637].template_name, "traffic")
    #     self.assertEqual(dem_num_values[638].data_item_id, 766)
    #     self.assertEqual(dem_num_values[638].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[638].template_name, "traffic")
    #     self.assertEqual(dem_num_values[639].data_item_id, 767)
    #     self.assertEqual(dem_num_values[639].value, SignalDecimal(40.729514000))
    #     self.assertEqual(dem_num_values[639].template_name, "traffic")
    #     self.assertEqual(dem_num_values[640].data_item_id, 770)
    #     self.assertEqual(dem_num_values[640].value, SignalDecimal(-73.989800000))
    #     self.assertEqual(dem_num_values[640].template_name, "traffic")
    #     self.assertEqual(dem_num_values[641].data_item_id, 771)
    #     self.assertEqual(dem_num_values[641].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[641].template_name, "traffic")
    #     self.assertEqual(dem_num_values[642].data_item_id, 772)
    #     self.assertEqual(dem_num_values[642].value, SignalDecimal(15990.000000000))
    #     self.assertEqual(dem_num_values[642].template_name, "traffic")
    #     self.assertEqual(dem_num_values[643].data_item_id, 773)
    #     self.assertEqual(dem_num_values[643].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[643].template_name, "traffic")
    #     self.assertEqual(dem_num_values[644].data_item_id, 774)
    #     self.assertEqual(dem_num_values[644].value, SignalDecimal(40.730052000))
    #     self.assertEqual(dem_num_values[644].template_name, "traffic")
    #     self.assertEqual(dem_num_values[645].data_item_id, 777)
    #     self.assertEqual(dem_num_values[645].value, SignalDecimal(-73.995858000))
    #     self.assertEqual(dem_num_values[645].template_name, "traffic")
    #     self.assertEqual(dem_num_values[646].data_item_id, 778)
    #     self.assertEqual(dem_num_values[646].value, SignalDecimal(1995.000000000))
    #     self.assertEqual(dem_num_values[646].template_name, "traffic")
    #     self.assertEqual(dem_num_values[647].data_item_id, 779)
    #     self.assertEqual(dem_num_values[647].value, SignalDecimal(4360.000000000))
    #     self.assertEqual(dem_num_values[647].template_name, "traffic")
    #     self.assertEqual(dem_num_values[648].data_item_id, 780)
    #     self.assertEqual(dem_num_values[648].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[648].template_name, "traffic")
    #     self.assertEqual(dem_num_values[649].data_item_id, 781)
    #     self.assertEqual(dem_num_values[649].value, SignalDecimal(40.728100000))
    #     self.assertEqual(dem_num_values[649].template_name, "traffic")
    #     self.assertEqual(dem_num_values[650].data_item_id, 784)
    #     self.assertEqual(dem_num_values[650].value, SignalDecimal(-73.991001000))
    #     self.assertEqual(dem_num_values[650].template_name, "traffic")
    #     self.assertEqual(dem_num_values[651].data_item_id, 785)
    #     self.assertEqual(dem_num_values[651].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[651].template_name, "traffic")
    #     self.assertEqual(dem_num_values[652].data_item_id, 786)
    #     self.assertEqual(dem_num_values[652].value, SignalDecimal(24073.000000000))
    #     self.assertEqual(dem_num_values[652].template_name, "traffic")
    #     self.assertEqual(dem_num_values[653].data_item_id, 787)
    #     self.assertEqual(dem_num_values[653].value, SignalDecimal(0.160000000))
    #     self.assertEqual(dem_num_values[653].template_name, "traffic")
    #     self.assertEqual(dem_num_values[654].data_item_id, 788)
    #     self.assertEqual(dem_num_values[654].value, SignalDecimal(40.727985000))
    #     self.assertEqual(dem_num_values[654].template_name, "traffic")
    #     self.assertEqual(dem_num_values[655].data_item_id, 791)
    #     self.assertEqual(dem_num_values[655].value, SignalDecimal(-73.991227000))
    #     self.assertEqual(dem_num_values[655].template_name, "traffic")
    #     self.assertEqual(dem_num_values[656].data_item_id, 792)
    #     self.assertEqual(dem_num_values[656].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[656].template_name, "traffic")
    #     self.assertEqual(dem_num_values[657].data_item_id, 793)
    #     self.assertEqual(dem_num_values[657].value, SignalDecimal(2633.000000000))
    #     self.assertEqual(dem_num_values[657].template_name, "traffic")
    #     self.assertEqual(dem_num_values[658].data_item_id, 794)
    #     self.assertEqual(dem_num_values[658].value, SignalDecimal(0.170000000))
    #     self.assertEqual(dem_num_values[658].template_name, "traffic")
    #     self.assertEqual(dem_num_values[659].data_item_id, 795)
    #     self.assertEqual(dem_num_values[659].value, SignalDecimal(40.729883000))
    #     self.assertEqual(dem_num_values[659].template_name, "traffic")
    #     self.assertEqual(dem_num_values[660].data_item_id, 798)
    #     self.assertEqual(dem_num_values[660].value, SignalDecimal(-73.989555000))
    #     self.assertEqual(dem_num_values[660].template_name, "traffic")
    #     self.assertEqual(dem_num_values[661].data_item_id, 799)
    #     self.assertEqual(dem_num_values[661].value, SignalDecimal(1993.000000000))
    #     self.assertEqual(dem_num_values[661].template_name, "traffic")
    #     self.assertEqual(dem_num_values[662].data_item_id, 800)
    #     self.assertEqual(dem_num_values[662].value, SignalDecimal(18787.000000000))
    #     self.assertEqual(dem_num_values[662].template_name, "traffic")
    #     self.assertEqual(dem_num_values[663].data_item_id, 801)
    #     self.assertEqual(dem_num_values[663].value, SignalDecimal(0.180000000))
    #     self.assertEqual(dem_num_values[663].template_name, "traffic")
    #     self.assertEqual(dem_num_values[664].data_item_id, 802)
    #     self.assertEqual(dem_num_values[664].value, SignalDecimal(40.727483000))
    #     self.assertEqual(dem_num_values[664].template_name, "traffic")
    #     self.assertEqual(dem_num_values[665].data_item_id, 805)
    #     self.assertEqual(dem_num_values[665].value, SignalDecimal(-73.993474000))
    #     self.assertEqual(dem_num_values[665].template_name, "traffic")
    #     self.assertEqual(dem_num_values[666].data_item_id, 806)
    #     self.assertEqual(dem_num_values[666].value, SignalDecimal(1992.000000000))
    #     self.assertEqual(dem_num_values[666].template_name, "traffic")
    #     self.assertEqual(dem_num_values[667].data_item_id, 807)
    #     self.assertEqual(dem_num_values[667].value, SignalDecimal(13796.000000000))
    #     self.assertEqual(dem_num_values[667].template_name, "traffic")
    #     self.assertEqual(dem_num_values[668].data_item_id, 808)
    #     self.assertEqual(dem_num_values[668].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[668].template_name, "traffic")
    #     self.assertEqual(dem_num_values[669].data_item_id, 809)
    #     self.assertEqual(dem_num_values[669].value, SignalDecimal(40.727658000))
    #     self.assertEqual(dem_num_values[669].template_name, "traffic")
    #     self.assertEqual(dem_num_values[670].data_item_id, 812)
    #     self.assertEqual(dem_num_values[670].value, SignalDecimal(-73.994397000))
    #     self.assertEqual(dem_num_values[670].template_name, "traffic")
    #     self.assertEqual(dem_num_values[671].data_item_id, 813)
    #     self.assertEqual(dem_num_values[671].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[671].template_name, "traffic")
    #     self.assertEqual(dem_num_values[672].data_item_id, 814)
    #     self.assertEqual(dem_num_values[672].value, SignalDecimal(7500.000000000))
    #     self.assertEqual(dem_num_values[672].template_name, "traffic")
    #     self.assertEqual(dem_num_values[673].data_item_id, 815)
    #     self.assertEqual(dem_num_values[673].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[673].template_name, "traffic")
    #     self.assertEqual(dem_num_values[674].data_item_id, 816)
    #     self.assertEqual(dem_num_values[674].value, SignalDecimal(40.727646000))
    #     self.assertEqual(dem_num_values[674].template_name, "traffic")
    #     self.assertEqual(dem_num_values[675].data_item_id, 819)
    #     self.assertEqual(dem_num_values[675].value, SignalDecimal(-73.991009000))
    #     self.assertEqual(dem_num_values[675].template_name, "traffic")
    #     self.assertEqual(dem_num_values[676].data_item_id, 820)
    #     self.assertEqual(dem_num_values[676].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[676].template_name, "traffic")
    #     self.assertEqual(dem_num_values[677].data_item_id, 821)
    #     self.assertEqual(dem_num_values[677].value, SignalDecimal(4091.000000000))
    #     self.assertEqual(dem_num_values[677].template_name, "traffic")
    #     self.assertEqual(dem_num_values[678].data_item_id, 822)
    #     self.assertEqual(dem_num_values[678].value, SignalDecimal(0.190000000))
    #     self.assertEqual(dem_num_values[678].template_name, "traffic")
    #     self.assertEqual(dem_num_values[679].data_item_id, 823)
    #     self.assertEqual(dem_num_values[679].value, SignalDecimal(40.727391000))
    #     self.assertEqual(dem_num_values[679].template_name, "traffic")
    #     self.assertEqual(dem_num_values[680].data_item_id, 826)
    #     self.assertEqual(dem_num_values[680].value, SignalDecimal(-73.993844000))
    #     self.assertEqual(dem_num_values[680].template_name, "traffic")
    #     self.assertEqual(dem_num_values[681].data_item_id, 827)
    #     self.assertEqual(dem_num_values[681].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[681].template_name, "traffic")
    #     self.assertEqual(dem_num_values[682].data_item_id, 828)
    #     self.assertEqual(dem_num_values[682].value, SignalDecimal(8000.000000000))
    #     self.assertEqual(dem_num_values[682].template_name, "traffic")
    #     self.assertEqual(dem_num_values[683].data_item_id, 829)
    #     self.assertEqual(dem_num_values[683].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[683].template_name, "traffic")
    #     self.assertEqual(dem_num_values[684].data_item_id, 830)
    #     self.assertEqual(dem_num_values[684].value, SignalDecimal(40.732901000))
    #     self.assertEqual(dem_num_values[684].template_name, "traffic")
    #     self.assertEqual(dem_num_values[685].data_item_id, 833)
    #     self.assertEqual(dem_num_values[685].value, SignalDecimal(-73.992363000))
    #     self.assertEqual(dem_num_values[685].template_name, "traffic")
    #     self.assertEqual(dem_num_values[686].data_item_id, 834)
    #     self.assertEqual(dem_num_values[686].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[686].template_name, "traffic")
    #     self.assertEqual(dem_num_values[687].data_item_id, 835)
    #     self.assertEqual(dem_num_values[687].value, SignalDecimal(3150.000000000))
    #     self.assertEqual(dem_num_values[687].template_name, "traffic")
    #     self.assertEqual(dem_num_values[688].data_item_id, 836)
    #     self.assertEqual(dem_num_values[688].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[688].template_name, "traffic")
    #     self.assertEqual(dem_num_values[689].data_item_id, 837)
    #     self.assertEqual(dem_num_values[689].value, SignalDecimal(40.732154000))
    #     self.assertEqual(dem_num_values[689].template_name, "traffic")
    #     self.assertEqual(dem_num_values[690].data_item_id, 840)
    #     self.assertEqual(dem_num_values[690].value, SignalDecimal(-73.990173000))
    #     self.assertEqual(dem_num_values[690].template_name, "traffic")
    #     self.assertEqual(dem_num_values[691].data_item_id, 841)
    #     self.assertEqual(dem_num_values[691].value, SignalDecimal(2010.000000000))
    #     self.assertEqual(dem_num_values[691].template_name, "traffic")
    #     self.assertEqual(dem_num_values[692].data_item_id, 842)
    #     self.assertEqual(dem_num_values[692].value, SignalDecimal(20867.000000000))
    #     self.assertEqual(dem_num_values[692].template_name, "traffic")
    #     self.assertEqual(dem_num_values[693].data_item_id, 843)
    #     self.assertEqual(dem_num_values[693].value, SignalDecimal(0.200000000))
    #     self.assertEqual(dem_num_values[693].template_name, "traffic")
    #     self.assertEqual(dem_num_values[694].data_item_id, 844)
    #     self.assertEqual(dem_num_values[694].value, SignalDecimal(40.727289000))
    #     self.assertEqual(dem_num_values[694].template_name, "traffic")
    #     self.assertEqual(dem_num_values[695].data_item_id, 847)
    #     self.assertEqual(dem_num_values[695].value, SignalDecimal(-73.991470000))
    #     self.assertEqual(dem_num_values[695].template_name, "traffic")
    #     self.assertEqual(dem_num_values[696].data_item_id, 848)
    #     self.assertEqual(dem_num_values[696].value, SignalDecimal(1997.000000000))
    #     self.assertEqual(dem_num_values[696].template_name, "traffic")
    #     self.assertEqual(dem_num_values[697].data_item_id, 849)
    #     self.assertEqual(dem_num_values[697].value, SignalDecimal(21753.000000000))
    #     self.assertEqual(dem_num_values[697].template_name, "traffic")
    #     self.assertEqual(dem_num_values[698].data_item_id, 850)
    #     self.assertEqual(dem_num_values[698].value, SignalDecimal(0.220000000))
    #     self.assertEqual(dem_num_values[698].template_name, "traffic")
    #     self.assertEqual(dem_num_values[699].data_item_id, 851)
    #     self.assertEqual(dem_num_values[699].value, SignalDecimal(40.728708000))
    #     self.assertEqual(dem_num_values[699].template_name, "traffic")
    #     self.assertEqual(dem_num_values[700].data_item_id, 854)
    #     self.assertEqual(dem_num_values[700].value, SignalDecimal(-73.996668000))
    #     self.assertEqual(dem_num_values[700].template_name, "traffic")
    #     self.assertEqual(dem_num_values[701].data_item_id, 855)
    #     self.assertEqual(dem_num_values[701].value, SignalDecimal(1999.000000000))
    #     self.assertEqual(dem_num_values[701].template_name, "traffic")
    #     self.assertEqual(dem_num_values[702].data_item_id, 856)
    #     self.assertEqual(dem_num_values[702].value, SignalDecimal(7800.000000000))
    #     self.assertEqual(dem_num_values[702].template_name, "traffic")
    #     self.assertEqual(dem_num_values[703].data_item_id, 857)
    #     self.assertEqual(dem_num_values[703].value, SignalDecimal(97.000000000))
    #     self.assertEqual(dem_num_values[703].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[704].data_item_id, 858)
    #     self.assertEqual(dem_num_values[704].value, SignalDecimal(4.480000000))
    #     self.assertEqual(dem_num_values[704].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[705].data_item_id, 859)
    #     self.assertEqual(dem_num_values[705].value, SignalDecimal(12543850.000000000))
    #     self.assertEqual(dem_num_values[705].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[706].data_item_id, 860)
    #     self.assertEqual(dem_num_values[706].value, SignalDecimal(94.000000000))
    #     self.assertEqual(dem_num_values[706].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[707].data_item_id, 861)
    #     self.assertEqual(dem_num_values[707].value, SignalDecimal(2543.680000000))
    #     self.assertEqual(dem_num_values[707].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[708].data_item_id, 862)
    #     self.assertEqual(dem_num_values[708].value, SignalDecimal(7119524040.000000000))
    #     self.assertEqual(dem_num_values[708].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[709].data_item_id, 863)
    #     self.assertEqual(dem_num_values[709].value, SignalDecimal(86.000000000))
    #     self.assertEqual(dem_num_values[709].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[710].data_item_id, 864)
    #     self.assertEqual(dem_num_values[710].value, SignalDecimal(9.850000000))
    #     self.assertEqual(dem_num_values[710].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[711].data_item_id, 865)
    #     self.assertEqual(dem_num_values[711].value, SignalDecimal(27556365.000000000))
    #     self.assertEqual(dem_num_values[711].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[712].data_item_id, 866)
    #     self.assertEqual(dem_num_values[712].value, SignalDecimal(97.000000000))
    #     self.assertEqual(dem_num_values[712].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[713].data_item_id, 867)
    #     self.assertEqual(dem_num_values[713].value, SignalDecimal(52.560000000))
    #     self.assertEqual(dem_num_values[713].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[714].data_item_id, 868)
    #     self.assertEqual(dem_num_values[714].value, SignalDecimal(147114409.000000000))
    #     self.assertEqual(dem_num_values[714].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[715].data_item_id, 869)
    #     self.assertEqual(dem_num_values[715].value, SignalDecimal(87.000000000))
    #     self.assertEqual(dem_num_values[715].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[716].data_item_id, 870)
    #     self.assertEqual(dem_num_values[716].value, SignalDecimal(121.640000000))
    #     self.assertEqual(dem_num_values[716].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[717].data_item_id, 871)
    #     self.assertEqual(dem_num_values[717].value, SignalDecimal(340454894.000000000))
    #     self.assertEqual(dem_num_values[717].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[718].data_item_id, 872)
    #     self.assertEqual(dem_num_values[718].value, SignalDecimal(105.000000000))
    #     self.assertEqual(dem_num_values[718].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[719].data_item_id, 873)
    #     self.assertEqual(dem_num_values[719].value, SignalDecimal(7.190000000))
    #     self.assertEqual(dem_num_values[719].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[720].data_item_id, 874)
    #     self.assertEqual(dem_num_values[720].value, SignalDecimal(20131305.000000000))
    #     self.assertEqual(dem_num_values[720].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[721].data_item_id, 875)
    #     self.assertEqual(dem_num_values[721].value, SignalDecimal(109.000000000))
    #     self.assertEqual(dem_num_values[721].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[722].data_item_id, 876)
    #     self.assertEqual(dem_num_values[722].value, SignalDecimal(8.580000000))
    #     self.assertEqual(dem_num_values[722].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[723].data_item_id, 877)
    #     self.assertEqual(dem_num_values[723].value, SignalDecimal(24020079.000000000))
    #     self.assertEqual(dem_num_values[723].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[724].data_item_id, 878)
    #     self.assertEqual(dem_num_values[724].value, SignalDecimal(88.000000000))
    #     self.assertEqual(dem_num_values[724].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[725].data_item_id, 879)
    #     self.assertEqual(dem_num_values[725].value, SignalDecimal(14.080000000))
    #     self.assertEqual(dem_num_values[725].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[726].data_item_id, 880)
    #     self.assertEqual(dem_num_values[726].value, SignalDecimal(39397389.000000000))
    #     self.assertEqual(dem_num_values[726].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[727].data_item_id, 881)
    #     self.assertEqual(dem_num_values[727].value, SignalDecimal(114.000000000))
    #     self.assertEqual(dem_num_values[727].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[728].data_item_id, 882)
    #     self.assertEqual(dem_num_values[728].value, SignalDecimal(24.200000000))
    #     self.assertEqual(dem_num_values[728].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[729].data_item_id, 883)
    #     self.assertEqual(dem_num_values[729].value, SignalDecimal(67738058.000000000))
    #     self.assertEqual(dem_num_values[729].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[730].data_item_id, 884)
    #     self.assertEqual(dem_num_values[730].value, SignalDecimal(108.000000000))
    #     self.assertEqual(dem_num_values[730].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[731].data_item_id, 885)
    #     self.assertEqual(dem_num_values[731].value, SignalDecimal(2.650000000))
    #     self.assertEqual(dem_num_values[731].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[732].data_item_id, 886)
    #     self.assertEqual(dem_num_values[732].value, SignalDecimal(7420464.000000000))
    #     self.assertEqual(dem_num_values[732].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[733].data_item_id, 887)
    #     self.assertEqual(dem_num_values[733].value, SignalDecimal(92.000000000))
    #     self.assertEqual(dem_num_values[733].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[734].data_item_id, 888)
    #     self.assertEqual(dem_num_values[734].value, SignalDecimal(15.720000000))
    #     self.assertEqual(dem_num_values[734].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[735].data_item_id, 889)
    #     self.assertEqual(dem_num_values[735].value, SignalDecimal(43990467.000000000))
    #     self.assertEqual(dem_num_values[735].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[736].data_item_id, 890)
    #     self.assertEqual(dem_num_values[736].value, SignalDecimal(114.000000000))
    #     self.assertEqual(dem_num_values[736].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[737].data_item_id, 891)
    #     self.assertEqual(dem_num_values[737].value, SignalDecimal(42.250000000))
    #     self.assertEqual(dem_num_values[737].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[738].data_item_id, 892)
    #     self.assertEqual(dem_num_values[738].value, SignalDecimal(118252000.000000000))
    #     self.assertEqual(dem_num_values[738].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[739].data_item_id, 893)
    #     self.assertEqual(dem_num_values[739].value, SignalDecimal(118.000000000))
    #     self.assertEqual(dem_num_values[739].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[740].data_item_id, 894)
    #     self.assertEqual(dem_num_values[740].value, SignalDecimal(90.410000000))
    #     self.assertEqual(dem_num_values[740].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[741].data_item_id, 895)
    #     self.assertEqual(dem_num_values[741].value, SignalDecimal(253050162.000000000))
    #     self.assertEqual(dem_num_values[741].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[742].data_item_id, 896)
    #     self.assertEqual(dem_num_values[742].value, SignalDecimal(93.000000000))
    #     self.assertEqual(dem_num_values[742].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[743].data_item_id, 897)
    #     self.assertEqual(dem_num_values[743].value, SignalDecimal(41.530000000))
    #     self.assertEqual(dem_num_values[743].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[744].data_item_id, 898)
    #     self.assertEqual(dem_num_values[744].value, SignalDecimal(116227017.000000000))
    #     self.assertEqual(dem_num_values[744].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[745].data_item_id, 899)
    #     self.assertEqual(dem_num_values[745].value, SignalDecimal(102.000000000))
    #     self.assertEqual(dem_num_values[745].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[746].data_item_id, 900)
    #     self.assertEqual(dem_num_values[746].value, SignalDecimal(28.650000000))
    #     self.assertEqual(dem_num_values[746].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[747].data_item_id, 901)
    #     self.assertEqual(dem_num_values[747].value, SignalDecimal(80187264.000000000))
    #     self.assertEqual(dem_num_values[747].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[748].data_item_id, 902)
    #     self.assertEqual(dem_num_values[748].value, SignalDecimal(124.000000000))
    #     self.assertEqual(dem_num_values[748].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[749].data_item_id, 903)
    #     self.assertEqual(dem_num_values[749].value, SignalDecimal(10.380000000))
    #     self.assertEqual(dem_num_values[749].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[750].data_item_id, 904)
    #     self.assertEqual(dem_num_values[750].value, SignalDecimal(29040299.000000000))
    #     self.assertEqual(dem_num_values[750].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[751].data_item_id, 905)
    #     self.assertEqual(dem_num_values[751].value, SignalDecimal(104.000000000))
    #     self.assertEqual(dem_num_values[751].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[752].data_item_id, 906)
    #     self.assertEqual(dem_num_values[752].value, SignalDecimal(34.780000000))
    #     self.assertEqual(dem_num_values[752].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[753].data_item_id, 907)
    #     self.assertEqual(dem_num_values[753].value, SignalDecimal(97341931.000000000))
    #     self.assertEqual(dem_num_values[753].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[754].data_item_id, 908)
    #     self.assertEqual(dem_num_values[754].value, SignalDecimal(118.000000000))
    #     self.assertEqual(dem_num_values[754].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[755].data_item_id, 909)
    #     self.assertEqual(dem_num_values[755].value, SignalDecimal(15.280000000))
    #     self.assertEqual(dem_num_values[755].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[756].data_item_id, 910)
    #     self.assertEqual(dem_num_values[756].value, SignalDecimal(42776410.000000000))
    #     self.assertEqual(dem_num_values[756].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[757].data_item_id, 911)
    #     self.assertEqual(dem_num_values[757].value, SignalDecimal(104.000000000))
    #     self.assertEqual(dem_num_values[757].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[758].data_item_id, 912)
    #     self.assertEqual(dem_num_values[758].value, SignalDecimal(18.620000000))
    #     self.assertEqual(dem_num_values[758].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[759].data_item_id, 913)
    #     self.assertEqual(dem_num_values[759].value, SignalDecimal(52120020.000000000))
    #     self.assertEqual(dem_num_values[759].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[760].data_item_id, 914)
    #     self.assertEqual(dem_num_values[760].value, SignalDecimal(90.000000000))
    #     self.assertEqual(dem_num_values[760].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[761].data_item_id, 915)
    #     self.assertEqual(dem_num_values[761].value, SignalDecimal(77.910000000))
    #     self.assertEqual(dem_num_values[761].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[762].data_item_id, 916)
    #     self.assertEqual(dem_num_values[762].value, SignalDecimal(218075548.000000000))
    #     self.assertEqual(dem_num_values[762].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[763].data_item_id, 917)
    #     self.assertEqual(dem_num_values[763].value, SignalDecimal(95.000000000))
    #     self.assertEqual(dem_num_values[763].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[764].data_item_id, 918)
    #     self.assertEqual(dem_num_values[764].value, SignalDecimal(84.510000000))
    #     self.assertEqual(dem_num_values[764].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[765].data_item_id, 919)
    #     self.assertEqual(dem_num_values[765].value, SignalDecimal(236542522.000000000))
    #     self.assertEqual(dem_num_values[765].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[766].data_item_id, 920)
    #     self.assertEqual(dem_num_values[766].value, SignalDecimal(109.000000000))
    #     self.assertEqual(dem_num_values[766].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[767].data_item_id, 921)
    #     self.assertEqual(dem_num_values[767].value, SignalDecimal(65.200000000))
    #     self.assertEqual(dem_num_values[767].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[768].data_item_id, 922)
    #     self.assertEqual(dem_num_values[768].value, SignalDecimal(182498107.000000000))
    #     self.assertEqual(dem_num_values[768].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[769].data_item_id, 923)
    #     self.assertEqual(dem_num_values[769].value, SignalDecimal(118.000000000))
    #     self.assertEqual(dem_num_values[769].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[770].data_item_id, 924)
    #     self.assertEqual(dem_num_values[770].value, SignalDecimal(7.610000000))
    #     self.assertEqual(dem_num_values[770].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[771].data_item_id, 925)
    #     self.assertEqual(dem_num_values[771].value, SignalDecimal(21304847.000000000))
    #     self.assertEqual(dem_num_values[771].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[772].data_item_id, 926)
    #     self.assertEqual(dem_num_values[772].value, SignalDecimal(111.000000000))
    #     self.assertEqual(dem_num_values[772].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[773].data_item_id, 927)
    #     self.assertEqual(dem_num_values[773].value, SignalDecimal(29.920000000))
    #     self.assertEqual(dem_num_values[773].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[774].data_item_id, 928)
    #     self.assertEqual(dem_num_values[774].value, SignalDecimal(83751393.000000000))
    #     self.assertEqual(dem_num_values[774].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[775].data_item_id, 929)
    #     self.assertEqual(dem_num_values[775].value, SignalDecimal(114.000000000))
    #     self.assertEqual(dem_num_values[775].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[776].data_item_id, 930)
    #     self.assertEqual(dem_num_values[776].value, SignalDecimal(72.070000000))
    #     self.assertEqual(dem_num_values[776].template_name, "Automotive Aftermarket Expenditures")
    #     self.assertEqual(dem_num_values[777].data_item_id, 931)
    #     self.assertEqual(dem_num_values[777].value, SignalDecimal(201708988.000000000))
    #     self.assertEqual(dem_num_values[777].template_name, "Automotive Aftermarket Expenditures")


if __name__ == '__main__':
    unittest.main()
